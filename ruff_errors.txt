

analyzer\strategies\crash_protection.py:200:17: F841 Local variable `macd_negative` is assigned to but never used
    |
198 |                 macd = df['macd'].iloc[-1]
199 |                 macd_signal = df['macd_signal'].iloc[-1]
200 |                 macd_negative = macd < macd_signal and macd < 0
    |                 ^^^^^^^^^^^^^ F841
201 |             
202 |             # Conditions d'effondrement
    |
    = help: Remove assignment to unused variable `macd_negative`

coordinator\src\coordinator.py:156:13: F841 Local variable `quote_asset` is assigned to but never used
    |
154 |             # Extraire les assets
155 |             base_asset = self._get_base_asset(signal.symbol)
156 |             quote_asset = self._get_quote_asset(signal.symbol)
    |             ^^^^^^^^^^^ F841
157 |             
158 |             if signal.side == OrderSide.BUY:
    |
    = help: Remove assignment to unused variable `quote_asset`

dispatcher\src\message_router.py:564:9: E722 Do not use bare `except`
    |
562 | ‚Ä¶             if queue_size > 0 or high_priority_size > 0:
563 | ‚Ä¶                 logger.warning(f"‚ö†Ô∏è Messages non trait√©s lors de la fermeture: {queue_size} normaux, {high_priority_size} haute pri‚Ä¶r
564 | ‚Ä¶     except:
    |       ^^^^^^ E722
565 | ‚Ä¶         pass
    |

gateway\src\binance_ws.py:349:50: E741 Ambiguous variable name: `l`
    |
347 | ‚Ä¶     ]
348 | ‚Ä¶     
349 | ‚Ä¶     if not all(l == final_lengths[0] for l in final_lengths):
    |                                            ^ E741
350 | ‚Ä¶         logger.error(f"‚ùå ERREUR CRITIQUE: Buffers encore d√©salign√©s apr√®s correction {symbol} {timeframe}: {final_lengths}")
351 | ‚Ä¶         # Force synchronization as last resort
    |

gateway\src\binance_ws.py:375:44: E741 Ambiguous variable name: `l`
    |
373 | ‚Ä¶     # V√©rifier que tous les buffers sont bien align√©s
374 | ‚Ä¶     all_lengths = [len(prices), len(highs), len(lows), len(volumes)]
375 | ‚Ä¶     if all(l == all_lengths[0] for l in all_lengths):
    |                                      ^ E741
376 | ‚Ä¶         logger.info(f"üìä HYBRIDE WebSocket {symbol} {timeframe}: buffers=[P:{len(prices)},H:{len(highs)},L:{len(lows)},V:{len(volume‚Ä¶
377 | ‚Ä¶     else:
    |

gateway\src\binance_ws.py:1223:52: E741 Ambiguous variable name: `l`
     |
1221 | ‚Ä¶     # üîß CORRECTION CRITIQUE: Aligner les buffers actuels AVANT extension
1222 | ‚Ä¶     current_lengths = [len(current_prices), len(current_highs), len(current_lows), len(current_volumes)]
1223 | ‚Ä¶     if not all(l == current_lengths[0] for l in current_lengths):
     |                                              ^ E741
1224 | ‚Ä¶         logger.warning(f"üîß D√©salignement d√©tect√© avant extension {symbol} {timeframe}: P:{len(current_prices)} H:{len(current_high‚Ä¶
     |

gateway\src\binance_ws.py:1290:53: E741 Ambiguous variable name: `l`
     |
1288 | ‚Ä¶     # üîß VALIDATION FINALE: V√©rifier l'alignement post-extension
1289 | ‚Ä¶     extended_lengths = [len(extended_prices), len(extended_highs), len(extended_lows), len(extended_volumes)]
1290 | ‚Ä¶     if not all(l == extended_lengths[0] for l in extended_lengths):
     |                                               ^ E741
1291 | ‚Ä¶         logger.error(f"‚ùå D√âSALIGNEMENT CRITIQUE apr√®s extension {symbol} {timeframe}: P:{len(extended_prices)} H:{len(extended_hig‚Ä¶
     |

gateway\src\binance_ws.py:1511:52: E741 Ambiguous variable name: `l`
     |
1510 |                     # D√©tecter les probl√®mes
1511 |                     if not all(l == lengths[0] for l in lengths):
     |                                                    ^ E741
1512 |                         total_issues += 1
1513 |                         min_len = min(lengths)
     |

gateway\src\main.py:283:5: F841 Local variable `validation_fetcher` is assigned to but never used
    |
281 |     """
282 |     global ws_client
283 |     validation_fetcher = None
    |     ^^^^^^^^^^^^^^^^^^ F841
284 |     
285 |     # Parser les arguments
    |
    = help: Remove assignment to unused variable `validation_fetcher`

gateway\src\main.py:295:5: F841 Local variable `producer` is assigned to but never used
    |
294 |     # Obtenir le producteur Kafka
295 |     producer = get_producer()
    |     ^^^^^^^^ F841
296 |     
297 |     try:
    |
    = help: Remove assignment to unused variable `producer`

gateway\src\ultra_data_fetcher.py:1139:13: F841 Local variable `latest_kline` is assigned to but never used
     |
1138 |             # Prendre la derni√®re kline comme donn√©es actuelles (plus r√©cente)
1139 |             latest_kline = klines[-1]
     |             ^^^^^^^^^^^^ F841
1140 |             
1141 |             # Traiter comme une kline normale pour obtenir les indicateurs
     |
     = help: Remove assignment to unused variable `latest_kline`

portfolio\src\binance_account_manager.py:142:17: E722 Do not use bare `except`
    |
140 |                     error_data = e.response.json()
141 |                     error_message = f"{error_message}: {error_data.get('msg', str(error_data))}"
142 |                 except:
    |                 ^^^^^^ E722
143 |                     error_message = f"{error_message}: {e.response.text}"
    |

portfolio\src\models.py:132:21: E722 Do not use bare `except`
    |
130 |                     try:
131 |                         self.conn.close()
132 |                     except:
    |                     ^^^^^^ E722
133 |                         pass
134 |             except:
    |

portfolio\src\models.py:134:13: E722 Do not use bare `except`
    |
132 |                     except:
133 |                         pass
134 |             except:
    |             ^^^^^^ E722
135 |                 pass
    |

portfolio\src\models.py:221:25: E722 Do not use bare `except`
    |
219 |                             if self.conn:
220 |                                 self.conn.close()
221 |                         except:
    |                         ^^^^^^ E722
222 |                             pass
223 |                 except:
    |

portfolio\src\models.py:223:17: E722 Do not use bare `except`
    |
221 |                         except:
222 |                             pass
223 |                 except:
    |                 ^^^^^^ E722
224 |                     pass
    |

portfolio\src\models.py:246:17: E722 Do not use bare `except`
    |
244 |                     if self.conn:
245 |                         self.conn.rollback()
246 |                 except:
    |                 ^^^^^^ E722
247 |                     pass
248 |                 return None
    |

portfolio\src\models.py:292:13: E722 Do not use bare `except`
    |
290 |                 if self.conn:
291 |                     self.conn.rollback()
292 |             except:
    |             ^^^^^^ E722
293 |                 pass
294 |             return False
    |

portfolio\src\models.py:334:17: E722 Do not use bare `except`
    |
332 |                     if self.conn:
333 |                         self.conn.rollback()
334 |                 except:
    |                 ^^^^^^ E722
335 |                     pass
336 |                 return False
    |

portfolio\src\redis_subscriber.py:65:9: F841 Local variable `quantity` is assigned to but never used
   |
63 |         entry_price = float(data.get("entry_price", 0.0))
64 |         exit_price = float(data.get("exit_price", 0.0))
65 |         quantity = float(data.get("quantity", 0.0))
   |         ^^^^^^^^ F841
66 |         pnl = float(data.get("pnl", 0.0))
   |
   = help: Remove assignment to unused variable `quantity`

shared\src\db_pool.py:570:25: E722 Do not use bare `except`
    |
568 |                             logger.critical(f"Diagnostic: {pool_stats['in_use_connections']}/{pool_stats['total_connections']} "
569 |                                           f"connexions utilis√©es ({pool_stats['usage_percent']:.1f}%)")
570 |                         except:
    |                         ^^^^^^ E722
571 |                             pass
    |

shared\src\db_pool.py:625:13: E722 Do not use bare `except`
    |
623 |                 if conn and not conn.closed:
624 |                     conn.close()
625 |             except:
    |             ^^^^^^ E722
626 |                 pass
    |

shared\src\technical_indicators.py:725:13: F841 Local variable `high_close` is assigned to but never used
    |
723 |             # Calcul du True Range (TR)
724 |             high_low = highs_array - lows_array
725 |             high_close = np.abs(highs_array[1:] - closes_array[:-1])
    |             ^^^^^^^^^^ F841
726 |             low_close = np.abs(lows_array[1:] - closes_array[:-1])
    |
    = help: Remove assignment to unused variable `high_close`

shared\src\technical_indicators.py:726:13: F841 Local variable `low_close` is assigned to but never used
    |
724 |             high_low = highs_array - lows_array
725 |             high_close = np.abs(highs_array[1:] - closes_array[:-1])
726 |             low_close = np.abs(lows_array[1:] - closes_array[:-1])
    |             ^^^^^^^^^ F841
727 |             
728 |             # Combine les arrays pour le TR
    |
    = help: Remove assignment to unused variable `low_close`

shared\src\technical_indicators.py:1037:21: F841 Local variable `prev_supertrend` is assigned to but never used
     |
1035 |                     # Calcul bas√© sur direction pr√©c√©dente et r√®gles de changement
1036 |                     prev_direction = directions[-1]
1037 |                     prev_supertrend = supertrend_values[-1]
     |                     ^^^^^^^^^^^^^^^ F841
1038 |                     
1039 |                     if prev_direction == 1:  # √âtait en tendance haussi√®re
     |
     = help: Remove assignment to unused variable `prev_supertrend`

shared\src\technical_indicators.py:1751:40: E741 Ambiguous variable name: `l`
     |
1749 |             # V√©rification post-alignement
1750 |             post_lengths = [len(arr) for arr in aligned_arrays]
1751 |             if all(l == min_length for l in post_lengths):
     |                                        ^ E741
1752 |                 logger.info(f"‚úÖ Post-alignement r√©ussi: {post_lengths}")
1753 |             else:
     |

signal_aggregator\src\adaptive_regime_enhanced.py:546:13: F841 Local variable `base_patterns` is assigned to but never used
    |
544 |         try:
545 |             crypto_type = self._classify_crypto_type(symbol)
546 |             base_patterns = self.crypto_regime_patterns[crypto_type]
    |             ^^^^^^^^^^^^^ F841
547 |             
548 |             # Seuils par d√©faut
    |
    = help: Remove assignment to unused variable `base_patterns`

signal_aggregator\src\enhanced_cooldown.py:167:9: E722 Do not use bare `except`
    |
165 |             ttl = self.redis.ttl(key)
166 |             return max(0, ttl if ttl else 0)
167 |         except:
    |         ^^^^^^ E722
168 |             return 0
    |

signal_aggregator\src\enhanced_regime_detector.py:206:13: F841 Local variable `current_volume` is assigned to but never used
    |
204 |             current_atr = latest.get('atr_14', 0)
205 |             current_close = latest.get('close', 0)
206 |             current_volume = latest.get('volume', 0)
    |             ^^^^^^^^^^^^^^ F841
207 |             volume_ratio = latest.get('volume_ratio', 1.0)
    |
    = help: Remove assignment to unused variable `current_volume`

signal_aggregator\src\enhanced_regime_detector.py:389:13: F841 Local variable `volumes` is assigned to but never used
    |
387 |             lows = df['low'].values.tolist()
388 |             closes = df['close'].values.tolist()
389 |             volumes = df['volume'].values.tolist()
    |             ^^^^^^^ F841
390 |             
391 |             # 1. ADX pour la force de tendance (avec lissage)
    |
    = help: Remove assignment to unused variable `volumes`

signal_aggregator\src\enhanced_regime_detector.py:713:13: E722 Do not use bare `except`
    |
711 |                 if cached:
712 |                     return float(cached)
713 |             except:
    |             ^^^^^^ E722
714 |                 pass  # Continue without cache if Redis fails
    |

signal_aggregator\src\enhanced_regime_detector.py:723:13: E722 Do not use bare `except`
    |
721 |             try:
722 |                 await self.redis.set(cache_key, str(danger_level), expiration=60)
723 |             except:
    |             ^^^^^^ E722
724 |                 pass  # Continue without cache if Redis fails
    |

signal_aggregator\src\enhanced_regime_detector.py:786:9: E722 Do not use bare `except`
    |
784 |             recovery_key = f"recovery_period:{symbol}"
785 |             return bool(await self.redis.get(recovery_key))
786 |         except:
    |         ^^^^^^ E722
787 |             return False
    |

signal_aggregator\src\enhanced_regime_detector.py:794:9: E722 Do not use bare `except`
    |
792 |             opportunity_key = f"opportunity_period:{symbol}"
793 |             return bool(await self.redis.get(opportunity_key))
794 |         except:
    |         ^^^^^^ E722
795 |             return False
    |

signal_aggregator\src\enhanced_regime_detector.py:843:13: F841 Local variable `bb_upper` is assigned to but never used
    |
841 |             # Extraire les indicateurs pr√©-calcul√©s
842 |             current_rsi = latest_candle.get('rsi_14')
843 |             bb_upper = latest_candle.get('bb_upper')
    |             ^^^^^^^^ F841
844 |             bb_lower = latest_candle.get('bb_lower')
845 |             bb_middle = latest_candle.get('bb_middle')
    |
    = help: Remove assignment to unused variable `bb_upper`

signal_aggregator\src\enhanced_regime_detector.py:844:13: F841 Local variable `bb_lower` is assigned to but never used
    |
842 |             current_rsi = latest_candle.get('rsi_14')
843 |             bb_upper = latest_candle.get('bb_upper')
844 |             bb_lower = latest_candle.get('bb_lower')
    |             ^^^^^^^^ F841
845 |             bb_middle = latest_candle.get('bb_middle')
846 |             bb_width = latest_candle.get('bb_width')
    |
    = help: Remove assignment to unused variable `bb_lower`

signal_aggregator\src\enhanced_regime_detector.py:845:13: F841 Local variable `bb_middle` is assigned to but never used
    |
843 |             bb_upper = latest_candle.get('bb_upper')
844 |             bb_lower = latest_candle.get('bb_lower')
845 |             bb_middle = latest_candle.get('bb_middle')
    |             ^^^^^^^^^ F841
846 |             bb_width = latest_candle.get('bb_width')
847 |             bb_position = latest_candle.get('bb_position')
    |
    = help: Remove assignment to unused variable `bb_middle`

signal_aggregator\src\enhanced_regime_detector.py:848:13: F841 Local variable `current_close` is assigned to but never used
    |
846 |             bb_width = latest_candle.get('bb_width')
847 |             bb_position = latest_candle.get('bb_position')
848 |             current_close = latest_candle['close']
    |             ^^^^^^^^^^^^^ F841
849 |             
850 |             # Calculer les indicateurs manquants (ADX, ROC) avec le module partag√©
    |
    = help: Remove assignment to unused variable `current_close`

signal_aggregator\src\enhanced_regime_detector.py:925:13: F841 Local variable `volumes` is assigned to but never used
    |
923 |             lows = df['low'].values.tolist()
924 |             closes = df['close'].values.tolist()
925 |             volumes = df['volume'].values.tolist()
    |             ^^^^^^^ F841
926 |             
927 |             # Calculs complets avec le module partag√© (avec lissage ADX)
    |
    = help: Remove assignment to unused variable `volumes`

signal_aggregator\src\indicator_coherence.py:273:13: F841 Local variable `volume_trend` is assigned to but never used
    |
271 |         try:
272 |             volume_ratio = indicators.get('volume_ratio')
273 |             volume_trend = indicators.get('volume_trend')
    |             ^^^^^^^^^^^^ F841
274 |             
275 |             if not volume_ratio:
    |
    = help: Remove assignment to unused variable `volume_trend`

signal_aggregator\src\market_structure_detector.py:379:69: E741 Ambiguous variable name: `l`
    |
378 |             # Analyser la tendance des lows  
379 |             low_trend = self._calculate_price_trend([l['price'] for l in lows[-3:]])
    |                                                                     ^ E741
380 |             
381 |             # D√©terminer la structure
    |

signal_aggregator\src\market_structure_detector.py:509:51: E741 Ambiguous variable name: `l`
    |
507 |             for level in levels[1:]:
508 |                 # V√©rifier si le niveau est proche du groupe actuel
509 |                 group_avg_price = sum(l.price for l in current_group) / len(current_group)
    |                                                   ^ E741
510 |                 
511 |                 if abs(level.price - group_avg_price) / group_avg_price < threshold:
    |

signal_aggregator\src\market_structure_detector.py:779:44: E741 Ambiguous variable name: `l`
    |
777 |             else:
778 |                 # Analyser les niveaux pour d√©terminer le biais
779 |                 resistance_levels = [l for l in key_levels if l.level_type == 'resistance']
    |                                            ^ E741
780 |                 support_levels = [l for l in key_levels if l.level_type == 'support']
    |

signal_aggregator\src\market_structure_detector.py:780:41: E741 Ambiguous variable name: `l`
    |
778 |                 # Analyser les niveaux pour d√©terminer le biais
779 |                 resistance_levels = [l for l in key_levels if l.level_type == 'resistance']
780 |                 support_levels = [l for l in key_levels if l.level_type == 'support']
    |                                         ^ E741
781 |                 
782 |                 if len(support_levels) > len(resistance_levels):
    |

signal_aggregator\src\regime_filtering.py:54:13: F841 Local variable `technical_context` is assigned to but never used
   |
53 |             # NOUVEAU: R√©cup√©rer donn√©es techniques pour validation Enhanced
54 |             technical_context = await self.technical_analysis.get_technical_context(symbol) if self.technical_analysis else {}
   |             ^^^^^^^^^^^^^^^^^ F841
55 |             
56 |             # Seuils adaptatifs selon le r√©gime Enhanced + contexte technique
   |
   = help: Remove assignment to unused variable `technical_context`

signal_aggregator\src\signal_aggregator.py:35:1: E402 Module level import not at top of file
   |
33 |     MarketRegimeType = Any
34 |
35 | from enhanced_regime_detector import EnhancedRegimeDetector, MarketRegime
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

signal_aggregator\src\signal_aggregator.py:602:13: F841 Local variable `sell_ratio` is assigned to but never used
    |
600 |             total_signals = len(BUY_signals) + len(SELL_signals)
601 |             buy_ratio = len(BUY_signals) / total_signals
602 |             sell_ratio = len(SELL_signals) / total_signals
    |             ^^^^^^^^^^ F841
603 |             
604 |             # Si les signaux sont trop √©quilibr√©s (40-60%), rejeter
    |
    = help: Remove assignment to unused variable `sell_ratio`

signal_aggregator\src\signal_aggregator.py:667:9: F841 Local variable `main_strategy` is assigned to but never used
    |
666 |         # Create main strategy name from contributing strategies
667 |         main_strategy = contributing_strategies[0] if contributing_strategies else 'SignalAggregator'
    |         ^^^^^^^^^^^^^ F841
668 |         
669 |         # NOUVEAU: Volume-based confidence boost (classique)
    |
    = help: Remove assignment to unused variable `main_strategy`

signal_aggregator\src\signal_aggregator.py:815:13: F841 Local variable `final_metrics` is assigned to but never used
    |
813 |             # Fallback vers analyse standard
814 |             final_regime = regime
815 |             final_metrics = regime_metrics
    |             ^^^^^^^^^^^^^ F841
816 |             regime_weights = self.enhanced_regime_detector.get_strategy_weights_for_regime(final_regime)
817 |             confluence_weight_modifier = 1.0
    |
    = help: Remove assignment to unused variable `final_metrics`

signal_aggregator\src\signal_aggregator.py:1009:9: F841 Local variable `main_strategy` is assigned to but never used
     |
1008 |         # Create main strategy name from contributing strategies
1009 |         main_strategy = contributing_strategies[0] if contributing_strategies else 'SignalAggregator'
     |         ^^^^^^^^^^^^^ F841
1010 |         
1011 |         # Performance-based adaptive boost
     |
     = help: Remove assignment to unused variable `main_strategy`

signal_aggregator\src\signal_aggregator.py:1277:9: F841 Local variable `adaptive_strategies` is assigned to but never used
     |
1275 |         trend_strategies = ['EMA_Cross', 'MACD', 'Breakout']
1276 |         reversal_strategies = ['RSI', 'Bollinger', 'Divergence']
1277 |         adaptive_strategies = ['Ride_or_React']  # S'adapte au contexte
     |         ^^^^^^^^^^^^^^^^^^^ F841
1278 |         
1279 |         # S√©parer les signaux par type
     |
     = help: Remove assignment to unused variable `adaptive_strategies`

signal_aggregator\src\signal_aggregator.py:1436:13: F841 Local variable `candle_duration` is assigned to but never used
     |
1434 |                 interval = self.redis.get(market_key) or '15m'  # Par d√©faut 15m pour swing trading
1435 |             
1436 |             candle_duration = interval_map.get(interval, timedelta(minutes=15))
     |             ^^^^^^^^^^^^^^^ F841
1437 |             
1438 |             # Debounce fixe en minutes (plus li√© aux bougies)
     |
     = help: Remove assignment to unused variable `candle_duration`

signal_aggregator\src\signal_validator.py:102:13: F841 Local variable `ema_99_velocity` is assigned to but never used
    |
100 |             # Calculer v√©locit√© avec EMAs lisses
101 |             ema_21_velocity = (ema_21 - ema_21_prev) / ema_21_prev if ema_21_prev > 0 else 0
102 |             ema_99_velocity = (ema_99 - ema_99_prev) / ema_99_prev if ema_99_prev > 0 else 0
    |             ^^^^^^^^^^^^^^^ F841
103 |             
104 |             # Stocker les valeurs actuelles comme "pr√©c√©dentes" pour le prochain calcul
    |
    = help: Remove assignment to unused variable `ema_99_velocity`

signal_aggregator\src\signal_validator.py:109:13: F841 Local variable `trend_strength` is assigned to but never used
    |
108 |             # Calculer la force de la tendance
109 |             trend_strength = abs(ema_21 - ema_99) / ema_99 if ema_99 > 0 else 0
    |             ^^^^^^^^^^^^^^ F841
110 |             
111 |             # Classification sophistiqu√©e de la tendance
    |
    = help: Remove assignment to unused variable `trend_strength`

signal_aggregator\src\signal_validator.py:237:17: F841 Local variable `rsi_buy_threshold` is assigned to but never used
    |
235 |                 rsi_sell_threshold = 20
236 |             else:  # Faible volatilit√©
237 |                 rsi_buy_threshold = 85  # Plus strict
    |                 ^^^^^^^^^^^^^^^^^ F841
238 |                 rsi_sell_threshold = 15
    |
    = help: Remove assignment to unused variable `rsi_buy_threshold`

signal_aggregator\src\signal_validator.py:238:17: F841 Local variable `rsi_sell_threshold` is assigned to but never used
    |
236 |             else:  # Faible volatilit√©
237 |                 rsi_buy_threshold = 85  # Plus strict
238 |                 rsi_sell_threshold = 15
    |                 ^^^^^^^^^^^^^^^^^^ F841
239 |             
240 |             # Validation RSI pour timing pump
    |
    = help: Remove assignment to unused variable `rsi_sell_threshold`

signal_aggregator\src\signal_validator.py:287:13: F841 Local variable `rsi_neutral_high` is assigned to but never used
    |
285 |             rsi_overbought = rsi > 70
286 |             rsi_oversold = rsi < 30
287 |             rsi_neutral_high = 60 < rsi < 70
    |             ^^^^^^^^^^^^^^^^ F841
288 |             rsi_neutral_low = 30 < rsi < 40
    |
    = help: Remove assignment to unused variable `rsi_neutral_high`

signal_aggregator\src\signal_validator.py:288:13: F841 Local variable `rsi_neutral_low` is assigned to but never used
    |
286 |             rsi_oversold = rsi < 30
287 |             rsi_neutral_high = 60 < rsi < 70
288 |             rsi_neutral_low = 30 < rsi < 40
    |             ^^^^^^^^^^^^^^^ F841
289 |             
290 |             # Divergences baissi√®res (prix monte, RSI faiblit)
    |
    = help: Remove assignment to unused variable `rsi_neutral_low`

signal_aggregator\src\signal_validator.py:377:9: F841 Local variable `price_targets` is assigned to but never used
    |
376 |         # V√©rifier que les signaux pointent dans la m√™me direction g√©n√©rale
377 |         price_targets: list[float] = []
    |         ^^^^^^^^^^^^^ F841
378 |         stop_losses: list[float] = []
    |
    = help: Remove assignment to unused variable `price_targets`

signal_aggregator\src\technical_analysis.py:51:13: F841 Local variable `highs` is assigned to but never used
   |
49 |             prices = data_5m.get('prices', [])
50 |             volumes = data_5m.get('volumes', [])
51 |             highs = data_5m.get('highs', [])
   |             ^^^^^ F841
52 |             lows = data_5m.get('lows', [])
   |
   = help: Remove assignment to unused variable `highs`

signal_aggregator\src\technical_analysis.py:52:13: F841 Local variable `lows` is assigned to but never used
   |
50 |             volumes = data_5m.get('volumes', [])
51 |             highs = data_5m.get('highs', [])
52 |             lows = data_5m.get('lows', [])
   |             ^^^^ F841
53 |             
54 |             if len(prices) < 30:  # Minimum pour les calculs
   |
   = help: Remove assignment to unused variable `lows`

signal_aggregator\src\technical_analysis.py:68:17: E722 Do not use bare `except`
   |
66 |                     if obv_value is not None:
67 |                         context['obv'] = obv_value
68 |                 except:
   |                 ^^^^^^ E722
69 |                     pass  # OBV optionnel
   |

signal_aggregator\src\technical_analysis.py:76:13: E722 Do not use bare `except`
   |
74 |                 if roc_value is not None:
75 |                     context['roc'] = roc_value
76 |             except:
   |             ^^^^^^ E722
77 |                 pass  # ROC optionnel
   |

signal_aggregator\src\technical_analysis.py:536:17: F841 Local variable `prev_rsi` is assigned to but never used
    |
534 |                 # RSI incr√©mental (n√©cessite historique de gains/pertes)
535 |                 period = params.get('period', 14)
536 |                 prev_rsi = cache.get(f'rsi_{period}')
    |                 ^^^^^^^^ F841
537 |                 prev_avg_gain = cache.get(f'rsi_{period}_avg_gain')
538 |                 prev_avg_loss = cache.get(f'rsi_{period}_avg_loss')
    |
    = help: Remove assignment to unused variable `prev_rsi`

