analyzer\src\bar_aggregator.py:6:8: F401 [*] `math` imported but unused
  |
4 | on le relaie tel quel ; sinon on cumule jusqu’à la fin de la minute.
5 | """
6 | import math
  |        ^^^^ F401
7 | from typing import Dict, Optional
  |
  = help: Remove unused import: `math`

analyzer\src\indicators\indicator_cache.py:6:23: F401 [*] `functools.lru_cache` imported but unused
  |
4 | import numpy as np
5 | import pandas as pd
6 | from functools import lru_cache
  |                       ^^^^^^^^^ F401
7 | from typing import Union, Tuple, Optional
8 | import hashlib
  |
  = help: Remove unused import: `functools.lru_cache`

analyzer\src\indicators\indicator_cache.py:7:27: F401 [*] `typing.Tuple` imported but unused
  |
5 | import pandas as pd
6 | from functools import lru_cache
7 | from typing import Union, Tuple, Optional
  |                           ^^^^^ F401
8 | import hashlib
9 | import time
  |
  = help: Remove unused import

analyzer\src\indicators\indicator_cache.py:7:34: F401 [*] `typing.Optional` imported but unused
  |
5 | import pandas as pd
6 | from functools import lru_cache
7 | from typing import Union, Tuple, Optional
  |                                  ^^^^^^^^ F401
8 | import hashlib
9 | import time
  |
  = help: Remove unused import

analyzer\src\indicators\vectorized_indicators.py:6:26: F401 [*] `typing.Tuple` imported but unused
  |
4 | import numpy as np
5 | import pandas as pd
6 | from typing import Dict, Tuple, Optional
  |                          ^^^^^ F401
7 | import talib
8 | import pandas_ta as ta
  |
  = help: Remove unused import

analyzer\src\indicators\vectorized_indicators.py:6:33: F401 [*] `typing.Optional` imported but unused
  |
4 | import numpy as np
5 | import pandas as pd
6 | from typing import Dict, Tuple, Optional
  |                                 ^^^^^^^^ F401
7 | import talib
8 | import pandas_ta as ta
  |
  = help: Remove unused import

analyzer\src\main.py:13:35: F401 [*] `flask.request` imported but unused
   |
11 | import threading
12 | import psutil
13 | from flask import Flask, jsonify, request
   |                                   ^^^^^^^ F401
14 |
15 | # Ajouter le répertoire parent au path pour les imports
   |
   = help: Remove unused import: `flask.request`

analyzer\src\multiproc_manager.py:13:37: F401 [*] `typing.Optional` imported but unused
   |
11 | import signal
12 | import threading
13 | from typing import Dict, List, Any, Optional, Callable
   |                                     ^^^^^^^^ F401
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
15 | import queue
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:13:47: F401 [*] `typing.Callable` imported but unused
   |
11 | import signal
12 | import threading
13 | from typing import Dict, List, Any, Optional, Callable
   |                                               ^^^^^^^^ F401
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
15 | import queue
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:14:32: F401 [*] `concurrent.futures.ProcessPoolExecutor` imported but unused
   |
12 | import threading
13 | from typing import Dict, List, Any, Optional, Callable
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
   |                                ^^^^^^^^^^^^^^^^^^^ F401
15 | import queue
16 | from functools import partial
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:14:53: F401 [*] `concurrent.futures.ThreadPoolExecutor` imported but unused
   |
12 | import threading
13 | from typing import Dict, List, Any, Optional, Callable
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
   |                                                     ^^^^^^^^^^^^^^^^^^ F401
15 | import queue
16 | from functools import partial
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:14:73: F401 [*] `concurrent.futures.as_completed` imported but unused
   |
12 | import threading
13 | from typing import Dict, List, Any, Optional, Callable
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
   |                                                                         ^^^^^^^^^^^^ F401
15 | import queue
16 | from functools import partial
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:16:23: F401 [*] `functools.partial` imported but unused
   |
14 | from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed
15 | import queue
16 | from functools import partial
   |                       ^^^^^^^ F401
17 | from multiprocessing import Manager as MPManager
   |
   = help: Remove unused import: `functools.partial`

analyzer\src\multiproc_manager.py:23:32: F401 [*] `shared.src.schemas.StrategySignal` imported but unused
   |
22 | from shared.src.config import SYMBOLS
23 | from shared.src.schemas import StrategySignal
   |                                ^^^^^^^^^^^^^^ F401
24 | from shared.src.enums import OrderSide, SignalStrength
   |
   = help: Remove unused import: `shared.src.schemas.StrategySignal`

analyzer\src\multiproc_manager.py:24:30: F401 [*] `shared.src.enums.OrderSide` imported but unused
   |
22 | from shared.src.config import SYMBOLS
23 | from shared.src.schemas import StrategySignal
24 | from shared.src.enums import OrderSide, SignalStrength
   |                              ^^^^^^^^^ F401
25 |
26 | from analyzer.src.strategy_loader import StrategyLoader, get_strategy_loader
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:24:41: F401 [*] `shared.src.enums.SignalStrength` imported but unused
   |
22 | from shared.src.config import SYMBOLS
23 | from shared.src.schemas import StrategySignal
24 | from shared.src.enums import OrderSide, SignalStrength
   |                                         ^^^^^^^^^^^^^^ F401
25 |
26 | from analyzer.src.strategy_loader import StrategyLoader, get_strategy_loader
   |
   = help: Remove unused import

analyzer\src\multiproc_manager.py:26:42: F401 [*] `analyzer.src.strategy_loader.StrategyLoader` imported but unused
   |
24 | from shared.src.enums import OrderSide, SignalStrength
25 |
26 | from analyzer.src.strategy_loader import StrategyLoader, get_strategy_loader
   |                                          ^^^^^^^^^^^^^^ F401
27 | from analyzer.src.redis_subscriber import RedisSubscriber
   |
   = help: Remove unused import: `analyzer.src.strategy_loader.StrategyLoader`

analyzer\src\redis_subscriber.py:10:47: F401 [*] `typing.Optional` imported but unused
   |
 8 | import threading
 9 | import time
10 | from typing import Dict, Any, Callable, List, Optional
   |                                               ^^^^^^^^ F401
11 | import queue
   |
   = help: Remove unused import: `typing.Optional`

analyzer\src\redis_subscriber.py:18:31: F401 [*] `shared.src.config.REDIS_HOST` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, REDIS_DB, CHANNEL_PREFIX, SYMBOLS
   |                               ^^^^^^^^^^ F401
19 | from shared.src.redis_client import RedisClient
20 | from shared.src.kafka_client import KafkaClient
   |
   = help: Remove unused import

analyzer\src\redis_subscriber.py:18:43: F401 [*] `shared.src.config.REDIS_PORT` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, REDIS_DB, CHANNEL_PREFIX, SYMBOLS
   |                                           ^^^^^^^^^^ F401
19 | from shared.src.redis_client import RedisClient
20 | from shared.src.kafka_client import KafkaClient
   |
   = help: Remove unused import

analyzer\src\redis_subscriber.py:18:55: F401 [*] `shared.src.config.REDIS_PASSWORD` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, REDIS_DB, CHANNEL_PREFIX, SYMBOLS
   |                                                       ^^^^^^^^^^^^^^ F401
19 | from shared.src.redis_client import RedisClient
20 | from shared.src.kafka_client import KafkaClient
   |
   = help: Remove unused import

analyzer\src\redis_subscriber.py:18:71: F401 [*] `shared.src.config.REDIS_DB` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, REDIS_DB, CHANNEL_PREFIX, SYMBOLS
   |                                                                       ^^^^^^^^ F401
19 | from shared.src.redis_client import RedisClient
20 | from shared.src.kafka_client import KafkaClient
   |
   = help: Remove unused import

analyzer\src\redis_subscriber.py:22:41: F401 [*] `analyzer.src.bar_aggregator.BarAggregator` imported but unused
   |
20 | from shared.src.kafka_client import KafkaClient
21 | from shared.src.schemas import StrategySignal
22 | from analyzer.src.bar_aggregator import BarAggregator
   |                                         ^^^^^^^^^^^^^ F401
23 |
24 | # Configuration du logging
   |
   = help: Remove unused import: `analyzer.src.bar_aggregator.BarAggregator`

analyzer\src\signal_scorer.py:7:8: F401 [*] `json` imported but unused
  |
5 | import logging
6 | import time
7 | import json
  |        ^^^^ F401
8 | from typing import Dict, List, Optional, Any, Tuple
9 | from collections import defaultdict, deque
  |
  = help: Remove unused import: `json`

analyzer\src\signal_scorer.py:8:26: F401 [*] `typing.List` imported but unused
   |
 6 | import time
 7 | import json
 8 | from typing import Dict, List, Optional, Any, Tuple
   |                          ^^^^ F401
 9 | from collections import defaultdict, deque
10 | from dataclasses import dataclass
   |
   = help: Remove unused import

analyzer\src\signal_scorer.py:8:32: F401 [*] `typing.Optional` imported but unused
   |
 6 | import time
 7 | import json
 8 | from typing import Dict, List, Optional, Any, Tuple
   |                                ^^^^^^^^ F401
 9 | from collections import defaultdict, deque
10 | from dataclasses import dataclass
   |
   = help: Remove unused import

analyzer\src\signal_scorer.py:8:42: F401 [*] `typing.Any` imported but unused
   |
 6 | import time
 7 | import json
 8 | from typing import Dict, List, Optional, Any, Tuple
   |                                          ^^^ F401
 9 | from collections import defaultdict, deque
10 | from dataclasses import dataclass
   |
   = help: Remove unused import

analyzer\src\signal_scorer.py:8:47: F401 [*] `typing.Tuple` imported but unused
   |
 6 | import time
 7 | import json
 8 | from typing import Dict, List, Optional, Any, Tuple
   |                                               ^^^^^ F401
 9 | from collections import defaultdict, deque
10 | from dataclasses import dataclass
   |
   = help: Remove unused import

analyzer\src\signal_scorer.py:12:17: F401 [*] `numpy` imported but unused
   |
10 | from dataclasses import dataclass
11 | from enum import Enum
12 | import numpy as np
   |                 ^^ F401
13 |
14 | # Imports partagés
   |
   = help: Remove unused import: `numpy`

analyzer\src\signal_scorer.py:238:13: F841 Local variable `metadata` is assigned to but never used
    |
236 |         try:
237 |             score = 0
238 |             metadata = signal.metadata or {}
    |             ^^^^^^^^ F841
239 |             
240 |             if market_data and 'orderbook_sentiment' in market_data:
    |
    = help: Remove assignment to unused variable `metadata`

analyzer\src\signal_scorer.py:344:13: F841 Local variable `metadata` is assigned to but never used
    |
342 |         try:
343 |             score = 0
344 |             metadata = signal.metadata or {}
    |             ^^^^^^^^ F841
345 |             
346 |             # Score basé sur l'heure de trading
    |
    = help: Remove assignment to unused variable `metadata`

analyzer\src\strategy_loader.py:10:37: F401 [*] `typing.Type` imported but unused
   |
 8 | import sys
 9 | import inspect
10 | from typing import Dict, List, Any, Type, Optional
   |                                     ^^^^ F401
11 | import time
   |
   = help: Remove unused import

analyzer\src\strategy_loader.py:10:43: F401 [*] `typing.Optional` imported but unused
   |
 8 | import sys
 9 | import inspect
10 | from typing import Dict, List, Any, Type, Optional
   |                                           ^^^^^^^^ F401
11 | import time
   |
   = help: Remove unused import

analyzer\src\strategy_loader.py:11:8: F401 [*] `time` imported but unused
   |
 9 | import inspect
10 | from typing import Dict, List, Any, Type, Optional
11 | import time
   |        ^^^^ F401
12 |
13 | # Ajouter le répertoire parent au path pour les imports
   |
   = help: Remove unused import: `time`

analyzer\strategies\base_strategy.py:8:41: F401 [*] `typing.List` imported but unused
  |
6 | from abc import ABC, abstractmethod
7 | from datetime import datetime
8 | from typing import Dict, Any, Optional, List, Deque
  |                                         ^^^^ F401
9 | from collections import deque
  |
  = help: Remove unused import

analyzer\strategies\base_strategy.py:8:47: F401 [*] `typing.Deque` imported but unused
  |
6 | from abc import ABC, abstractmethod
7 | from datetime import datetime
8 | from typing import Dict, Any, Optional, List, Deque
  |                                               ^^^^^ F401
9 | from collections import deque
  |
  = help: Remove unused import

analyzer\strategies\base_strategy.py:20:48: F401 [*] `shared.src.schemas.MarketData` imported but unused
   |
19 | from shared.src.enums import OrderSide, SignalStrength
20 | from shared.src.schemas import StrategySignal, MarketData
   |                                                ^^^^^^^^^^ F401
21 |
22 | # Configuration du logging
   |
   = help: Remove unused import: `shared.src.schemas.MarketData`

analyzer\strategies\base_strategy.py:309:13: F841 Local variable `current_price` is assigned to but never used
    |
307 |             ema_50 = ema(prices, 50)
308 |             
309 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
310 |             trend_21 = ema_21[-1]
311 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\bollinger.py:6:22: F401 [*] `datetime.datetime` imported but unused
  |
4 | """
5 | import logging
6 | from datetime import datetime
  |                      ^^^^^^^^ F401
7 | from typing import Dict, Any, Optional, List
8 | import numpy as np
  |
  = help: Remove unused import: `datetime.datetime`

analyzer\strategies\bollinger.py:7:41: F401 [*] `typing.List` imported but unused
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Dict, Any, Optional, List
  |                                         ^^^^ F401
8 | import numpy as np
9 | import pandas as pd
  |
  = help: Remove unused import: `typing.List`

analyzer\strategies\bollinger.py:150:9: F841 Local variable `highs` is assigned to but never used
    |
148 |         # Extraire les données nécessaires
149 |         prices = df['close'].values
150 |         highs = df['high'].values
    |         ^^^^^ F841
151 |         lows = df['low'].values
152 |         volumes = df['volume'].values if 'volume' in df.columns else None
    |
    = help: Remove assignment to unused variable `highs`

analyzer\strategies\bollinger.py:151:9: F841 Local variable `lows` is assigned to but never used
    |
149 |         prices = df['close'].values
150 |         highs = df['high'].values
151 |         lows = df['low'].values
    |         ^^^^ F841
152 |         volumes = df['volume'].values if 'volume' in df.columns else None
    |
    = help: Remove assignment to unused variable `lows`

analyzer\strategies\bollinger.py:243:9: F841 Local variable `prev_price` is assigned to but never used
    |
241 |         """
242 |         current_price = prices[-1]
243 |         prev_price = prices[-2] if len(prices) > 1 else current_price
    |         ^^^^^^^^^^ F841
244 |         current_upper = upper[-1]
245 |         current_lower = lower[-1]
    |
    = help: Remove assignment to unused variable `prev_price`

analyzer\strategies\bollinger.py:246:9: F841 Local variable `current_middle` is assigned to but never used
    |
244 |         current_upper = upper[-1]
245 |         current_lower = lower[-1]
246 |         current_middle = middle[-1]
    |         ^^^^^^^^^^^^^^ F841
247 |         
248 |         # NOUVEAU: Validation de tendance avant de générer le signal
    |
    = help: Remove assignment to unused variable `current_middle`

analyzer\strategies\bollinger.py:605:13: F841 Local variable `current_price` is assigned to but never used
    |
603 |                 return None
604 |             
605 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
606 |             trend_21 = ema_21[-1]
607 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\breakout.py:16:31: F401 [*] `shared.src.config.get_strategy_param` imported but unused
   |
14 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))
15 |
16 | from shared.src.config import get_strategy_param
   |                               ^^^^^^^^^^^^^^^^^^ F401
17 | from shared.src.enums import OrderSide
18 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import: `shared.src.config.get_strategy_param`

analyzer\strategies\breakout.py:194:21: F841 Local variable `risk_reward` is assigned to but never used
    |
193 |                     # Pour les breakouts, utiliser un ratio risque/récompense plus conservateur
194 |                     risk_reward = 1.2 if range_height / support * 100 < 2 else 1.5
    |                     ^^^^^^^^^^^ F841
195 |                     
196 |                     # Calculer le stop basé sur l'ATR et le support cassé
    |
    = help: Remove assignment to unused variable `risk_reward`

analyzer\strategies\breakout.py:388:9: E722 Do not use bare `except`
    |
387 |             return None
388 |         except:
    |         ^^^^^^ E722
389 |             return None
    |

analyzer\strategies\breakout.py:412:9: E722 Do not use bare `except`
    |
411 |             return min(0.95, score)
412 |         except:
    |         ^^^^^^ E722
413 |             return 0.7
    |

analyzer\strategies\breakout.py:448:13: F841 Local variable `current_price` is assigned to but never used
    |
446 |                 return None
447 |             
448 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
449 |             trend_21 = ema_21[-1]
450 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\breakout.py:469:26: F821 Undefined name `breakout`
    |
468 |         # Calculer la confiance basée sur la durée du range
469 |         range_duration = breakout['range_duration']
    |                          ^^^^^^^^ F821
470 |         
471 |         # Plus le range est long, plus la confiance est grande
    |

analyzer\strategies\breakout.py:475:16: F821 Undefined name `breakout`
    |
474 |         # Récupérer les informations du breakout
475 |         side = breakout['side']
    |                ^^^^^^^^ F821
476 |         price = breakout['price']
    |

analyzer\strategies\breakout.py:476:17: F821 Undefined name `breakout`
    |
474 |         # Récupérer les informations du breakout
475 |         side = breakout['side']
476 |         price = breakout['price']
    |                 ^^^^^^^^ F821
477 |         
478 |         # Créer le signal
    |

analyzer\strategies\breakout.py:480:21: F821 Undefined name `breakout`
    |
478 |         # Créer le signal
479 |         metadata = {
480 |             "type": breakout['type'],
    |                     ^^^^^^^^ F821
481 |             "support": float(breakout['support']),
482 |             "resistance": float(breakout['resistance']),
    |

analyzer\strategies\breakout.py:481:30: F821 Undefined name `breakout`
    |
479 |         metadata = {
480 |             "type": breakout['type'],
481 |             "support": float(breakout['support']),
    |                              ^^^^^^^^ F821
482 |             "resistance": float(breakout['resistance']),
483 |             "range_duration": int(breakout['range_duration']),
    |

analyzer\strategies\breakout.py:482:33: F821 Undefined name `breakout`
    |
480 |             "type": breakout['type'],
481 |             "support": float(breakout['support']),
482 |             "resistance": float(breakout['resistance']),
    |                                 ^^^^^^^^ F821
483 |             "range_duration": int(breakout['range_duration']),
484 |             "stop_price": float(breakout['stop_price'])
    |

analyzer\strategies\breakout.py:483:35: F821 Undefined name `breakout`
    |
481 |             "support": float(breakout['support']),
482 |             "resistance": float(breakout['resistance']),
483 |             "range_duration": int(breakout['range_duration']),
    |                                   ^^^^^^^^ F821
484 |             "stop_price": float(breakout['stop_price'])
485 |         }
    |

analyzer\strategies\breakout.py:484:33: F821 Undefined name `breakout`
    |
482 |             "resistance": float(breakout['resistance']),
483 |             "range_duration": int(breakout['range_duration']),
484 |             "stop_price": float(breakout['stop_price'])
    |                                 ^^^^^^^^ F821
485 |         }
    |

analyzer\strategies\ema_cross.py:6:41: F401 [*] `typing.List` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List
  |                                         ^^^^ F401
7 | import numpy as np
8 | import pandas as pd
  |
  = help: Remove unused import: `typing.List`

analyzer\strategies\ema_cross.py:276:9: F841 Local variable `price_to_long_pct` is assigned to but never used
    |
274 |         # Calculer les distances
275 |         price_to_short_pct = (current_price - current_short) / current_short * 100
276 |         price_to_long_pct = (current_price - current_long) / current_long * 100
    |         ^^^^^^^^^^^^^^^^^ F841
277 |         
278 |         # Setup BUY: Pullback dans tendance haussière ET tendance compatible
    |
    = help: Remove assignment to unused variable `price_to_long_pct`

analyzer\strategies\ema_cross.py:406:13: F841 Local variable `current_price` is assigned to but never used
    |
404 |                 return None
405 |             
406 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
407 |             trend_21 = ema_21[-1]
408 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\macd.py:6:22: F401 [*] `datetime.datetime` imported but unused
  |
4 | """
5 | import logging
6 | from datetime import datetime
  |                      ^^^^^^^^ F401
7 | from typing import Dict, Any, Optional, List, Tuple
  |
  = help: Remove unused import: `datetime.datetime`

analyzer\strategies\macd.py:7:41: F401 [*] `typing.List` imported but unused
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Dict, Any, Optional, List, Tuple
  |                                         ^^^^ F401
8 |
9 | import numpy as np
  |
  = help: Remove unused import: `typing.List`

analyzer\strategies\macd.py:15:48: F401 [*] `shared.src.schemas.MarketData` imported but unused
   |
13 | from analyzer.strategies.advanced_filters_mixin import AdvancedFiltersMixin
14 | from shared.src.enums import OrderSide, SignalStrength
15 | from shared.src.schemas import StrategySignal, MarketData
   |                                                ^^^^^^^^^^ F401
16 | from shared.src.config import STRATEGY_PARAMS
   |
   = help: Remove unused import: `shared.src.schemas.MarketData`

analyzer\strategies\macd.py:660:13: F841 Local variable `current_price` is assigned to but never used
    |
658 |             ema_50 = prices.ewm(span=50).mean()
659 |             
660 |             current_price = prices.iloc[-1]
    |             ^^^^^^^^^^^^^ F841
661 |             trend_21 = ema_21.iloc[-1]
662 |             trend_50 = ema_50.iloc[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\reversal_divergence.py:16:31: F401 [*] `shared.src.config.get_strategy_param` imported but unused
   |
14 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))
15 |
16 | from shared.src.config import get_strategy_param
   |                               ^^^^^^^^^^^^^^^^^^ F401
17 | from shared.src.enums import OrderSide
18 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import: `shared.src.config.get_strategy_param`

analyzer\strategies\reversal_divergence.py:159:13: F841 Local variable `last_rsi_low_idx` is assigned to but never used
    |
157 |             # Prendre les deux derniers pivots bas
158 |             last_price_low_idx, prev_price_low_idx = price_lows[-1], price_lows[-2]
159 |             last_rsi_low_idx, prev_rsi_low_idx = rsi_lows[-1], rsi_lows[-2]
    |             ^^^^^^^^^^^^^^^^ F841
160 |             
161 |             last_price_low = df.iloc[last_price_low_idx]['close']
    |
    = help: Remove assignment to unused variable `last_rsi_low_idx`

analyzer\strategies\reversal_divergence.py:159:31: F841 Local variable `prev_rsi_low_idx` is assigned to but never used
    |
157 |             # Prendre les deux derniers pivots bas
158 |             last_price_low_idx, prev_price_low_idx = price_lows[-1], price_lows[-2]
159 |             last_rsi_low_idx, prev_rsi_low_idx = rsi_lows[-1], rsi_lows[-2]
    |                               ^^^^^^^^^^^^^^^^ F841
160 |             
161 |             last_price_low = df.iloc[last_price_low_idx]['close']
    |
    = help: Remove assignment to unused variable `prev_rsi_low_idx`

analyzer\strategies\reversal_divergence.py:217:13: F841 Local variable `last_rsi_high_idx` is assigned to but never used
    |
215 |             # Prendre les deux derniers pivots hauts
216 |             last_price_high_idx, prev_price_high_idx = price_highs[-1], price_highs[-2]
217 |             last_rsi_high_idx, prev_rsi_high_idx = rsi_highs[-1], rsi_highs[-2]
    |             ^^^^^^^^^^^^^^^^^ F841
218 |             
219 |             last_price_high = df.iloc[last_price_high_idx]['close']
    |
    = help: Remove assignment to unused variable `last_rsi_high_idx`

analyzer\strategies\reversal_divergence.py:217:32: F841 Local variable `prev_rsi_high_idx` is assigned to but never used
    |
215 |             # Prendre les deux derniers pivots hauts
216 |             last_price_high_idx, prev_price_high_idx = price_highs[-1], price_highs[-2]
217 |             last_rsi_high_idx, prev_rsi_high_idx = rsi_highs[-1], rsi_highs[-2]
    |                                ^^^^^^^^^^^^^^^^^ F841
218 |             
219 |             last_price_high = df.iloc[last_price_high_idx]['close']
    |
    = help: Remove assignment to unused variable `prev_rsi_high_idx`

analyzer\strategies\reversal_divergence.py:331:13: F841 Local variable `current_price` is assigned to but never used
    |
329 |                 return None
330 |             
331 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
332 |             trend_21 = ema_21[-1]
333 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\ride_or_react.py:6:41: F401 [*] `typing.List` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List, Tuple
  |                                         ^^^^ F401
7 | from datetime import datetime, timedelta
8 | import numpy as np
  |
  = help: Remove unused import: `typing.List`

analyzer\strategies\ride_or_react.py:9:18: F401 [*] `pandas` imported but unused
   |
 7 | from datetime import datetime, timedelta
 8 | import numpy as np
 9 | import pandas as pd
   |                  ^^ F401
10 |
11 | # Importer les modules partagés
   |
   = help: Remove unused import: `pandas`

analyzer\strategies\ride_or_react.py:17:41: F401 [*] `shared.src.enums.SignalStrength` imported but unused
   |
16 | from shared.src.config import get_strategy_param
17 | from shared.src.enums import OrderSide, SignalStrength
   |                                         ^^^^^^^^^^^^^^ F401
18 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import: `shared.src.enums.SignalStrength`

analyzer\strategies\ride_or_react.py:318:29: F541 [*] f-string without any placeholders
    |
317 |             if is_uptrend and signal.side == OrderSide.SELL:
318 |                 logger.info(f"🔍 [Ride or React] Filtrage d'un signal SELL en mode RIDE (tendance haussière)")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
319 |                 return True
    |
    = help: Remove extraneous `f` prefix

analyzer\strategies\ride_or_react.py:323:29: F541 [*] f-string without any placeholders
    |
321 |             # Si le marché est en forte baisse et le signal est BUY, filtrer
322 |             if not is_uptrend and signal.side == OrderSide.BUY:
323 |                 logger.info(f"🔍 [Ride or React] Filtrage d'un signal BUY en mode RIDE (tendance baissière)")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
324 |                 return True
    |
    = help: Remove extraneous `f` prefix

analyzer\strategies\ride_or_react.py:373:13: F841 Local variable `current_price` is assigned to but never used
    |
371 |             ema_50 = ema(prices, 50)
372 |             
373 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
374 |             trend_21 = ema_21[-1]
375 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\rsi.py:6:22: F401 [*] `datetime.datetime` imported but unused
  |
4 | """
5 | import logging
6 | from datetime import datetime
  |                      ^^^^^^^^ F401
7 | from typing import Dict, Any, Optional, List
8 | import numpy as np
  |
  = help: Remove unused import: `datetime.datetime`

analyzer\strategies\rsi.py:7:41: F401 [*] `typing.List` imported but unused
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Dict, Any, Optional, List
  |                                         ^^^^ F401
8 | import numpy as np
9 | import pandas as pd
  |
  = help: Remove unused import: `typing.List`

analyzer\strategies\rsi.py:159:9: F841 Local variable `highs` is assigned to but never used
    |
157 |         # Extraire les données nécessaires
158 |         prices = df['close'].values
159 |         highs = df['high'].values
    |         ^^^^^ F841
160 |         lows = df['low'].values
161 |         volumes = df['volume'].values if 'volume' in df.columns else None
    |
    = help: Remove assignment to unused variable `highs`

analyzer\strategies\rsi.py:160:9: F841 Local variable `lows` is assigned to but never used
    |
158 |         prices = df['close'].values
159 |         highs = df['high'].values
160 |         lows = df['low'].values
    |         ^^^^ F841
161 |         volumes = df['volume'].values if 'volume' in df.columns else None
    |
    = help: Remove assignment to unused variable `lows`

analyzer\strategies\rsi.py:253:9: F841 Local variable `prev_rsi` is assigned to but never used
    |
251 |             return None
252 |         
253 |         prev_rsi = rsi_values[-2]
    |         ^^^^^^^^ F841
254 |         
255 |         # NOUVEAU: Validation de tendance avant de générer le signal
    |
    = help: Remove assignment to unused variable `prev_rsi`

analyzer\strategies\rsi.py:617:13: F841 Local variable `current_price` is assigned to but never used
    |
615 |                 return None
616 |             
617 |             current_price = prices[-1]
    |             ^^^^^^^^^^^^^ F841
618 |             trend_21 = ema_21[-1]
619 |             trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\strategy_upgrader.py:6:30: F401 [*] `typing.Dict` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Optional, Dict, Any
  |                              ^^^^ F401
7 | import numpy as np
8 | import pandas as pd
  |
  = help: Remove unused import

analyzer\strategies\strategy_upgrader.py:6:36: F401 [*] `typing.Any` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Optional, Dict, Any
  |                                    ^^^ F401
7 | import numpy as np
8 | import pandas as pd
  |
  = help: Remove unused import

analyzer\strategies\strategy_upgrader.py:186:9: F841 Local variable `current_price` is assigned to but never used
    |
184 |         ema_50 = ema(prices, 50)
185 |         
186 |         current_price = prices[-1]
    |         ^^^^^^^^^^^^^ F841
187 |         trend_21 = ema_21[-1]
188 |         trend_50 = ema_50[-1]
    |
    = help: Remove assignment to unused variable `current_price`

analyzer\strategies\ultra_confluence.py:6:26: F401 [*] `typing.List` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Dict, List, Optional, Any, Tuple
  |                          ^^^^ F401
7 | from collections import deque, defaultdict
8 | import time
  |
  = help: Remove unused import

analyzer\strategies\ultra_confluence.py:6:47: F401 [*] `typing.Tuple` imported but unused
  |
4 | """
5 | import logging
6 | from typing import Dict, List, Optional, Any, Tuple
  |                                               ^^^^^ F401
7 | from collections import deque, defaultdict
8 | import time
  |
  = help: Remove unused import

coordinator\src\allocation_manager.py:7:38: F401 [*] `typing.Optional` imported but unused
  |
5 | import logging
6 | import os
7 | from typing import Dict, Any, Tuple, Optional
  |                                      ^^^^^^^^ F401
8 | from shared.src.schemas import StrategySignal
9 | from shared.src.enums import SignalStrength, OrderSide
  |
  = help: Remove unused import: `typing.Optional`

coordinator\src\cycle_sync_monitor.py:8:26: F401 [*] `typing.List` imported but unused
   |
 6 | import threading
 7 | import time
 8 | from typing import Dict, List, Optional
   |                          ^^^^ F401
 9 | import requests
10 | from urllib.parse import urljoin
   |
   = help: Remove unused import

coordinator\src\cycle_sync_monitor.py:8:32: F401 [*] `typing.Optional` imported but unused
   |
 6 | import threading
 7 | import time
 8 | from typing import Dict, List, Optional
   |                                ^^^^^^^^ F401
 9 | import requests
10 | from urllib.parse import urljoin
   |
   = help: Remove unused import

coordinator\src\cycle_sync_monitor.py:100:32: F541 [*] f-string without any placeholders
    |
 98 |             result = response.json()
 99 |             if not result.get('success'):
100 |                 logger.warning(f"Réponse invalide de l'API cycles")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
101 |                 return
    |
    = help: Remove extraneous `f` prefix

coordinator\src\main.py:11:8: F401 [*] `json` imported but unused
   |
 9 | import os
10 | import threading
11 | import json
   |        ^^^^ F401
12 | from typing import Dict, Any
13 | from flask import Flask, jsonify, request
   |
   = help: Remove unused import: `json`

coordinator\src\main.py:12:20: F401 [*] `typing.Dict` imported but unused
   |
10 | import threading
11 | import json
12 | from typing import Dict, Any
   |                    ^^^^ F401
13 | from flask import Flask, jsonify, request
14 | import requests
   |
   = help: Remove unused import

coordinator\src\main.py:12:26: F401 [*] `typing.Any` imported but unused
   |
10 | import threading
11 | import json
12 | from typing import Dict, Any
   |                          ^^^ F401
13 | from flask import Flask, jsonify, request
14 | import requests
   |
   = help: Remove unused import

coordinator\src\main.py:13:35: F401 [*] `flask.request` imported but unused
   |
11 | import json
12 | from typing import Dict, Any
13 | from flask import Flask, jsonify, request
   |                                   ^^^^^^^ F401
14 | import requests
15 | from urllib.parse import urljoin
   |
   = help: Remove unused import: `flask.request`

coordinator\src\main.py:21:48: F401 [*] `coordinator.src.cycle_sync_monitor.CycleSyncMonitor` imported but unused
   |
20 | from coordinator.src.signal_handler_refactored import SignalHandler
21 | from coordinator.src.cycle_sync_monitor import CycleSyncMonitor
   |                                                ^^^^^^^^^^^^^^^^ F401
22 |
23 | # Configuration du logging
   |
   = help: Remove unused import: `coordinator.src.cycle_sync_monitor.CycleSyncMonitor`

coordinator\src\main.py:63:21: F541 [*] f-string without any placeholders
   |
61 |         self.setup_routes()
62 |         
63 |         logger.info(f"✅ CoordinatorService initialisé")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
64 |     
65 |     def setup_routes(self):
   |
   = help: Remove extraneous `f` prefix

coordinator\src\main.py:293:9: F841 Local variable `last_reallocation` is assigned to but never used
    |
291 |         # Compteurs pour les vérifications périodiques
292 |         last_health_check = 0
293 |         last_reallocation = 0
    |         ^^^^^^^^^^^^^^^^^ F841
294 |         last_sync_check = 0
    |
    = help: Remove assignment to unused variable `last_reallocation`

coordinator\src\main.py:294:9: F841 Local variable `last_sync_check` is assigned to but never used
    |
292 |         last_health_check = 0
293 |         last_reallocation = 0
294 |         last_sync_check = 0
    |         ^^^^^^^^^^^^^^^ F841
295 |         
296 |         # Boucle principale pour garder le service actif
    |
    = help: Remove assignment to unused variable `last_sync_check`

coordinator\src\main.py:344:21: F841 Local variable `cycle_id` is assigned to but never used
    |
342 |                 """
343 |                 try:
344 |                     cycle_id = data.get("cycle_id")                    
    |                     ^^^^^^^^ F841
345 |                     symbol = data.get("symbol", "")
346 |                     status = data.get("status", "")                                                
    |
    = help: Remove assignment to unused variable `cycle_id`

coordinator\src\main.py:345:21: F841 Local variable `symbol` is assigned to but never used
    |
343 |                 try:
344 |                     cycle_id = data.get("cycle_id")                    
345 |                     symbol = data.get("symbol", "")
    |                     ^^^^^^ F841
346 |                     status = data.get("status", "")                                                
347 |                 except Exception as e:
    |
    = help: Remove assignment to unused variable `symbol`

coordinator\src\main.py:346:21: F841 Local variable `status` is assigned to but never used
    |
344 |                     cycle_id = data.get("cycle_id")                    
345 |                     symbol = data.get("symbol", "")
346 |                     status = data.get("status", "")                                                
    |                     ^^^^^^ F841
347 |                 except Exception as e:
348 |                     logger.error(f"Erreur lors du traitement du cycle créé: {str(e)}")
    |
    = help: Remove assignment to unused variable `status`

coordinator\src\market_filter.py:8:22: F401 [*] `datetime.datetime` imported but unused
   |
 6 | import time
 7 | from typing import Dict, Any, Optional
 8 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
 9 |
10 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import

coordinator\src\market_filter.py:8:32: F401 [*] `datetime.timedelta` imported but unused
   |
 6 | import time
 7 | from typing import Dict, Any, Optional
 8 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
 9 |
10 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import

coordinator\src\signal_handler_refactored.py:6:8: F401 [*] `json` imported but unused
  |
4 | """
5 | import logging
6 | import json
  |        ^^^^ F401
7 | import threading
8 | import time
  |
  = help: Remove unused import: `json`

coordinator\src\signal_handler_refactored.py:9:8: F401 [*] `uuid` imported but unused
   |
 7 | import threading
 8 | import time
 9 | import uuid
   |        ^^^^ F401
10 | from typing import Dict, Any, Optional, List
11 | import queue
   |
   = help: Remove unused import: `uuid`

coordinator\src\signal_handler_refactored.py:10:41: F401 [*] `typing.List` imported but unused
   |
 8 | import time
 9 | import uuid
10 | from typing import Dict, Any, Optional, List
   |                                         ^^^^ F401
11 | import queue
   |
   = help: Remove unused import: `typing.List`

coordinator\src\signal_handler_refactored.py:20:30: F401 [*] `shared.src.enums.OrderSide` imported but unused
   |
18 | from shared.src.redis_client import RedisClient
19 | from shared.src.config import TRADING_MODE
20 | from shared.src.enums import OrderSide, SignalStrength, CycleStatus
   |                              ^^^^^^^^^ F401
21 | from shared.src.schemas import StrategySignal, TradeOrder
   |
   = help: Remove unused import

coordinator\src\signal_handler_refactored.py:20:41: F401 [*] `shared.src.enums.SignalStrength` imported but unused
   |
18 | from shared.src.redis_client import RedisClient
19 | from shared.src.config import TRADING_MODE
20 | from shared.src.enums import OrderSide, SignalStrength, CycleStatus
   |                                         ^^^^^^^^^^^^^^ F401
21 | from shared.src.schemas import StrategySignal, TradeOrder
   |
   = help: Remove unused import

coordinator\src\signal_handler_refactored.py:20:57: F401 [*] `shared.src.enums.CycleStatus` imported but unused
   |
18 | from shared.src.redis_client import RedisClient
19 | from shared.src.config import TRADING_MODE
20 | from shared.src.enums import OrderSide, SignalStrength, CycleStatus
   |                                                         ^^^^^^^^^^^ F401
21 | from shared.src.schemas import StrategySignal, TradeOrder
   |
   = help: Remove unused import

coordinator\src\signal_handler_refactored.py:21:48: F401 [*] `shared.src.schemas.TradeOrder` imported but unused
   |
19 | from shared.src.config import TRADING_MODE
20 | from shared.src.enums import OrderSide, SignalStrength, CycleStatus
21 | from shared.src.schemas import StrategySignal, TradeOrder
   |                                                ^^^^^^^^^^ F401
22 |
23 | # Importer les nouveaux modules
   |
   = help: Remove unused import: `shared.src.schemas.TradeOrder`

coordinator\src\signal_processor.py:7:37: F401 [*] `typing.Optional` imported but unused
  |
5 | import logging
6 | import time
7 | from typing import Dict, Any, List, Optional, Tuple
  |                                     ^^^^^^^^ F401
8 | from collections import deque, defaultdict
9 | from datetime import datetime
  |
  = help: Remove unused import: `typing.Optional`

coordinator\src\signal_processor.py:9:22: F401 [*] `datetime.datetime` imported but unused
   |
 7 | from typing import Dict, Any, List, Optional, Tuple
 8 | from collections import deque, defaultdict
 9 | from datetime import datetime
   |                      ^^^^^^^^ F401
10 |
11 | from shared.src.schemas import StrategySignal
   |
   = help: Remove unused import: `datetime.datetime`

coordinator\src\signal_processor.py:80:13: E722 Do not use bare `except`
   |
78 |                 from datetime import datetime
79 |                 signal_time = datetime.fromisoformat(str(signal.timestamp).replace('Z', '+00:00')).timestamp()
80 |             except:
   |             ^^^^^^ E722
81 |                 # Si on ne peut pas parser, ignorer la vérification d'expiration
82 |                 signal_time = current_time
   |

coordinator\src\signal_processor.py:260:9: F841 Local variable `opposite_position` is assigned to but never used
    |
259 |         signal_position = signal.side.value if hasattr(signal.side, 'value') else str(signal.side)
260 |         opposite_position = "SELL" if signal_position == "BUY" else "BUY"
    |         ^^^^^^^^^^^^^^^^^ F841
261 |         
262 |         for cycle in active_cycles:
    |
    = help: Remove assignment to unused variable `opposite_position`

coordinator\src\signal_processor.py:440:17: F841 Local variable `close_data` is assigned to but never used
    |
438 | …     try:
439 | …         # Préparer les données de fermeture
440 | …         close_data = {
    |           ^^^^^^^^^^ F841
441 | …             "reason": f"Fermeture pour retournement - Signal {signal.strategy} force {self._calculate_signal_strength_score(signal)…
442 | …             "price": signal.price  # Fermer au prix du signal
    |
    = help: Remove assignment to unused variable `close_data`

coordinator\src\smart_cycle_manager.py:109:9: F841 Local variable `symbol_side` is assigned to but never used
    |
107 |         # Gérer le cas où signal.side peut être une chaîne ou un enum
108 |         side_str = signal.side.value if hasattr(signal.side, 'value') else str(signal.side)
109 |         symbol_side = f"{signal.symbol}_{side_str}"
    |         ^^^^^^^^^^^ F841
110 |         
111 |         # Calculer la confiance globale du signal
    |
    = help: Remove assignment to unused variable `symbol_side`

coordinator\src\smart_cycle_manager.py:168:13: E722 Do not use bare `except`
    |
166 |                 from datetime import datetime
167 |                 signal_time = datetime.fromisoformat(str(signal.timestamp).replace('Z', '+00:00')).timestamp()
168 |             except:
    |             ^^^^^^ E722
169 |                 signal_time = current_time
    |

db_analysis.py:9:22: F401 [*] `datetime.datetime` imported but unused
   |
 7 | import psycopg2
 8 | from psycopg2.extras import RealDictCursor
 9 | from datetime import datetime
   |                      ^^^^^^^^ F401
10 | from decimal import Decimal
11 | from dotenv import load_dotenv
   |
   = help: Remove unused import: `datetime.datetime`

db_analysis.py:12:8: F401 [*] `json` imported but unused
   |
10 | from decimal import Decimal
11 | from dotenv import load_dotenv
12 | import json
   |        ^^^^ F401
13 |
14 | # Charger les variables d'environnement
   |
   = help: Remove unused import: `json`

dispatcher\src\message_router.py:6:8: F401 [*] `json` imported but unused
  |
4 | """
5 | import logging
6 | import json
  |        ^^^^ F401
7 | import time
8 | import threading
  |
  = help: Remove unused import: `json`

dispatcher\src\message_router.py:542:9: E722 Do not use bare `except`
    |
540 | …             if queue_size > 0 or high_priority_size > 0:
541 | …                 logger.warning(f"⚠️ Messages non traités lors de la fermeture: {queue_size} normaux, {high_priority_size} haute pri…r
542 | …     except:
    |       ^^^^^^ E722
543 | …         pass
    |

gateway\src\binance_ws.py:8:31: F401 [*] `typing.Callable` imported but unused
   |
 6 | import logging
 7 | import time
 8 | from typing import Dict, Any, Callable, List, Optional, Tuple
   |                               ^^^^^^^^ F401
 9 | import asyncio
10 | import websockets
   |
   = help: Remove unused import: `typing.Callable`

gateway\src\binance_ws.py:18:31: F401 [*] `shared.src.config.BINANCE_API_KEY` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY, SYMBOLS, INTERVAL, KAFKA_TOPIC_MARKET_DATA
   |                               ^^^^^^^^^^^^^^^ F401
19 | from shared.src.kafka_client import KafkaClient
20 | from gateway.src.kafka_producer import get_producer   # NEW
   |
   = help: Remove unused import

gateway\src\binance_ws.py:18:48: F401 [*] `shared.src.config.BINANCE_SECRET_KEY` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY, SYMBOLS, INTERVAL, KAFKA_TOPIC_MARKET_DATA
   |                                                ^^^^^^^^^^^^^^^^^^ F401
19 | from shared.src.kafka_client import KafkaClient
20 | from gateway.src.kafka_producer import get_producer   # NEW
   |
   = help: Remove unused import

gateway\src\binance_ws.py:18:87: F401 [*] `shared.src.config.KAFKA_TOPIC_MARKET_DATA` imported but unused
   |
16 | sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
17 |
18 | from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY, SYMBOLS, INTERVAL, KAFKA_TOPIC_MARKET_DATA
   |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^ F401
19 | from shared.src.kafka_client import KafkaClient
20 | from gateway.src.kafka_producer import get_producer   # NEW
   |
   = help: Remove unused import

gateway\src\binance_ws.py:273:9: F841 Local variable `high_price` is assigned to but never used
    |
271 |         timeframe = candle_data['timeframe']
272 |         close_price = candle_data['close']
273 |         high_price = candle_data['high']
    |         ^^^^^^^^^^ F841
274 |         low_price = candle_data['low']
275 |         volume = candle_data['volume']
    |
    = help: Remove assignment to unused variable `high_price`

gateway\src\binance_ws.py:274:9: F841 Local variable `low_price` is assigned to but never used
    |
272 |         close_price = candle_data['close']
273 |         high_price = candle_data['high']
274 |         low_price = candle_data['low']
    |         ^^^^^^^^^ F841
275 |         volume = candle_data['volume']
    |
    = help: Remove assignment to unused variable `low_price`

gateway\src\kafka_producer.py:5:8: F401 [*] `json` imported but unused
  |
3 | Convertit les données WebSocket Binance en messages Kafka.
4 | """
5 | import json
  |        ^^^^ F401
6 | import logging
7 | import time
  |
  = help: Remove unused import: `json`

gateway\src\main.py:153:5: F841 Local variable `validation_fetcher` is assigned to but never used
    |
151 |     """
152 |     global ws_client
153 |     validation_fetcher = None
    |     ^^^^^^^^^^^^^^^^^^ F841
154 |     
155 |     # Parser les arguments
    |
    = help: Remove assignment to unused variable `validation_fetcher`

gateway\src\main.py:165:5: F841 Local variable `producer` is assigned to but never used
    |
164 |     # Obtenir le producteur Kafka
165 |     producer = get_producer()
    |     ^^^^^^^^ F841
166 |     
167 |     try:
    |
    = help: Remove assignment to unused variable `producer`

gateway\src\main.py:170:25: F541 [*] f-string without any placeholders
    |
168 |         # Initialiser les données ultra-enrichies au démarrage si demandé
169 |         if not args.skip_init:
170 |             logger.info(f"🔥 Initialisation des données ultra-enrichies multi-timeframes...")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
171 |             
172 |             # Créer l'UltraDataFetcher pour l'initialisation
    |
    = help: Remove extraneous `f` prefix

gateway\src\main.py:178:29: F541 [*] f-string without any placeholders
    |
176 |             try:
177 |                 await init_fetcher._fetch_initialization_data()
178 |                 logger.info(f"✅ Données ultra-enrichies initialisées avec succès")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
179 |             except Exception as e:
180 |                 logger.warning(f"⚠️ Erreur lors de l'initialisation: {e}")
    |
    = help: Remove extraneous `f` prefix

gateway\src\ultra_data_fetcher.py:10:42: F401 [*] `typing.Tuple` imported but unused
   |
 8 | import json
 9 | import time
10 | from typing import Dict, List, Optional, Tuple
   |                                          ^^^^^ F401
11 | import aiohttp
12 | import sys
   |
   = help: Remove unused import: `typing.Tuple`

portfolio\src\api.py:12:67: F401 [*] `fastapi.BackgroundTasks` imported but unused
   |
10 | import json
11 | import time
12 | from fastapi import FastAPI, Query, Path, HTTPException, Depends, BackgroundTasks, Request, Response
   |                                                                   ^^^^^^^^^^^^^^^ F401
13 | from fastapi.middleware.cors import CORSMiddleware
14 | from fastapi.middleware.gzip import GZipMiddleware
   |
   = help: Remove unused import: `fastapi.BackgroundTasks`

portfolio\src\api.py:15:33: F401 [*] `pydantic.Field` imported but unused
   |
13 | from fastapi.middleware.cors import CORSMiddleware
14 | from fastapi.middleware.gzip import GZipMiddleware
15 | from pydantic import BaseModel, Field
   |                                 ^^^^^ F401
16 | from contextlib import asynccontextmanager
17 | import psutil
   |
   = help: Remove unused import: `pydantic.Field`

portfolio\src\api.py:25:35: F401 [*] `portfolio.src.startup.on_startup` imported but unused
   |
24 | from shared.src.schemas import AssetBalance, PortfolioSummary
25 | from portfolio.src.startup import on_startup
   |                                   ^^^^^^^^^^ F401
26 | from portfolio.src.models import PortfolioModel, DBManager, SharedCache
27 | from portfolio.src.binance_account_manager import BinanceAccountManager
   |
   = help: Remove unused import: `portfolio.src.startup.on_startup`

portfolio\src\api.py:27:51: F401 [*] `portfolio.src.binance_account_manager.BinanceAccountManager` imported but unused
   |
25 | from portfolio.src.startup import on_startup
26 | from portfolio.src.models import PortfolioModel, DBManager, SharedCache
27 | from portfolio.src.binance_account_manager import BinanceAccountManager
   |                                                   ^^^^^^^^^^^^^^^^^^^^^ F401
28 |
29 | # Mesure des performances et des ressources
   |
   = help: Remove unused import: `portfolio.src.binance_account_manager.BinanceAccountManager`

portfolio\src\api.py:239:55: F811 [*] Redefinition of unused `BinanceAccountManager` from line 27
    |
237 | async def binance_healthcheck():
238 |     """Health check simple de Binance"""
239 |     from portfolio.src.binance_account_manager import BinanceAccountManager
    |                                                       ^^^^^^^^^^^^^^^^^^^^^ F811
240 |     from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY
    |
    = help: Remove definition: `BinanceAccountManager`

portfolio\src\api.py:697:13: E722 Do not use bare `except`
    |
695 | …         if hasattr(data, "__len__"):
696 | …             data_size += sum(sys.getsizeof(i) for i in data[:10]) * (len(data) / 10) if len(data) > 10 else sum(sys.getsizeof(i) fo…
697 | …     except:
    |       ^^^^^^ E722
698 | …         data_size = 0
    |

portfolio\src\binance_account_manager.py:11:8: F401 [*] `json` imported but unused
   |
 9 | import hashlib
10 | import requests
11 | import json
   |        ^^^^ F401
12 | from typing import Dict, List, Any, Optional, Tuple
13 | import traceback
   |
   = help: Remove unused import: `json`

portfolio\src\binance_account_manager.py:12:47: F401 [*] `typing.Tuple` imported but unused
   |
10 | import requests
11 | import json
12 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^ F401
13 | import traceback
14 | from concurrent.futures import ThreadPoolExecutor
   |
   = help: Remove unused import: `typing.Tuple`

portfolio\src\binance_account_manager.py:15:22: F401 [*] `datetime.datetime` imported but unused
   |
13 | import traceback
14 | from concurrent.futures import ThreadPoolExecutor
15 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
16 | from functools import lru_cache
   |
   = help: Remove unused import

portfolio\src\binance_account_manager.py:15:32: F401 [*] `datetime.timedelta` imported but unused
   |
13 | import traceback
14 | from concurrent.futures import ThreadPoolExecutor
15 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
16 | from functools import lru_cache
   |
   = help: Remove unused import

portfolio\src\binance_account_manager.py:144:17: E722 Do not use bare `except`
    |
142 |                     error_data = e.response.json()
143 |                     error_message = f"{error_message}: {error_data.get('msg', str(error_data))}"
144 |                 except:
    |                 ^^^^^^ E722
145 |                     error_message = f"{error_message}: {e.response.text}"
    |

portfolio\src\models.py:12:21: F401 [*] `decimal.Decimal` imported but unused
   |
10 | from psycopg2 import pool
11 | from psycopg2.extras import RealDictCursor, execute_values
12 | from decimal import Decimal
   |                     ^^^^^^^ F401
13 |
14 | # Importer les modules partagés
   |
   = help: Remove unused import: `decimal.Decimal`

portfolio\src\models.py:133:21: E722 Do not use bare `except`
    |
131 |                     try:
132 |                         self.conn.close()
133 |                     except:
    |                     ^^^^^^ E722
134 |                         pass
135 |             except:
    |

portfolio\src\models.py:135:13: E722 Do not use bare `except`
    |
133 |                     except:
134 |                         pass
135 |             except:
    |             ^^^^^^ E722
136 |                 pass
    |

portfolio\src\models.py:218:25: E722 Do not use bare `except`
    |
216 |                         try:
217 |                             self.conn.close()
218 |                         except:
    |                         ^^^^^^ E722
219 |                             pass
220 |                 except:
    |

portfolio\src\models.py:220:17: E722 Do not use bare `except`
    |
218 |                         except:
219 |                             pass
220 |                 except:
    |                 ^^^^^^ E722
221 |                     pass
    |

portfolio\src\models.py:242:17: E722 Do not use bare `except`
    |
240 |                 try:
241 |                     self.conn.rollback()
242 |                 except:
    |                 ^^^^^^ E722
243 |                     pass
244 |                 return None
    |

portfolio\src\models.py:284:13: E722 Do not use bare `except`
    |
282 |             try:
283 |                 self.conn.rollback()
284 |             except:
    |             ^^^^^^ E722
285 |                 pass
286 |             return False
    |

portfolio\src\models.py:322:17: E722 Do not use bare `except`
    |
320 |                 try:
321 |                     self.conn.rollback()
322 |                 except:
    |                 ^^^^^^ E722
323 |                     pass
324 |                 return False
    |

portfolio\src\redis_subscriber.py:65:9: F841 Local variable `quantity` is assigned to but never used
   |
63 |         entry_price = float(data.get("entry_price", 0.0))
64 |         exit_price = float(data.get("exit_price", 0.0))
65 |         quantity = float(data.get("quantity", 0.0))
   |         ^^^^^^^^ F841
66 |         pnl = float(data.get("pnl", 0.0))
   |
   = help: Remove assignment to unused variable `quantity`

portfolio\src\startup.py:1:8: F401 [*] `asyncio` imported but unused
  |
1 | import asyncio
  |        ^^^^^^^ F401
2 | import logging
  |
  = help: Remove unused import: `asyncio`

shared\src\config.py:6:20: F401 [*] `typing.Dict` imported but unused
  |
4 | """
5 | import os
6 | from typing import Dict, Any, Optional
  |                    ^^^^ F401
7 | from dotenv import load_dotenv
  |
  = help: Remove unused import: `typing.Dict`

shared\src\db_pool.py:10:20: F401 [*] `typing.Optional` imported but unused
   |
 8 | import threading
 9 | import queue
10 | from typing import Optional, Any, Dict, Union, List, Tuple
   |                    ^^^^^^^^ F401
11 | from contextlib import contextmanager
   |
   = help: Remove unused import

shared\src\db_pool.py:10:41: F401 [*] `typing.Union` imported but unused
   |
 8 | import threading
 9 | import queue
10 | from typing import Optional, Any, Dict, Union, List, Tuple
   |                                         ^^^^^ F401
11 | from contextlib import contextmanager
   |
   = help: Remove unused import

shared\src\db_pool.py:10:48: F401 [*] `typing.List` imported but unused
   |
 8 | import threading
 9 | import queue
10 | from typing import Optional, Any, Dict, Union, List, Tuple
   |                                                ^^^^ F401
11 | from contextlib import contextmanager
   |
   = help: Remove unused import

shared\src\db_pool.py:10:54: F401 [*] `typing.Tuple` imported but unused
   |
 8 | import threading
 9 | import queue
10 | from typing import Optional, Any, Dict, Union, List, Tuple
   |                                                      ^^^^^ F401
11 | from contextlib import contextmanager
   |
   = help: Remove unused import

shared\src\db_pool.py:14:22: F401 [*] `psycopg2.pool` imported but unused
   |
13 | import psycopg2
14 | from psycopg2 import pool, extensions, extras
   |                      ^^^^ F401
15 | from psycopg2.extras import RealDictCursor, DictCursor
   |
   = help: Remove unused import: `psycopg2.pool`

shared\src\db_pool.py:153:36: F811 Redefinition of unused `pool` from line 14
    |
151 |     Wrapper autour d'une connexion pour suivre son utilisation.
152 |     """
153 |     def __init__(self, connection, pool):
    |                                    ^^^^ F811
154 |         self.connection = connection
155 |         self.pool = pool
    |
    = help: Remove definition: `pool`

shared\src\db_pool.py:518:40: F541 [*] f-string without any placeholders
    |
516 |                     # Logguer les requêtes lentes si présentes
517 |                     if db_stats['slow_queries']:
518 |                         logger.warning(f"⚠️ Top requêtes lentes: " + 
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
519 |                                       ", ".join([f"{q['type']} ({q['duration']:.3f}s)" for q in db_stats['slow_queries'][:3]]))
    |
    = help: Remove extraneous `f` prefix

shared\src\db_pool.py:570:25: E722 Do not use bare `except`
    |
568 |                             logger.critical(f"Diagnostic: {pool_stats['in_use_connections']}/{pool_stats['total_connections']} "
569 |                                           f"connexions utilisées ({pool_stats['usage_percent']:.1f}%)")
570 |                         except:
    |                         ^^^^^^ E722
571 |                             pass
    |

shared\src\db_pool.py:625:13: E722 Do not use bare `except`
    |
623 |                 if conn and not conn.closed:
624 |                     conn.close()
625 |             except:
    |             ^^^^^^ E722
626 |                 pass
    |

shared\src\db_pool.py:987:5: F811 Redefinition of unused `pool` from line 14
    |
985 |         Dictionnaire des métriques
986 |     """
987 |     pool = DBConnectionPool.get_instance()
    |     ^^^^ F811
988 |     return pool.get_diagnostics()
    |
    = help: Remove definition: `pool`

shared\src\enums.py:4:24: F401 [*] `enum.auto` imported but unused
  |
2 | Définition des énumérations partagées entre les microservices.
3 | """
4 | from enum import Enum, auto
  |                        ^^^^ F401
5 |
6 | class OrderSide(str, Enum):
  |
  = help: Remove unused import: `enum.auto`

shared\src\redis_client.py:7:64: F401 [*] `typing.Tuple` imported but unused
  |
5 | import json
6 | import logging
7 | from typing import Any, Dict, Callable, Optional, List, Union, Tuple
  |                                                                ^^^^^ F401
8 | import threading
9 | import time
  |
  = help: Remove unused import: `typing.Tuple`

shared\src\redis_client.py:13:8: F401 [*] `redis` imported but unused
   |
11 | from queue import Queue, Empty
12 |
13 | import redis
   |        ^^^^^ F401
14 | from redis import Redis, ConnectionPool
15 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |
   = help: Remove unused import: `redis`

shared\src\redis_client.py:15:61: F401 [*] `redis.exceptions.RedisError` imported but unused
   |
13 | import redis
14 | from redis import Redis, ConnectionPool
15 | from redis.exceptions import ConnectionError, TimeoutError, RedisError
   |                                                             ^^^^^^^^^^ F401
16 |
17 | from .config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD, REDIS_DB
   |
   = help: Remove unused import: `redis.exceptions.RedisError`

shared\src\schemas.py:6:47: F401 [*] `typing.Union` imported but unused
  |
4 | """
5 | from datetime import datetime
6 | from typing import Dict, List, Optional, Any, Union
  |                                               ^^^^^ F401
7 | from enum import Enum
  |
  = help: Remove unused import: `typing.Union`

shared\src\schemas.py:7:18: F401 [*] `enum.Enum` imported but unused
  |
5 | from datetime import datetime
6 | from typing import Dict, List, Optional, Any, Union
7 | from enum import Enum
  |                  ^^^^ F401
8 |
9 | from pydantic import BaseModel, Field, validator
  |
  = help: Remove unused import: `enum.Enum`

signal_aggregator\src\bayesian_weights.py:4:17: F401 [*] `numpy` imported but unused
  |
2 | Système de pondération bayésienne adaptative pour les stratégies
3 | """
4 | import numpy as np
  |                 ^^ F401
5 | from typing import Dict, List, Optional
6 | import json
  |
  = help: Remove unused import: `numpy`

signal_aggregator\src\bayesian_weights.py:5:32: F401 [*] `typing.Optional` imported but unused
  |
3 | """
4 | import numpy as np
5 | from typing import Dict, List, Optional
  |                                ^^^^^^^^ F401
6 | import json
7 | import logging
  |
  = help: Remove unused import: `typing.Optional`

signal_aggregator\src\bayesian_weights.py:9:32: F401 [*] `datetime.timedelta` imported but unused
   |
 7 | import logging
 8 | from dataclasses import dataclass, field
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
10 | import math
   |
   = help: Remove unused import: `datetime.timedelta`

signal_aggregator\src\dynamic_thresholds.py:5:20: F401 [*] `typing.List` imported but unused
  |
3 | """
4 | import numpy as np
5 | from typing import List, Dict, Optional, Deque
  |                    ^^^^ F401
6 | from collections import deque
7 | from datetime import datetime, timedelta
  |
  = help: Remove unused import: `typing.List`

signal_aggregator\src\dynamic_thresholds.py:7:32: F401 [*] `datetime.timedelta` imported but unused
  |
5 | from typing import List, Dict, Optional, Deque
6 | from collections import deque
7 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^ F401
8 | import json
9 | import logging
  |
  = help: Remove unused import: `datetime.timedelta`

signal_aggregator\src\enhanced_regime_detector.py:5:26: F401 [*] `typing.Optional` imported but unused
  |
3 | import pandas as pd
4 | import numpy as np
5 | from typing import Dict, Optional, Tuple
  |                          ^^^^^^^^ F401
6 | from datetime import datetime, timedelta
7 | import ta
  |
  = help: Remove unused import: `typing.Optional`

signal_aggregator\src\enhanced_regime_detector.py:6:22: F401 [*] `datetime.datetime` imported but unused
  |
4 | import numpy as np
5 | from typing import Dict, Optional, Tuple
6 | from datetime import datetime, timedelta
  |                      ^^^^^^^^ F401
7 | import ta
8 | import json
  |
  = help: Remove unused import

signal_aggregator\src\enhanced_regime_detector.py:6:32: F401 [*] `datetime.timedelta` imported but unused
  |
4 | import numpy as np
5 | from typing import Dict, Optional, Tuple
6 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^ F401
7 | import ta
8 | import json
  |
  = help: Remove unused import

signal_aggregator\src\enhanced_regime_detector.py:195:9: F841 Local variable `rsi` is assigned to but never used
    |
193 |         minus_di = metrics['minus_di']
194 |         bb_width = metrics['bb_width']
195 |         rsi = metrics['rsi']
    |         ^^^ F841
196 |         roc = metrics['roc']
197 |         trend_angle = metrics['trend_angle']
    |
    = help: Remove assignment to unused variable `rsi`

signal_aggregator\src\enhanced_regime_detector.py:387:13: E722 Do not use bare `except`
    |
385 |                 if cached:
386 |                     return float(cached)
387 |             except:
    |             ^^^^^^ E722
388 |                 pass  # Continue without cache if Redis fails
    |

signal_aggregator\src\enhanced_regime_detector.py:397:13: E722 Do not use bare `except`
    |
395 |             try:
396 |                 await self.redis.set(cache_key, str(danger_level), expiration=60)
397 |             except:
    |             ^^^^^^ E722
398 |                 pass  # Continue without cache if Redis fails
    |

signal_aggregator\src\enhanced_regime_detector.py:457:9: E722 Do not use bare `except`
    |
455 |             recovery_key = f"recovery_period:{symbol}"
456 |             return bool(await self.redis.get(recovery_key))
457 |         except:
    |         ^^^^^^ E722
458 |             return False
    |

signal_aggregator\src\enhanced_regime_detector.py:465:9: E722 Do not use bare `except`
    |
463 |             opportunity_key = f"opportunity_period:{symbol}"
464 |             return bool(await self.redis.get(opportunity_key))
465 |         except:
    |         ^^^^^^ E722
466 |             return False
    |

signal_aggregator\src\main.py:8:20: F401 [*] `typing.Dict` imported but unused
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Optional
  |                    ^^^^ F401
9 | from datetime import datetime, timezone
  |
  = help: Remove unused import

signal_aggregator\src\main.py:8:26: F401 [*] `typing.List` imported but unused
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Optional
  |                          ^^^^ F401
9 | from datetime import datetime, timezone
  |
  = help: Remove unused import

signal_aggregator\src\main.py:8:32: F401 [*] `typing.Optional` imported but unused
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Optional
  |                                ^^^^^^^^ F401
9 | from datetime import datetime, timezone
  |
  = help: Remove unused import

signal_aggregator\src\main.py:9:22: F401 [*] `datetime.datetime` imported but unused
   |
 7 | import time
 8 | from typing import Dict, List, Optional
 9 | from datetime import datetime, timezone
   |                      ^^^^^^^^ F401
10 |
11 | # Ajouter le chemin vers les modules partagés et src
   |
   = help: Remove unused import

signal_aggregator\src\main.py:9:32: F401 [*] `datetime.timezone` imported but unused
   |
 7 | import time
 8 | from typing import Dict, List, Optional
 9 | from datetime import datetime, timezone
   |                                ^^^^^^^^ F401
10 |
11 | # Ajouter le chemin vers les modules partagés et src
   |
   = help: Remove unused import

signal_aggregator\src\main.py:15:31: F401 [*] `signal_aggregator.SignalAggregator` imported but unused
   |
13 | sys.path.insert(0, '/app/src')
14 |
15 | from signal_aggregator import SignalAggregator, EnhancedSignalAggregator
   |                               ^^^^^^^^^^^^^^^^ F401
16 | from regime_detector import RegimeDetector
17 | from performance_tracker import PerformanceTracker
   |
   = help: Remove unused import: `signal_aggregator.SignalAggregator`

signal_aggregator\src\main.py:16:29: F401 [*] `regime_detector.RegimeDetector` imported but unused
   |
15 | from signal_aggregator import SignalAggregator, EnhancedSignalAggregator
16 | from regime_detector import RegimeDetector
   |                             ^^^^^^^^^^^^^^ F401
17 | from performance_tracker import PerformanceTracker
18 | from shared.src.kafka_client import KafkaClient
   |
   = help: Remove unused import: `regime_detector.RegimeDetector`

signal_aggregator\src\monitoring_stats.py:4:26: F401 [*] `typing.List` imported but unused
  |
2 | Système de monitoring et statistiques par régime et stratégie
3 | """
4 | from typing import Dict, List, Optional, DefaultDict
  |                          ^^^^ F401
5 | from collections import defaultdict, deque
6 | from datetime import datetime, timedelta
  |
  = help: Remove unused import: `typing.List`

signal_aggregator\src\monitoring_stats.py:55:29: F541 [*] f-string without any placeholders
   |
53 |                         self.rejected_signals[regime][strategy] = count
54 |                 
55 |                 logger.info(f"📊 Statistiques de monitoring chargées")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
56 |         except Exception as e:
57 |             logger.error(f"Erreur chargement stats monitoring: {e}")
   |
   = help: Remove extraneous `f` prefix

signal_aggregator\src\performance_tracker.py:3:26: F401 [*] `typing.Optional` imported but unused
  |
1 | #!/usr/bin/env python3
2 | import logging
3 | from typing import Dict, Optional
  |                          ^^^^^^^^ F401
4 | from datetime import datetime, timedelta
5 | import json
  |
  = help: Remove unused import: `typing.Optional`

signal_aggregator\src\regime_detector.py:4:17: F401 [*] `numpy` imported but unused
  |
2 | import logging
3 | import pandas as pd
4 | import numpy as np
  |                 ^^ F401
5 | from typing import Dict, Optional
6 | from datetime import datetime, timedelta
  |
  = help: Remove unused import: `numpy`

signal_aggregator\src\regime_detector.py:5:26: F401 [*] `typing.Optional` imported but unused
  |
3 | import pandas as pd
4 | import numpy as np
5 | from typing import Dict, Optional
  |                          ^^^^^^^^ F401
6 | from datetime import datetime, timedelta
7 | import ta
  |
  = help: Remove unused import: `typing.Optional`

signal_aggregator\src\regime_detector.py:6:32: F401 [*] `datetime.timedelta` imported but unused
  |
4 | import numpy as np
5 | from typing import Dict, Optional
6 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^ F401
7 | import ta
8 | import json
  |
  = help: Remove unused import: `datetime.timedelta`

signal_aggregator\src\regime_detector.py:244:13: F841 Local variable `current_high` is assigned to but never used
    |
242 |             # 1. Rebound detection - check if recovering from recent low
243 |             recent_low = df['low'].tail(50).min()
244 |             current_high = df['high'].tail(10).max()
    |             ^^^^^^^^^^^^ F841
245 |             rebound_pct = ((current_price - recent_low) / recent_low) * 100
    |
    = help: Remove assignment to unused variable `current_high`

signal_aggregator\src\regime_detector.py:396:13: F841 Local variable `rsi_values` is assigned to but never used
    |
394 |             # Legacy format with price arrays
395 |             prices = data.get('prices', [])
396 |             rsi_values = data.get('rsi', [])
    |             ^^^^^^^^^^ F841
397 |             atr_values = data.get('atr', [])
398 |             volumes = data.get('volumes', [])
    |
    = help: Remove assignment to unused variable `rsi_values`

signal_aggregator\src\regime_detector.py:397:13: F841 Local variable `atr_values` is assigned to but never used
    |
395 |             prices = data.get('prices', [])
396 |             rsi_values = data.get('rsi', [])
397 |             atr_values = data.get('atr', [])
    |             ^^^^^^^^^^ F841
398 |             volumes = data.get('volumes', [])
    |
    = help: Remove assignment to unused variable `atr_values`

signal_aggregator\src\signal_aggregator.py:581:9: F841 Local variable `main_strategy` is assigned to but never used
    |
580 |         # Create main strategy name from contributing strategies
581 |         main_strategy = contributing_strategies[0] if contributing_strategies else 'SignalAggregator'
    |         ^^^^^^^^^^^^^ F841
582 |         
583 |         # NOUVEAU: Volume-based confidence boost (classique)
    |
    = help: Remove assignment to unused variable `main_strategy`

signal_aggregator\src\signal_aggregator.py:793:9: F841 Local variable `main_strategy` is assigned to but never used
    |
792 |         # Create main strategy name from contributing strategies
793 |         main_strategy = contributing_strategies[0] if contributing_strategies else 'SignalAggregator'
    |         ^^^^^^^^^^^^^ F841
794 |         
795 |         # Performance-based adaptive boost
    |
    = help: Remove assignment to unused variable `main_strategy`

signal_aggregator\src\signal_aggregator.py:1098:17: F841 Local variable `ema_50_velocity` is assigned to but never used
     |
1096 |             else:
1097 |                 ema_21_velocity = 0
1098 |                 ema_50_velocity = 0
     |                 ^^^^^^^^^^^^^^^ F841
1099 |             
1100 |             # Calculer la force de la tendance
     |
     = help: Remove assignment to unused variable `ema_50_velocity`

signal_aggregator\src\signal_aggregator.py:1101:13: F841 Local variable `trend_strength` is assigned to but never used
     |
1100 |             # Calculer la force de la tendance
1101 |             trend_strength = abs(ema_21 - ema_50) / ema_50 if ema_50 > 0 else 0
     |             ^^^^^^^^^^^^^^ F841
1102 |             
1103 |             # Classification sophistiquée de la tendance
     |
     = help: Remove assignment to unused variable `trend_strength`

signal_aggregator\src\signal_aggregator.py:1253:9: F841 Local variable `price_targets` is assigned to but never used
     |
1252 |         # Vérifier que les signaux pointent dans la même direction générale
1253 |         price_targets = []
     |         ^^^^^^^^^^^^^ F841
1254 |         stop_losses = []
     |
     = help: Remove assignment to unused variable `price_targets`

signal_aggregator\src\signal_aggregator.py:1355:26: F541 [*] f-string without any placeholders
     |
1354 |         if signal.get('confidence', 0) < min_confidence:
1355 |             logger.debug(f"Signal filtré: confiance insuffisante pendant heures creuses")
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
1356 |             return False
     |
     = help: Remove extraneous `f` prefix

signal_aggregator\src\signal_aggregator.py:1389:48: F541 [*] f-string without any placeholders
     |
1387 |             try:
1388 |                 symbol_prices = self.redis.lrange(f"prices_1h:{symbol}", 0, 24)
1389 |                 btc_prices = self.redis.lrange(f"prices_1h:BTCUSDC", 0, 24)
     |                                                ^^^^^^^^^^^^^^^^^^^^ F541
1390 |             except AttributeError:
1391 |                 # Fallback pour RedisClientPool customisé
     |
     = help: Remove extraneous `f` prefix

signal_aggregator\src\signal_aggregator.py:1393:49: F541 [*] f-string without any placeholders
     |
1391 |                 # Fallback pour RedisClientPool customisé
1392 |                 symbol_prices_str = self.redis.get(f"prices_1h:{symbol}")
1393 |                 btc_prices_str = self.redis.get(f"prices_1h:BTCUSDC")
     |                                                 ^^^^^^^^^^^^^^^^^^^^ F541
1394 |                 
1395 |                 symbol_prices = []
     |
     = help: Remove extraneous `f` prefix

signal_aggregator\src\signal_aggregator.py:1465:13: E722 Do not use bare `except`
     |
1463 |                     if entry:
1464 |                         history.append(json.loads(entry))
1465 |             except:
     |             ^^^^^^ E722
1466 |                 pass
     |

trader\src\api\rest_server.py:7:20: F401 [*] `typing.Optional` imported but unused
  |
5 | import logging
6 | import threading
7 | from typing import Optional
  |                    ^^^^^^^^ F401
8 | import time
9 | import psutil
  |
  = help: Remove unused import: `typing.Optional`

trader\src\api\rest_server.py:8:8: F401 [*] `time` imported but unused
   |
 6 | import threading
 7 | from typing import Optional
 8 | import time
   |        ^^^^ F401
 9 | import psutil
10 | import os
   |
   = help: Remove unused import: `time`

trader\src\api\routes.py:7:8: F401 [*] `json` imported but unused
  |
5 | import logging
6 | import time
7 | import json
  |        ^^^^ F401
8 | import hmac
9 | import hashlib
  |
  = help: Remove unused import: `json`

trader\src\api\routes.py:718:9: F841 Local variable `force` is assigned to but never used
    |
716 |         # Récupérer les options de la requête
717 |         data = request.json or {}
718 |         force = data.get('force', True)
    |         ^^^^^ F841
719 |     
720 |     except Exception as e:
    |
    = help: Remove assignment to unused variable `force`

trader\src\exchange\binance_executor.py:7:26: F401 [*] `typing.Any` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional, List, Tuple, Union
  |                          ^^^ F401
8 | from datetime import datetime
  |
  = help: Remove unused import

trader\src\exchange\binance_executor.py:7:41: F401 [*] `typing.List` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional, List, Tuple, Union
  |                                         ^^^^ F401
8 | from datetime import datetime
  |
  = help: Remove unused import

trader\src\exchange\binance_executor.py:7:54: F401 [*] `typing.Union` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional, List, Tuple, Union
  |                                                      ^^^^^ F401
8 | from datetime import datetime
  |
  = help: Remove unused import

trader\src\exchange\binance_utils.py:12:21: F401 [*] `decimal.Decimal` imported but unused
   |
10 | import uuid
11 | import requests
12 | from decimal import Decimal, getcontext, ROUND_DOWN
   |                     ^^^^^^^ F401
13 | from urllib.parse import urlencode
14 | from datetime import datetime
   |
   = help: Remove unused import

trader\src\exchange\binance_utils.py:12:42: F401 [*] `decimal.ROUND_DOWN` imported but unused
   |
10 | import uuid
11 | import requests
12 | from decimal import Decimal, getcontext, ROUND_DOWN
   |                                          ^^^^^^^^^^ F401
13 | from urllib.parse import urlencode
14 | from datetime import datetime
   |
   = help: Remove unused import

trader\src\exchange\binance_utils.py:15:54: F401 [*] `typing.Union` imported but unused
   |
13 | from urllib.parse import urlencode
14 | from datetime import datetime
15 | from typing import Dict, Any, Optional, List, Tuple, Union
   |                                                      ^^^^^ F401
16 |
17 | from shared.src.enums import OrderSide, OrderStatus, TradeRole
   |
   = help: Remove unused import: `typing.Union`

trader\src\exchange\binance_utils.py:17:54: F401 [*] `shared.src.enums.TradeRole` imported but unused
   |
15 | from typing import Dict, Any, Optional, List, Tuple, Union
16 |
17 | from shared.src.enums import OrderSide, OrderStatus, TradeRole
   |                                                      ^^^^^^^^^ F401
18 | from shared.src.schemas import TradeOrder, TradeExecution
   |
   = help: Remove unused import: `shared.src.enums.TradeRole`

trader\src\exchange\binance_utils.py:326:17: E722 Do not use bare `except`
    |
324 |                     error_code = error_data.get("code", 0)
325 |                     logger.error(f"Erreur Binance {response.status_code}: {error_code} - {error_msg}")
326 |                 except:
    |                 ^^^^^^ E722
327 |                     error_msg = f"HTTP {response.status_code}"
328 |                     logger.error(f"Erreur Binance {response.status_code}: {error_msg}")
    |

trader\src\exchange\binance_utils.py:511:17: E722 Do not use bare `except`
    |
509 |                 try:
510 |                     error_msg = response.json().get("msg", "Unknown error")
511 |                 except:
    |                 ^^^^^^ E722
512 |                     error_msg = f"HTTP {response.status_code}"
    |

trader\src\exchange\order_validation.py:7:20: F401 [*] `typing.Dict` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional
  |                    ^^^^ F401
8 |
9 | from shared.src.schemas import TradeOrder
  |
  = help: Remove unused import

trader\src\exchange\order_validation.py:7:26: F401 [*] `typing.Any` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional
  |                          ^^^ F401
8 |
9 | from shared.src.schemas import TradeOrder
  |
  = help: Remove unused import

trader\src\exchange\order_validation.py:7:31: F401 [*] `typing.Optional` imported but unused
  |
5 | """
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^ F401
8 |
9 | from shared.src.schemas import TradeOrder
  |
  = help: Remove unused import

trader\src\trading\cycle_manager.py:9:8: F401 [*] `os` imported but unused
   |
 7 | import time
 8 | import uuid
 9 | import os
   |        ^^ F401
10 | import json
11 | from typing import Dict, List, Any, Optional, Union
   |
   = help: Remove unused import: `os`

trader\src\trading\cycle_manager.py:18:44: F401 [*] `shared.src.schemas.TradeExecution` imported but unused
   |
16 | from shared.src.config import get_db_url, TRADING_MODE
17 | from shared.src.enums import OrderSide, OrderStatus, CycleStatus, OrderType
18 | from shared.src.schemas import TradeOrder, TradeExecution, TradeCycle
   |                                            ^^^^^^^^^^^^^^ F401
19 | from shared.src.db_pool import DBContextManager, DBConnectionPool, transaction
   |
   = help: Remove unused import: `shared.src.schemas.TradeExecution`

trader\src\trading\cycle_manager.py:19:32: F401 [*] `shared.src.db_pool.DBContextManager` imported but unused
   |
17 | from shared.src.enums import OrderSide, OrderStatus, CycleStatus, OrderType
18 | from shared.src.schemas import TradeOrder, TradeExecution, TradeCycle
19 | from shared.src.db_pool import DBContextManager, DBConnectionPool, transaction
   |                                ^^^^^^^^^^^^^^^^ F401
20 |
21 | from trader.src.exchange.binance_executor import BinanceExecutor
   |
   = help: Remove unused import: `shared.src.db_pool.DBContextManager`

trader\src\trading\cycle_manager.py:862:29: F541 [*] f-string without any placeholders
    |
860 |             except Exception as e:
861 |                 logger.warning(f"⚠️ Échec d'initialisation immédiate du trailing stop pour {cycle_id}: {str(e)}")
862 |                 logger.info(f"🎯 Cycle créé - StopManagerPure gère le trailing stop à 3% (initialisation différée)")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
863 |             
864 |             return cycle
    |
    = help: Remove extraneous `f` prefix

trader\src\trading\cycle_manager.py:1246:41: F541 [*] f-string without any placeholders
     |
1244 |                         try:
1245 |                             self.binance_executor.cancel_order(fresh_cycle.symbol, fresh_cycle.exit_order_id)
1246 |                             logger.info(f"✅ Ordre limite annulé avec succès")
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
1247 |                         except Exception as e:
1248 |                             logger.error(f"❌ Impossible d'annuler l'ordre limite: {str(e)}")
     |
     = help: Remove extraneous `f` prefix

trader\src\trading\cycle_repository.py:8:47: F401 [*] `typing.Union` imported but unused
  |
6 | import logging
7 | from sqlite3 import Cursor
8 | from typing import Dict, List, Any, Optional, Union
  |                                               ^^^^^ F401
9 | from datetime import datetime
  |
  = help: Remove unused import: `typing.Union`

trader\src\trading\cycle_repository.py:9:22: F401 [*] `datetime.datetime` imported but unused
   |
 7 | from sqlite3 import Cursor
 8 | from typing import Dict, List, Any, Optional, Union
 9 | from datetime import datetime
   |                      ^^^^^^^^ F401
10 |
11 | from shared.src.enums import OrderSide, OrderStatus, CycleStatus
   |
   = help: Remove unused import: `datetime.datetime`

trader\src\trading\cycle_repository.py:11:41: F401 [*] `shared.src.enums.OrderStatus` imported but unused
   |
 9 | from datetime import datetime
10 |
11 | from shared.src.enums import OrderSide, OrderStatus, CycleStatus
   |                                         ^^^^^^^^^^^ F401
12 |
13 | # Helper pour la conversion robuste des statuts de cycle
   |
   = help: Remove unused import: `shared.src.enums.OrderStatus`

trader\src\trading\cycle_repository.py:25:1: E402 Module level import not at top of file
   |
23 |             return mapping.get(status_str.lower(), CycleStatus.FAILED)
24 |     return status_str  # Si c'est déjà une énumération
25 | from shared.src.schemas import TradeOrder, TradeExecution, TradeCycle
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
26 | from shared.src.db_pool import DBContextManager, transaction
   |

trader\src\trading\cycle_repository.py:25:32: F401 [*] `shared.src.schemas.TradeOrder` imported but unused
   |
23 |             return mapping.get(status_str.lower(), CycleStatus.FAILED)
24 |     return status_str  # Si c'est déjà une énumération
25 | from shared.src.schemas import TradeOrder, TradeExecution, TradeCycle
   |                                ^^^^^^^^^^ F401
26 | from shared.src.db_pool import DBContextManager, transaction
   |
   = help: Remove unused import: `shared.src.schemas.TradeOrder`

trader\src\trading\cycle_repository.py:26:1: E402 Module level import not at top of file
   |
24 |     return status_str  # Si c'est déjà une énumération
25 | from shared.src.schemas import TradeOrder, TradeExecution, TradeCycle
26 | from shared.src.db_pool import DBContextManager, transaction
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
27 |
28 | # Configuration du logging
   |

trader\src\trading\cycle_repository.py:57:45: F841 Local variable `conn` is assigned to but never used
   |
55 |             # Use a connection from the pool for schema operations
56 |             with DBContextManager(self.db_url) as db:
57 |                 with db.get_connection() as conn:
   |                                             ^^^^ F841
58 |                     # Table des ordres/exécutions
59 |                     Cursor.execute("""
   |
   = help: Remove assignment to unused variable `conn`

trader\src\trading\order_manager.py:9:47: F401 [*] `typing.Union` imported but unused
   |
 7 | import time
 8 | import threading
 9 | from typing import Dict, List, Any, Optional, Union
   |                                               ^^^^^ F401
10 |
11 | from shared.src.config import SYMBOLS, TRADE_QUANTITIES, TRADE_QUANTITY, TRADING_MODE
   |
   = help: Remove unused import: `typing.Union`

trader\src\trading\order_manager.py:11:40: F401 [*] `shared.src.config.TRADE_QUANTITIES` imported but unused
   |
 9 | from typing import Dict, List, Any, Optional, Union
10 |
11 | from shared.src.config import SYMBOLS, TRADE_QUANTITIES, TRADE_QUANTITY, TRADING_MODE
   |                                        ^^^^^^^^^^^^^^^^ F401
12 | from shared.src.enums import OrderSide, CycleStatus
13 | from shared.src.schemas import TradeOrder
   |
   = help: Remove unused import

trader\src\trading\order_manager.py:11:58: F401 [*] `shared.src.config.TRADE_QUANTITY` imported but unused
   |
 9 | from typing import Dict, List, Any, Optional, Union
10 |
11 | from shared.src.config import SYMBOLS, TRADE_QUANTITIES, TRADE_QUANTITY, TRADING_MODE
   |                                                          ^^^^^^^^^^^^^^ F401
12 | from shared.src.enums import OrderSide, CycleStatus
13 | from shared.src.schemas import TradeOrder
   |
   = help: Remove unused import

trader\src\trading\order_manager.py:12:41: F401 [*] `shared.src.enums.CycleStatus` imported but unused
   |
11 | from shared.src.config import SYMBOLS, TRADE_QUANTITIES, TRADE_QUANTITY, TRADING_MODE
12 | from shared.src.enums import OrderSide, CycleStatus
   |                                         ^^^^^^^^^^^ F401
13 | from shared.src.schemas import TradeOrder
   |
   = help: Remove unused import: `shared.src.enums.CycleStatus`

trader\src\trading\order_manager.py:13:32: F401 [*] `shared.src.schemas.TradeOrder` imported but unused
   |
11 | from shared.src.config import SYMBOLS, TRADE_QUANTITIES, TRADE_QUANTITY, TRADING_MODE
12 | from shared.src.enums import OrderSide, CycleStatus
13 | from shared.src.schemas import TradeOrder
   |                                ^^^^^^^^^^ F401
14 |
15 | from trader.src.trading.cycle_manager import CycleManager
   |
   = help: Remove unused import: `shared.src.schemas.TradeOrder`

trader\src\trading\order_manager.py:19:37: F401 [*] `trader.src.utils.safety.safe_execute` imported but unused
   |
17 | from trader.src.trading.price_monitor import PriceMonitor
18 | from trader.src.trading.reconciliation import ExchangeReconciliation
19 | from trader.src.utils.safety import safe_execute, notify_error
   |                                     ^^^^^^^^^^^^ F401
20 | from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY
   |
   = help: Remove unused import

trader\src\trading\order_manager.py:19:51: F401 [*] `trader.src.utils.safety.notify_error` imported but unused
   |
17 | from trader.src.trading.price_monitor import PriceMonitor
18 | from trader.src.trading.reconciliation import ExchangeReconciliation
19 | from trader.src.utils.safety import safe_execute, notify_error
   |                                                   ^^^^^^^^^^^^ F401
20 | from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY
   |
   = help: Remove unused import

trader\src\trading\order_manager.py:155:21: F541 [*] f-string without any placeholders
    |
153 |             threading.Timer(duration, self.resume_all).start()
154 |         
155 |         logger.info(f"Trading en pause pour tous les symboles et stratégies" + 
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
156 |                   (f" pendant {duration}s" if duration > 0 else ""))
    |
    = help: Remove extraneous `f` prefix

trader\src\trading\reconciliation.py:8:20: F401 [*] `typing.List` imported but unused
  |
6 | import time
7 | import threading
8 | from typing import List, Dict, Any, Optional
  |                    ^^^^ F401
9 | from datetime import datetime, timedelta
  |
  = help: Remove unused import

trader\src\trading\reconciliation.py:8:37: F401 [*] `typing.Optional` imported but unused
  |
6 | import time
7 | import threading
8 | from typing import List, Dict, Any, Optional
  |                                     ^^^^^^^^ F401
9 | from datetime import datetime, timedelta
  |
  = help: Remove unused import

trader\src\trading\reconciliation.py:25:1: E402 Module level import not at top of file
   |
23 |             return mapping.get(status_str.lower(), CycleStatus.FAILED)
24 |     return status_str  # Si c'est déjà une énumération
25 | from shared.src.schemas import TradeCycle
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
26 | from trader.src.exchange.binance_executor import BinanceExecutor
27 | from trader.src.trading.cycle_repository import CycleRepository
   |

trader\src\trading\reconciliation.py:26:1: E402 Module level import not at top of file
   |
24 |     return status_str  # Si c'est déjà une énumération
25 | from shared.src.schemas import TradeCycle
26 | from trader.src.exchange.binance_executor import BinanceExecutor
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
27 | from trader.src.trading.cycle_repository import CycleRepository
   |

trader\src\trading\reconciliation.py:27:1: E402 Module level import not at top of file
   |
25 | from shared.src.schemas import TradeCycle
26 | from trader.src.exchange.binance_executor import BinanceExecutor
27 | from trader.src.trading.cycle_repository import CycleRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
28 |
29 | # Configuration du logging
   |

trader\src\trading\stop_manager_pure.py:12:47: F401 [*] `typing.Union` imported but unused
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Dict, List, Any, Optional, Union, Callable
   |                                               ^^^^^ F401
13 | from threading import RLock
   |
   = help: Remove unused import: `typing.Union`

trader\src\utils\cleanup_orphan_orders.py:12:22: F401 [*] `datetime.datetime` imported but unused
   |
10 | import logging
11 | import time
12 | from datetime import datetime
   |                      ^^^^^^^^ F401
13 | from typing import List, Tuple
   |
   = help: Remove unused import: `datetime.datetime`

trader\src\utils\cleanup_orphan_orders.py:156:21: F541 [*] f-string without any placeholders
    |
154 |                     total_errors += 1
155 |         
156 |         logger.info(f"\n📊 Résumé du nettoyage:")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
157 |         logger.info(f"   - Ordres annulés: {total_canceled}")
158 |         logger.info(f"   - Erreurs: {total_errors}")
    |
    = help: Remove extraneous `f` prefix

trader\src\utils\gain_protector.py:7:36: F401 [*] `typing.Tuple` imported but unused
  |
6 | import logging
7 | from typing import Dict, Optional, Tuple, List
  |                                    ^^^^^ F401
8 | from dataclasses import dataclass
9 | from enum import Enum
  |
  = help: Remove unused import: `typing.Tuple`

trader\src\utils\safety.py:108:33: F841 [*] Local variable `e` is assigned to but never used
    |
106 |                 return result
107 |                 
108 |             except Exception as e:
    |                                 ^ F841
109 |                 # Incrémenter le compteur d'échecs
110 |                 with state["lock"]:
    |
    = help: Remove assignment to unused variable `e`

trader\src\utils\trailing_stop.py:8:20: F401 [*] `typing.Optional` imported but unused
   |
 6 | import logging
 7 | from enum import Enum, auto
 8 | from typing import Optional
   |                    ^^^^^^^^ F401
 9 |
10 | logger = logging.getLogger(__name__)
   |
   = help: Remove unused import: `typing.Optional`

Found 258 errors.
[*] 172 fixable with the `--fix` option (48 hidden fixes can be enabled with the `--unsafe-fixes` option).
