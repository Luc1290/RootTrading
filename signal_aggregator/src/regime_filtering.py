#!/usr/bin/env python3
"""
Module pour le filtrage des signaux bas√© sur les r√©gimes de march√©.
Contient la logique de filtrage adaptative selon les conditions de march√©.
"""

import logging
from typing import Dict, Any, Optional, List
from enhanced_regime_detector import MarketRegime

logger = logging.getLogger(__name__)


class RegimeFiltering:
    """Classe pour le filtrage des signaux bas√© sur les r√©gimes de march√©"""
    
    # Strategy groupings by market condition
    STRATEGY_GROUPS = {
        'trend': ['EMA_Cross', 'MACD', 'Breakout'],
        'mean_reversion': ['Bollinger', 'RSI', 'Divergence'],
        'adaptive': ['Ride_or_React']
    }
    
    def __init__(self, technical_analysis=None):
        self.technical_analysis = technical_analysis
    
    async def apply_enhanced_regime_filtering(self, signal: Dict[str, Any], regime, regime_metrics: Dict[str, float], 
                                             is_ultra_confluent: bool, signal_score: Optional[float], 
                                             strategy_count: int = 1) -> bool:
        """
        Applique un filtrage intelligent bas√© sur les r√©gimes Enhanced.
        
        Args:
            signal: Signal √† filtrer
            regime: R√©gime Enhanced d√©tect√©
            regime_metrics: M√©triques du r√©gime
            is_ultra_confluent: Si le signal est ultra-confluent
            signal_score: Score du signal (si disponible)
            strategy_count: Nombre de strat√©gies qui s'accordent sur ce signal
            
        Returns:
            True si le signal doit √™tre accept√©, False sinon
        """
        try:
            symbol = signal['symbol']
            signal_strength = signal.get('strength', 'moderate')
            signal_confidence = signal.get('confidence', 0.5)
            strategy = signal.get('strategy', 'Unknown')
            # Normaliser le nom de strat√©gie (retirer _Strategy)
            strategy = strategy.replace('_Strategy', '')
            side = signal.get('side', 'UNKNOWN')
            
            # NOUVEAU: R√©cup√©rer donn√©es techniques pour validation Enhanced
            technical_context = await self.technical_analysis.get_technical_context(symbol) if self.technical_analysis else {}
            
            # Seuils adaptatifs selon le r√©gime Enhanced + contexte technique
            if regime.name == 'STRONG_TREND_UP':
                # Tendance haussi√®re forte: ATTENTION - √©viter d'acheter au sommet
                if side == 'SELL':
                    # En forte tendance haussi√®re, c'est le moment de prendre des profits
                    min_confidence = 0.65  # Plus permissif pour SELL (prise de profits)
                    required_strength = ['moderate', 'strong', 'very_strong']
                    logger.debug(f"üí™ {regime.name}: SELL favoris√© pour prise de profits pour {symbol}")
                else:  # BUY
                    # En forte tendance haussi√®re, √©viter d'acheter (prix d√©j√† haut)
                    min_confidence = 0.85  # Tr√®s strict pour BUY quand prix tr√®s haut
                    required_strength = ['very_strong']
                    logger.debug(f"üí™ {regime.name}: BUY fortement p√©nalis√© (prix d√©j√† haut) pour {symbol}")
                
            elif regime.name == 'TREND_UP':
                # Tendance haussi√®re mod√©r√©e: √©quilibrer BUY/SELL mais attention au prix
                if side == 'SELL':
                    min_confidence = 0.70  # Mod√©r√©ment permissif pour SELL (prise de profits)
                    required_strength = ['moderate', 'strong', 'very_strong']
                    logger.debug(f"üìà {regime.name}: SELL mod√©r√©ment favoris√© pour profits pour {symbol}")
                else:  # BUY
                    # En tendance haussi√®re, √™tre prudent avec les BUY
                    min_confidence = 0.75  # Plus strict pour BUY (prix en hausse)
                    required_strength = ['strong', 'very_strong']
                    logger.debug(f"üìà {regime.name}: BUY p√©nalis√© (prix en hausse) pour {symbol}")
                
            elif regime.name == 'WEAK_TREND_UP':
                # Tendance haussi√®re faible: plus √©quilibr√©
                if side == 'SELL':
                    min_confidence = 0.65  # L√©g√®rement permissif pour SELL
                    required_strength = ['moderate', 'strong', 'very_strong']
                    logger.debug(f"üìä {regime.name}: SELL l√©g√®rement favoris√© pour {symbol}")
                else:  # BUY
                    # En tendance faible, BUY acceptable mais prudent
                    min_confidence = 0.70  # Mod√©r√©ment strict pour BUY
                    required_strength = ['moderate', 'strong', 'very_strong']
                    logger.debug(f"üìä {regime.name}: BUY mod√©r√©ment accept√© pour {symbol}")
                
            elif regime.name == 'RANGE_TIGHT':
                # Gestion sp√©ciale pour ADX tr√®s faible (march√© plat)
                adx = regime_metrics.get('adx', 0)
                if adx <= 5:  # ADX pr√®s de 0
                    # Exiger confirmation volume √©lev√©
                    volume_ratio = signal.get('metadata', {}).get('volume_ratio', 1.0)
                    if volume_ratio < 2.0:
                        logger.info(f"üö´ Signal rejet√© en RANGE_TIGHT: ADX={adx:.1f} et volume_ratio={volume_ratio:.1f} < 2.0")
                        return False
                    
                    # Marquer pour r√©duction de poids 0.5x
                    signal['metadata'] = signal.get('metadata', {})
                    signal['metadata']['adx_weight_modifier'] = 0.5
                    logger.info(f"‚öñÔ∏è ADX faible ({adx:.1f}): poids r√©duit √† 0.5x pour {symbol}")
                
                # Range serr√©: ASSOUPLI pour mean-reversion
                if strategy in self.STRATEGY_GROUPS.get('mean_reversion', []):
                    # ASSOUPLI pour strat√©gies de mean-reversion
                    min_confidence = 0.6  # ASSOUPLI de 0.75 √† 0.6
                    required_strength = ['moderate', 'strong', 'very_strong']  # Ajouter moderate
                    logger.debug(f"üîí {regime.name}: seuils ASSOUPLIS pour mean-reversion {symbol}")
                else:
                    # ASSOUPLI pour autres strat√©gies aussi
                    min_confidence = 0.7  # ASSOUPLI de 0.8 √† 0.7
                    required_strength = ['strong', 'very_strong']
                    logger.debug(f"üîí {regime.name}: seuils ASSOUPLIS (0.7) pour {symbol}")
                
            elif regime.name == 'RANGE_VOLATILE':
                # Range volatil: s√©lectif mais moins que tight
                min_confidence = 0.7
                required_strength = ['strong', 'very_strong']
                logger.debug(f"‚ö° {regime.name}: seuils stricts pour {symbol}")
                
            elif regime.name in ['WEAK_TREND_DOWN', 'TREND_DOWN', 'STRONG_TREND_DOWN']:
                # Tendances baissi√®res: INVERSER LA LOGIQUE - favoriser les BUY opportunistes, bloquer les SELL
                if side == 'BUY':
                    # En tendance baissi√®re, c'est le moment d'acheter (prix bas)
                    if regime.name == 'STRONG_TREND_DOWN':
                        min_confidence = 0.65  # Plus permissif pour BUY quand prix tr√®s bas
                        required_strength = ['moderate', 'strong', 'very_strong']
                        logger.debug(f"üìâ {regime.name}: BUY opportuniste favoris√© (prix bas) pour {symbol}")
                    else:
                        min_confidence = 0.70  # Mod√©r√©ment permissif pour BUY
                        required_strength = ['moderate', 'strong', 'very_strong']
                else:  # SELL
                    # En tendance baissi√®re, √©viter de vendre (prix d√©j√† bas)
                    if regime.name == 'STRONG_TREND_DOWN':
                        min_confidence = 0.85  # Tr√®s strict pour SELL quand prix tr√®s bas
                        required_strength = ['very_strong']
                        logger.debug(f"üìâ {regime.name}: SELL fortement p√©nalis√© (prix d√©j√† bas) pour {symbol}")
                    else:
                        min_confidence = 0.80  # Strict pour SELL
                        required_strength = ['strong', 'very_strong']
                logger.debug(f"üìâ {regime.name}: logique invers√©e BUY/SELL pour {symbol}")
                
            else:
                # R√©gime inconnu ou UNDEFINED: seuils par d√©faut
                min_confidence = 0.6
                required_strength = ['strong', 'very_strong']
                logger.debug(f"‚ùì {regime.name}: seuils par d√©faut pour {symbol}")
            
            # Exception pour signaux ultra-confluents de haute qualit√©
            if is_ultra_confluent and signal_score:
                if signal_score >= 85:
                    # Signaux excellents: r√©duire les seuils
                    min_confidence *= 0.8
                    if 'moderate' not in required_strength:
                        required_strength.append('moderate')
                    logger.info(f"‚≠ê Signal ultra-confluent excellent (score={signal_score:.1f}): seuils r√©duits pour {symbol}")
                elif signal_score >= 75:
                    # Signaux tr√®s bons: r√©duire mod√©r√©ment
                    min_confidence *= 0.9
                    logger.info(f"‚ú® Signal ultra-confluent tr√®s bon (score={signal_score:.1f}): seuils ajust√©s pour {symbol}")
            
            # Appliquer les filtres
            if signal_confidence < min_confidence:
                logger.info(f"üö´ Signal rejet√© en {regime.name}: confiance {signal_confidence:.2f} < {min_confidence:.2f} "
                           f"pour {strategy} {side} {symbol}")
                return False
                
            # NOUVEAU: Accepter les signaux 'moderate' si 2+ strat√©gies s'accordent
            if signal_strength == 'moderate' and strategy_count >= 2:
                logger.info(f"‚úÖ Signal 'moderate' accept√© avec {strategy_count} strat√©gies en {regime.name}: "
                           f"{strategy} {side} {symbol}")
            elif signal_strength not in required_strength:
                logger.info(f"üö´ Signal rejet√© en {regime.name}: force '{signal_strength}' insuffisante "
                           f"(requis: {required_strength}) pour {strategy} {side} {symbol}")
                return False
            
            # Signal accept√©
            adx = regime_metrics.get('adx', 0)
            logger.info(f"‚úÖ Signal accept√© en {regime.name} (ADX={adx:.1f}): "
                       f"{strategy} {side} {symbol} force={signal_strength} confiance={signal_confidence:.2f}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur dans le filtrage Enhanced: {e}")
            return True  # En cas d'erreur, laisser passer le signal
    
    def get_regime_threshold(self, regime: Any) -> float:
        """Retourne le seuil de vote minimum selon le r√©gime"""
        if MarketRegime is None:
            return 0.5  # Seuil par d√©faut
            
        thresholds = {
            MarketRegime.STRONG_TREND_UP: 0.6,
            MarketRegime.STRONG_TREND_DOWN: 0.6,
            MarketRegime.TREND_UP: 0.5,
            MarketRegime.TREND_DOWN: 0.5,
            MarketRegime.WEAK_TREND_UP: 0.4,
            MarketRegime.WEAK_TREND_DOWN: 0.4,
            MarketRegime.RANGE_TIGHT: 0.7,  # Plus strict en range serr√©
            MarketRegime.RANGE_VOLATILE: 0.6,
            MarketRegime.UNDEFINED: 0.8  # Tr√®s prudent si ind√©fini
        }
        return thresholds.get(regime, 0.5)
    
    def get_single_strategy_threshold(self, regime: Any) -> float:
        """Retourne le seuil de confiance pour les signaux d'une seule strat√©gie selon le r√©gime"""
        if MarketRegime is None:
            return 0.8
            
        thresholds = {
            MarketRegime.STRONG_TREND_UP: 0.7,
            MarketRegime.STRONG_TREND_DOWN: 0.7,
            MarketRegime.TREND_UP: 0.75,
            MarketRegime.TREND_DOWN: 0.75,
            MarketRegime.WEAK_TREND_UP: 0.8,
            MarketRegime.WEAK_TREND_DOWN: 0.8,
            MarketRegime.RANGE_TIGHT: 0.85,  # Tr√®s strict en range serr√©
            MarketRegime.RANGE_VOLATILE: 0.8,
            MarketRegime.UNDEFINED: 0.9  # Tr√®s prudent si ind√©fini
        }
        return thresholds.get(regime, 0.8)
    
    def is_strategy_active(self, strategy: str, regime: str) -> bool:
        """Check if a strategy should be active in current regime"""
        
        # Adaptive strategies are always active
        if strategy in self.STRATEGY_GROUPS['adaptive']:
            return True
            
        # Handle enhanced regime codes
        if regime.startswith('STRONG_TREND') or regime.startswith('TREND'):
            return strategy in self.STRATEGY_GROUPS['trend']
            
        # Handle range regimes (RANGE_TIGHT, RANGE_VOLATILE, etc.)
        elif regime.startswith('RANGE'):
            return strategy in self.STRATEGY_GROUPS['mean_reversion']
            
        # Handle other enhanced regimes
        elif regime in ['BREAKOUT_UP', 'BREAKOUT_DOWN']:
            # Breakout regimes favor trend strategies
            return strategy in self.STRATEGY_GROUPS['trend']
        elif regime == 'VOLATILE':
            # In volatile markets, adaptive strategies work best
            return strategy in self.STRATEGY_GROUPS['adaptive']
            
        # In undefined regime, all strategies are active
        return True
    
    def apply_regime_confidence_boost(self, confidence: float, regime: Any, metrics: Dict[str, float]) -> float:
        """Applique un boost de confiance bas√© sur les m√©triques du r√©gime"""
        # Boost bas√© sur la force de la tendance (ADX)
        from shared.src.config import ADX_STRONG_TREND_THRESHOLD, ADX_TREND_THRESHOLD
        adx = metrics.get('adx', 20)
        if adx > ADX_STRONG_TREND_THRESHOLD:  # Tendance tr√®s forte
            confidence *= 1.1
        elif adx > ADX_TREND_THRESHOLD:  # Tendance forte
            confidence *= 1.05
        
        # Boost bas√© sur le momentum (ROC)
        roc = abs(metrics.get('roc', 0))
        if roc > 5:  # Momentum fort
            confidence *= 1.05
        
        # Penalty pour les r√©gimes ind√©finis ou instables
        if MarketRegime is not None:
            if regime == MarketRegime.UNDEFINED:
                confidence *= 0.9
            elif regime in [MarketRegime.RANGE_VOLATILE]:
                # Ne pas p√©naliser les strat√©gies de mean-reversion en range
                # Note: cette logique est maintenant dans _apply_enhanced_regime_filtering
                confidence *= 0.95
        
        return min(1.0, confidence)  # Cap √† 1.0
    
    def determine_signal_strength(self, confidence: float, regime: Any) -> str:
        """D√©termine la force du signal bas√©e sur la confiance et le r√©gime"""
        # Seuils standardis√©s align√©s avec analyzer
        # moderate ‚â• 0.55, strong ‚â• 0.75, very_strong ‚â• 0.9
        if confidence >= 0.9:
            return 'very_strong'
        elif confidence >= 0.75:
            return 'strong'
        elif confidence >= 0.55:
            return 'moderate'
        else:
            return 'weak'