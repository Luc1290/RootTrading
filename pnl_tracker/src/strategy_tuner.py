"""
Module d'optimisation des strat√©gies de trading.
Utilise les donn√©es historiques pour ajuster les param√®tres des strat√©gies
afin d'am√©liorer leurs performances.
"""
import logging
import json
import os
import time
import yaml
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple, Union, Callable
import inspect
import threading
import psycopg2
from psycopg2.extras import RealDictCursor
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from joblib import Parallel, delayed
import importlib

# Importer les modules partag√©s
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.config import get_db_url, SYMBOLS
from shared.src.enums import OrderSide

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('strategy_tuner.log')
    ]
)
logger = logging.getLogger(__name__)

class StrategyTuner:
    """
    Optimiseur de strat√©gies de trading.
    Utilise des techniques d'optimisation pour am√©liorer les param√®tres des strat√©gies.
    """
    
    def __init__(self, db_url: str = None, 
                strategies_dir: str = None,
                results_dir: str = "./tuning_results"):
        """
        Initialise l'optimiseur de strat√©gies.
        
        Args:
            db_url: URL de connexion √† la base de donn√©es
            strategies_dir: R√©pertoire des strat√©gies
            results_dir: R√©pertoire pour les r√©sultats d'optimisation
        """
        self.db_url = db_url or get_db_url()
        
        # Chemin vers le r√©pertoire des strat√©gies
        if strategies_dir:
            self.strategies_dir = strategies_dir
        else:
            # Par d√©faut, chercher dans analyzer/strategies/
            self.strategies_dir = os.path.abspath(os.path.join(
                os.path.dirname(__file__), 
                "../../analyzer/strategies"
            ))
        
        # V√©rifier si le r√©pertoire des strat√©gies existe
        if not os.path.exists(self.strategies_dir):
            logger.warning(f"‚ö†Ô∏è R√©pertoire des strat√©gies non trouv√©: {self.strategies_dir}")
            logger.info("üí° Strategy tuning sera d√©sactiv√© si aucune strat√©gie n'est disponible")
            self.strategies_available = False
        else:
            self.strategies_available = True
            logger.info(f"‚úÖ R√©pertoire des strat√©gies trouv√©: {self.strategies_dir}")
            
        # Ajouter le r√©pertoire des strat√©gies au path Python
        if self.strategies_available and self.strategies_dir not in sys.path:
            sys.path.insert(0, os.path.dirname(self.strategies_dir))
            sys.path.insert(0, self.strategies_dir)
        
        self.results_dir = results_dir
        self.conn = None
        
        # Cr√©er le r√©pertoire de r√©sultats s'il n'existe pas
        os.makedirs(self.results_dir, exist_ok=True)
        
        # Dictionnaire pour stocker les instances de strat√©gies
        self.strategy_instances = {}
        
        # Initialiser la connexion √† la base de donn√©es
        self._init_db_connection()
        
        # V√©rifier la disponibilit√© des donn√©es de march√©
        self._check_market_data_availability()
        
        logger.info(f"‚úÖ StrategyTuner initialis√©")
    
    def _init_db_connection(self) -> None:
        """
        Initialise la connexion √† la base de donn√©es.
        """
        try:
            self.conn = psycopg2.connect(self.db_url)
            logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la connexion √† la base de donn√©es: {str(e)}")
            self.conn = None
    
    def _ensure_connection(self) -> bool:
        """
        S'assure que la connexion √† la base de donn√©es est active.
        
        Returns:
            True si la connexion est active, False sinon
        """
        if self.conn is None:
            self._init_db_connection()
            return self.conn is not None
        
        try:
            # V√©rifier si la connexion est active
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT 1")
                return True
        except Exception:
            # Reconnexion si n√©cessaire
            logger.warning("‚ö†Ô∏è Connexion √† la base de donn√©es perdue, tentative de reconnexion...")
            try:
                self.conn.close()
            except:
                pass
            
            self._init_db_connection()
            return self.conn is not None
    
    def _check_market_data_availability(self) -> None:
        """
        V√©rifie la disponibilit√© des donn√©es de march√© pour le backtesting.
        """
        if not self._ensure_connection():
            logger.warning("‚ö†Ô∏è Impossible de v√©rifier les donn√©es de march√© - pas de connexion DB")
            self.market_data_available = False
            return
        
        try:
            with self.conn.cursor() as cursor:
                # V√©rifier si la table market_data existe et contient des donn√©es
                cursor.execute("""
                    SELECT COUNT(*) as count, 
                           MIN(time) as earliest, 
                           MAX(time) as latest
                    FROM market_data 
                    WHERE symbol IN %s
                """, (tuple(SYMBOLS),))
                
                result = cursor.fetchone()
                count = result[0] if result else 0
                
                if count > 0:
                    self.market_data_available = True
                    logger.info(f"‚úÖ {count} donn√©es de march√© disponibles pour le backtesting")
                    logger.info(f"üìÖ P√©riode: {result[1]} √† {result[2]}")
                else:
                    self.market_data_available = False
                    logger.warning("‚ö†Ô∏è Aucune donn√©e de march√© trouv√©e - backtesting d√©sactiv√©")
                    logger.info("üí° D√©marrez le gateway pour collecter des donn√©es historiques")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification des donn√©es de march√©: {str(e)}")
            self.market_data_available = False
    
    def load_strategy_module(self, strategy_name: str) -> Optional[Any]:
        """
        Charge dynamiquement une strat√©gie.
        
        Args:
            strategy_name: Nom du fichier Python de la strat√©gie (sans .py)
            
        Returns:
            Module de la strat√©gie ou None en cas d'√©chec
        """
        if not self.strategies_available:
            logger.warning(f"‚ö†Ô∏è Strat√©gies non disponibles, impossible de charger {strategy_name}")
            return None
            
        try:
            # S'assurer que le fichier existe
            strategy_file = os.path.join(self.strategies_dir, f"{strategy_name}.py")
            if not os.path.exists(strategy_file):
                logger.error(f"‚ùå Fichier de strat√©gie non trouv√©: {strategy_file}")
                return None
            
            # Plusieurs m√©thodes pour charger le module
            strategy_module = None
            
            # M√©thode 1: Import via analyzer.strategies
            try:
                module_name = f"analyzer.strategies.{strategy_name}"
                strategy_module = importlib.import_module(module_name)
                logger.info(f"‚úÖ Module de strat√©gie charg√© (m√©thode 1): {module_name}")
                return strategy_module
            except ImportError:
                logger.debug(f"M√©thode 1 √©chou√©e pour {strategy_name}, tentative m√©thode 2")
            
            # M√©thode 2: Import direct depuis le r√©pertoire
            try:
                module_name = strategy_name
                strategy_module = importlib.import_module(module_name)
                logger.info(f"‚úÖ Module de strat√©gie charg√© (m√©thode 2): {module_name}")
                return strategy_module
            except ImportError:
                logger.debug(f"M√©thode 2 √©chou√©e pour {strategy_name}, tentative m√©thode 3")
            
            # M√©thode 3: Import via spec_from_file_location
            try:
                import importlib.util
                spec = importlib.util.spec_from_file_location(strategy_name, strategy_file)
                strategy_module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(strategy_module)
                logger.info(f"‚úÖ Module de strat√©gie charg√© (m√©thode 3): {strategy_name}")
                return strategy_module
            except Exception as e:
                logger.debug(f"M√©thode 3 √©chou√©e pour {strategy_name}: {str(e)}")
            
            logger.error(f"‚ùå Toutes les m√©thodes d'import ont √©chou√© pour {strategy_name}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur inattendue lors du chargement de la strat√©gie {strategy_name}: {str(e)}")
            return None
    
    def get_strategy_class(self, strategy_module: Any, strategy_type: str) -> Optional[type]:
        """
        Trouve la classe de strat√©gie dans un module.
        
        Args:
            strategy_module: Module contenant la strat√©gie
            strategy_type: Type de strat√©gie (ex: 'RSIStrategy', 'BollingerStrategy')
            
        Returns:
            Classe de strat√©gie ou None si non trouv√©e
        """
        try:
            # Parcourir toutes les classes du module
            for name, obj in inspect.getmembers(strategy_module, inspect.isclass):
                # Rechercher la classe qui correspond au type de strat√©gie
                if name == strategy_type:
                    # V√©rifier que c'est une sous-classe de BaseStrategy
                    if hasattr(obj, '__bases__') and any('BaseStrategy' in str(base) for base in obj.__bases__):
                        return obj
            
            logger.warning(f"‚ö†Ô∏è Classe de strat√©gie '{strategy_type}' non trouv√©e dans le module")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la recherche de la classe de strat√©gie: {str(e)}")
            return None
    
    def get_strategy_instance(self, strategy_name: str, symbol: str, params: Dict[str, Any]) -> Optional[Any]:
        """
        Cr√©e une instance de strat√©gie avec des param√®tres sp√©cifiques.
        
        Args:
            strategy_name: Nom de la strat√©gie (ex: 'rsi' pour le fichier rsi.py)
            symbol: Symbole de trading
            params: Param√®tres √† utiliser pour l'instance
            
        Returns:
            Instance de strat√©gie ou None en cas d'√©chec
        """
        # D√©terminer le nom de classe de strat√©gie √† partir du nom de strat√©gie
        class_name_map = {
            'rsi': 'RSIStrategy',
            'bollinger': 'BollingerStrategy',
            'ema_cross': 'EMACrossStrategy',
            'breakout': 'BreakoutStrategy',
            'reversal_divergence': 'ReversalDivergenceStrategy',
            'ride_or_react': 'RideOrReactStrategy'
        }
        
        if strategy_name not in class_name_map:
            logger.error(f"‚ùå Nom de strat√©gie non reconnu: {strategy_name}")
            return None
        
        class_name = class_name_map[strategy_name]
        
        try:
            # Charger le module de strat√©gie
            strategy_module = self.load_strategy_module(strategy_name)
            if not strategy_module:
                return None
            
            # Obtenir la classe de strat√©gie
            strategy_class = self.get_strategy_class(strategy_module, class_name)
            if not strategy_class:
                return None
            
            # Cr√©er l'instance
            strategy_instance = strategy_class(symbol=symbol, params=params)
            
            logger.info(f"‚úÖ Instance de strat√©gie cr√©√©e: {class_name} pour {symbol}")
            return strategy_instance
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation de l'instance de strat√©gie: {str(e)}")
            return None
    
    def get_market_data(self, symbol: str, days: int = 30) -> Optional[pd.DataFrame]:
        """
        R√©cup√®re les donn√©es de march√© pour un symbole.
        
        Args:
            symbol: Symbole de trading
            days: Nombre de jours de donn√©es √† r√©cup√©rer
            
        Returns:
            DataFrame avec les donn√©es de march√© ou None en cas d'√©chec
        """
        if not self._ensure_connection():
            logger.error("‚ùå Impossible de r√©cup√©rer les donn√©es de march√©: pas de connexion √† la base de donn√©es")
            return None
        
        try:
            with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:
                # Requ√™te pour les donn√©es de march√©
                query = """
                SELECT 
                    time,
                    symbol,
                    open,
                    high,
                    low,
                    close,
                    volume
                FROM 
                    market_data
                WHERE 
                    symbol = %s
                    AND time >= NOW() - INTERVAL '%s days'
                ORDER BY 
                    time
                """
                
                cursor.execute(query, (symbol, days))
                results = cursor.fetchall()
                
                if not results:
                    logger.warning(f"‚ö†Ô∏è Aucune donn√©e de march√© trouv√©e pour {symbol}")
                    return None
                
                # Convertir en DataFrame
                df = pd.DataFrame(results)
                
                # D√©finir le timestamp comme index
                df['time'] = pd.to_datetime(df['time'])
                df.set_index('time', inplace=True)
                
                # Convertir les colonnes num√©riques en float
                numeric_cols = ['open', 'high', 'low', 'close', 'volume']
                for col in numeric_cols:
                    df[col] = df[col].astype(float)
                
                return df
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es de march√©: {str(e)}")
            return None
    
    def convert_to_market_data_format(self, df: pd.DataFrame) -> List[Dict[str, Any]]:
        """
        Convertit un DataFrame en liste de dictionnaires au format attendu par les strat√©gies.
        
        Args:
            df: DataFrame avec les donn√©es de march√©
            
        Returns:
            Liste de dictionnaires au format standard
        """
        market_data = []
        
        for idx, row in df.iterrows():
            data = {
                'symbol': row['symbol'],
                'start_time': int(idx.timestamp() * 1000),  # Timestamp en millisecondes
                'close_time': int((idx + pd.Timedelta(minutes=1)).timestamp() * 1000),
                'open': float(row['open']),
                'high': float(row['high']),
                'low': float(row['low']),
                'close': float(row['close']),
                'volume': float(row['volume']),
                'is_closed': True  # Consid√©rer toutes les donn√©es comme ferm√©es pour le backtest
            }
            market_data.append(data)
        
        return market_data
    
    def backtest_strategy(self, strategy_instance: Any, market_data: List[Dict[str, Any]], 
                         use_stop_loss: bool = True, use_take_profit: bool = True) -> Dict[str, Any]:
        """
        Effectue un backtest d'une strat√©gie sur des donn√©es historiques.
        
        Args:
            strategy_instance: Instance de la strat√©gie √† tester
            market_data: Donn√©es de march√© au format standard
            use_stop_loss: Activer les stop loss dans le backtest
            use_take_profit: Activer les take profit dans le backtest
            
        Returns:
            R√©sultats du backtest
        """
        # Initialiser les r√©sultats
        results = {
            "trades": [],
            "signals": [],
            "pnl": 0.0,
            "win_rate": 0.0,
            "profit_factor": 0.0,
            "avg_profit": 0.0,
            "max_drawdown": 0.0,
            "sharpe_ratio": 0.0
        }
        
        try:
            # R√©initialiser la strat√©gie
            strategy_instance.data_buffer.clear()
            
            # √âtat du trading
            in_position = False
            entry_price = 0.0
            entry_time = None
            position_type = None
            stop_loss = None
            take_profit = None
            
            # Statistiques
            trades = []
            signals = []
            equity_curve = [1000.0]  # Commencer avec 1000 unit√©s
            
            # Ajouter les donn√©es dans l'ordre chronologique
            for data in market_data:
                # Ajouter les donn√©es √† la strat√©gie
                strategy_instance.add_market_data(data)
                
                # V√©rifier les stop loss et take profit si en position
                if in_position and position_type == "LONG":
                    current_price = data['close']
                    current_time = datetime.fromtimestamp(data['start_time'] / 1000)
                    
                    # V√©rifier si le stop loss est atteint
                    if use_stop_loss and stop_loss is not None and current_price <= stop_loss:
                        # Ex√©cuter le stop loss
                        exit_price = stop_loss
                        exit_time = current_time
                        pnl_percent = (exit_price - entry_price) / entry_price * 100
                        
                        # Enregistrer le trade
                        trade = {
                            "entry_time": entry_time,
                            "exit_time": exit_time,
                            "entry_price": entry_price,
                            "exit_price": exit_price,
                            "pnl_percent": pnl_percent,
                            "type": position_type,
                            "exit_reason": "stop_loss"
                        }
                        trades.append(trade)
                        
                        # Mettre √† jour l'equity curve
                        last_equity = equity_curve[-1]
                        new_equity = last_equity * (1 + pnl_percent / 100)
                        equity_curve.append(new_equity)
                        
                        # R√©initialiser l'√©tat
                        in_position = False
                        entry_price = 0.0
                        entry_time = None
                        position_type = None
                        stop_loss = None
                        take_profit = None
                        continue
                    
                    # V√©rifier si le take profit est atteint
                    if use_take_profit and take_profit is not None and current_price >= take_profit:
                        # Ex√©cuter le take profit
                        exit_price = take_profit
                        exit_time = current_time
                        pnl_percent = (exit_price - entry_price) / entry_price * 100
                        
                        # Enregistrer le trade
                        trade = {
                            "entry_time": entry_time,
                            "exit_time": exit_time,
                            "entry_price": entry_price,
                            "exit_price": exit_price,
                            "pnl_percent": pnl_percent,
                            "type": position_type,
                            "exit_reason": "take_profit"
                        }
                        trades.append(trade)
                        
                        # Mettre √† jour l'equity curve
                        last_equity = equity_curve[-1]
                        new_equity = last_equity * (1 + pnl_percent / 100)
                        equity_curve.append(new_equity)
                        
                        # R√©initialiser l'√©tat
                        in_position = False
                        entry_price = 0.0
                        entry_time = None
                        position_type = None
                        stop_loss = None
                        take_profit = None
                        continue
                
                # G√©n√©rer des signaux
                signal = strategy_instance.analyze()
                
                if signal:
                    signals.append({
                        "time": datetime.fromtimestamp(data['start_time'] / 1000),
                        "price": data['close'],
                        "side": signal.side.value
                    })
                    
                    # Simuler l'ex√©cution du signal
                    if signal.side == OrderSide.BUY and not in_position:
                        # Ouvrir une position longue
                        in_position = True
                        entry_price = data['close']
                        entry_time = datetime.fromtimestamp(data['start_time'] / 1000)
                        position_type = "LONG"
                        
                        # D√©finir stop loss et take profit si fournis dans le signal
                        if use_stop_loss and 'stop_price' in signal.metadata:
                            stop_loss = float(signal.metadata['stop_price'])
                        else:
                            stop_loss = entry_price * 0.95  # 5% par d√©faut
                            
                        if use_take_profit and 'target_price' in signal.metadata:
                            take_profit = float(signal.metadata['target_price'])
                        else:
                            take_profit = entry_price * 1.10  # 10% par d√©faut
                    
                    elif signal.side == OrderSide.SELL and in_position and position_type == "LONG":
                        # Fermer une position longue
                        exit_price = data['close']
                        exit_time = datetime.fromtimestamp(data['start_time'] / 1000)
                        pnl_percent = (exit_price - entry_price) / entry_price * 100
                        
                        # Enregistrer le trade
                        trade = {
                            "entry_time": entry_time,
                            "exit_time": exit_time,
                            "entry_price": entry_price,
                            "exit_price": exit_price,
                            "pnl_percent": pnl_percent,
                            "type": position_type,
                            "exit_reason": "signal"
                        }
                        trades.append(trade)
                        
                        # Mettre √† jour l'equity curve
                        last_equity = equity_curve[-1]
                        new_equity = last_equity * (1 + pnl_percent / 100)
                        equity_curve.append(new_equity)
                        
                        # R√©initialiser l'√©tat
                        in_position = False
                        entry_price = 0.0
                        entry_time = None
                        position_type = None
                    
                    elif signal.side == OrderSide.SELL and not in_position:
                        # Ouvrir une position courte (si autoris√©)
                        # Note: Pour certains syst√®mes, les positions courtes ne sont pas autoris√©es
                        # Dans ce cas, ignorer ce signal
                        pass
            
            # Fermer toute position ouverte √† la fin de la p√©riode
            if in_position:
                exit_price = market_data[-1]['close']
                exit_time = datetime.fromtimestamp(market_data[-1]['start_time'] / 1000)
                
                if position_type == "LONG":
                    pnl_percent = (exit_price - entry_price) / entry_price * 100
                else:
                    pnl_percent = (entry_price - exit_price) / entry_price * 100
                
                # Enregistrer le trade
                trade = {
                    "entry_time": entry_time,
                    "exit_time": exit_time,
                    "entry_price": entry_price,
                    "exit_price": exit_price,
                    "pnl_percent": pnl_percent,
                    "type": position_type,
                    "exit_reason": "end_of_period"
                }
                trades.append(trade)
                
                # Mettre √† jour l'equity curve
                last_equity = equity_curve[-1]
                new_equity = last_equity * (1 + pnl_percent / 100)
                equity_curve.append(new_equity)
            
            # Calculer les m√©triques
            if trades:
                # PnL total
                pnl = sum(trade["pnl_percent"] for trade in trades)
                
                # Win rate
                winning_trades = sum(1 for trade in trades if trade["pnl_percent"] > 0)
                win_rate = winning_trades / len(trades) * 100
                
                # Profit factor
                gross_profit = sum(trade["pnl_percent"] for trade in trades if trade["pnl_percent"] > 0)
                gross_loss = abs(sum(trade["pnl_percent"] for trade in trades if trade["pnl_percent"] < 0))
                profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
                
                # Profit moyen par trade
                avg_profit = pnl / len(trades)
                
                # Maximum drawdown
                max_dd_percent = 0.0
                peak = equity_curve[0]
                
                for equity in equity_curve:
                    if equity > peak:
                        peak = equity
                    dd = (peak - equity) / peak * 100
                    max_dd_percent = max(max_dd_percent, dd)
                
                # Sharpe ratio
                equity_returns = [(equity_curve[i] / equity_curve[i-1] - 1) for i in range(1, len(equity_curve))]
                if equity_returns and np.std(equity_returns) > 0:
                    sharpe_ratio = np.mean(equity_returns) / np.std(equity_returns) * np.sqrt(252)  # Annualis√©
                else:
                    sharpe_ratio = 0.0
                
                # Mettre √† jour les r√©sultats
                results.update({
                    "trades": trades,
                    "signals": signals,
                    "pnl": pnl,
                    "win_rate": win_rate,
                    "profit_factor": profit_factor,
                    "avg_profit": avg_profit,
                    "max_drawdown": max_dd_percent,
                    "sharpe_ratio": sharpe_ratio,
                    "total_trades": len(trades),
                    "equity_curve": equity_curve
                })
            
            return results
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du backtest de la strat√©gie: {str(e)}")
            return results
    
    def objective_function(self, params: List[float], 
                         strategy_name: str, symbol: str, 
                         market_data: List[Dict[str, Any]],
                         param_names: List[str]) -> float:
        """
        Fonction objectif pour l'optimisation des param√®tres.
        
        Args:
            params: Valeurs des param√®tres √† tester
            strategy_name: Nom de la strat√©gie
            symbol: Symbole de trading
            market_data: Donn√©es de march√©
            param_names: Noms des param√®tres
            
        Returns:
            Score n√©gatif (pour minimisation)
        """
        # Convertir la liste de param√®tres en dictionnaire
        params_dict = {param_names[i]: params[i] for i in range(len(params))}
        
        # Cr√©er une instance de strat√©gie avec ces param√®tres
        strategy_instance = self.get_strategy_instance(strategy_name, symbol, params_dict)
        
        if not strategy_instance:
            return float('inf')  # Retourner une valeur tr√®s √©lev√©e en cas d'√©chec
        
        # Ex√©cuter le backtest
        results = self.backtest_strategy(strategy_instance, market_data)
        
        # Calculer un score composite (√† minimiser, donc n√©gatif)
        # Le score peut √™tre ajust√© en fonction des priorit√©s
        score = 0.0
        
        # Le PnL est la m√©trique principale
        if results["pnl"] != 0:
            score -= results["pnl"]
        
        # P√©naliser un faible nombre de trades
        if results["total_trades"] < 5:
            score += (5 - results["total_trades"]) * 10
        
        # P√©naliser un drawdown √©lev√©
        score += results["max_drawdown"] * 0.5
        
        # Bonus pour un bon ratio de Sharpe
        if results["sharpe_ratio"] > 0:
            score -= results["sharpe_ratio"] * 5
        
        return score
    
    def optimize_strategy_params(self, strategy_name: str, symbol: str, 
                              param_ranges: Dict[str, Tuple[float, float]],
                              days: int = 90,
                              method: str = 'L-BFGS-B') -> Dict[str, Any]:
        """
        Optimise les param√®tres d'une strat√©gie pour un symbole donn√©.
        
        Args:
            strategy_name: Nom de la strat√©gie
            symbol: Symbole de trading
            param_ranges: Plages de valeurs pour chaque param√®tre
            days: Nombre de jours de donn√©es √† utiliser
            method: M√©thode d'optimisation √† utiliser ('L-BFGS-B', 'SLSQP', 'Powell')
            
        Returns:
            R√©sultats de l'optimisation
        """
        logger.info(f"Optimisation de la strat√©gie {strategy_name} pour {symbol}...")
        
        # R√©cup√©rer les donn√©es de march√©
        df = self.get_market_data(symbol, days)
        if df is None:
            logger.error(f"‚ùå Pas de donn√©es de march√© disponibles pour {symbol}")
            return {"success": False, "error": "Pas de donn√©es disponibles"}
        
        # Convertir en format standard
        market_data = self.convert_to_market_data_format(df)
        
        # Pr√©parer les param√®tres pour l'optimisation
        param_names = list(param_ranges.keys())
        param_bounds = [param_ranges[param] for param in param_names]
        
        # Param√®tres initiaux (milieu de chaque plage)
        initial_params = [(bounds[0] + bounds[1]) / 2 for bounds in param_bounds]
        
        try:
            # D√©finir la fonction objectif
            obj_func = lambda p: self.objective_function(p, strategy_name, symbol, market_data, param_names)
            
            # Ex√©cuter l'optimisation
            result = minimize(
                obj_func,
                initial_params,
                bounds=param_bounds,
                method=method
            )
            
            # R√©cup√©rer les param√®tres optimaux
            optimized_params = {param_names[i]: result.x[i] for i in range(len(param_names))}
            
            # Cr√©er une instance avec les param√®tres optimis√©s
            strategy_instance = self.get_strategy_instance(strategy_name, symbol, optimized_params)
            
            # Ex√©cuter un backtest final avec les param√®tres optimis√©s
            backtest_results = self.backtest_strategy(strategy_instance, market_data)
            
            # Pr√©parer les r√©sultats
            optimization_results = {
                "success": True,
                "strategy": strategy_name,
                "symbol": symbol,
                "optimized_params": optimized_params,
                "backtest_results": backtest_results,
                "optimization_info": {
                    "param_ranges": param_ranges,
                    "data_period_days": days,
                    "total_data_points": len(market_data),
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            # Sauvegarder les r√©sultats
            self._save_optimization_results(optimization_results)
            
            logger.info(f"‚úÖ Optimisation termin√©e pour {strategy_name} ({symbol})")
            logger.info(f"Param√®tres optimis√©s: {optimized_params}")
            logger.info(f"PnL: {backtest_results['pnl']:.2f}%, Win Rate: {backtest_results['win_rate']:.2f}%")
            
            return optimization_results
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'optimisation de la strat√©gie: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def _save_optimization_results(self, results: Dict[str, Any]) -> str:
        """
        Sauvegarde les r√©sultats d'optimisation dans un fichier.
        
        Args:
            results: R√©sultats de l'optimisation
            
        Returns:
            Chemin du fichier sauvegard√©
        """
        strategy = results["strategy"]
        symbol = results["symbol"]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Cr√©er le nom du fichier
        filename = f"{strategy}_{symbol}_{timestamp}.json"
        filepath = os.path.join(self.results_dir, filename)
        
        # Sauvegarder au format JSON
        try:
            with open(filepath, 'w') as f:
                # Convertir les valeurs numpy en Python natif
                def convert_numpy(obj):
                    if isinstance(obj, np.ndarray):
                        return obj.tolist()
                    elif isinstance(obj, np.float64) or isinstance(obj, np.float32):
                        return float(obj)
                    elif isinstance(obj, np.int64) or isinstance(obj, np.int32):
                        return int(obj)
                    elif isinstance(obj, dict):
                        return {k: convert_numpy(v) for k, v in obj.items()}
                    elif isinstance(obj, list):
                        return [convert_numpy(item) for item in obj]
                    elif isinstance(obj, datetime):
                        return obj.isoformat()
                    else:
                        return obj
                
                # Convertir les r√©sultats et enregistrer
                clean_results = convert_numpy(results)
                json.dump(clean_results, f, indent=2)
                
            logger.info(f"‚úÖ R√©sultats d'optimisation sauvegard√©s dans {filepath}")
            return filepath
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde des r√©sultats: {str(e)}")
            return ""