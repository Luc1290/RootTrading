"""
Point d'entr√©e principal pour le microservice PnL Tracker.
Suit et analyse les performances de trading.
"""
import logging
import signal
import sys
import time
import os
import threading
import argparse
from typing import Dict, Any

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.config import LOG_LEVEL
from pnl_tracker.src.pnl_logger import PnLLogger
from pnl_tracker.src.strategy_tuner import StrategyTuner

# Configuration du logging
log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('pnl_tracker.log')
    ]
)
logger = logging.getLogger("pnl_tracker")

# Variables pour le contr√¥le du service
pnl_logger = None
strategy_tuner = None
running = True

def signal_handler(signum, frame):
    """
    Gestionnaire de signal pour l'arr√™t propre.
    
    Args:
        signum: Num√©ro du signal
        frame: Frame actuelle
    """
    global running
    logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
    running = False

def parse_arguments():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(description='PnL Tracker et Strategy Tuner')
    parser.add_argument(
        '--export-dir', 
        type=str, 
        default='./exports',
        help='R√©pertoire pour l\'export des donn√©es'
    )
    parser.add_argument(
        '--results-dir', 
        type=str, 
        default='./tuning_results',
        help='R√©pertoire pour les r√©sultats d\'optimisation'
    )
    parser.add_argument(
        '--update-interval', 
        type=int, 
        default=3600,
        help='Intervalle de mise √† jour des statistiques (en secondes)'
    )
    parser.add_argument(
        '--no-tuning', 
        action='store_true', 
        help='D√©sactive l\'optimisation des strat√©gies'
    )
    return parser.parse_args()

def run_strategy_optimization(tuner: StrategyTuner) -> None:
    """
    Ex√©cute une optimisation p√©riodique des strat√©gies.
    
    Args:
        tuner: Instance du tuner de strat√©gies
    """
    # Liste des strat√©gies √† optimiser
    strategies_to_tune = [
        {"name": "rsi", "param_ranges": {"window": (7, 21), "overbought": (65, 85), "oversold": (15, 35)}},
        {"name": "bollinger", "param_ranges": {"window": (10, 30), "num_std": (1.5, 3.0)}},
        {"name": "ema_cross", "param_ranges": {"short_window": (3, 10), "long_window": (15, 30)}},
    ]
    
    # Liste des symboles pour l'optimisation
    symbols = ["BTCUSDC", "ETHUSDC"]
    
    try:
        logger.info("D√©marrage de l'optimisation des strat√©gies...")
        
        for symbol in symbols:
            for strategy in strategies_to_tune:
                try:
                    logger.info(f"Optimisation de {strategy['name']} pour {symbol}...")
                    
                    results = tuner.optimize_strategy_params(
                        strategy_name=strategy["name"],
                        symbol=symbol,
                        param_ranges=strategy["param_ranges"],
                        days=90  # Optimiser sur 90 jours de donn√©es
                    )
                    
                    if results.get("success", False):
                        logger.info(f"‚úÖ Optimisation r√©ussie pour {strategy['name']} ({symbol})")
                        logger.info(f"Param√®tres optimis√©s: {results['optimized_params']}")
                        logger.info(f"PnL: {results['backtest_results']['pnl']:.2f}%, "
                                  f"Win Rate: {results['backtest_results']['win_rate']:.2f}%")
                    else:
                        logger.warning(f"‚ö†Ô∏è √âchec de l'optimisation pour {strategy['name']} ({symbol}): {results.get('error', 'Erreur inconnue')}")
                
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de l'optimisation de {strategy['name']} pour {symbol}: {str(e)}")
        
        logger.info("Optimisation des strat√©gies termin√©e")
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'optimisation des strat√©gies: {str(e)}")

def main():
    """
    Fonction principale du service PnL Tracker.
    """
    global pnl_logger, strategy_tuner, running
    
    # Parser les arguments
    args = parse_arguments()
    
    # Configurer les gestionnaires de signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ D√©marrage du service PnL Tracker RootTrading...")
    
    # Cr√©er les r√©pertoires s'ils n'existent pas
    os.makedirs(args.export_dir, exist_ok=True)
    os.makedirs(args.results_dir, exist_ok=True)
    
    # Variables pour tracker les exports
    last_daily_export_date = None
    last_hourly_export_hour = None
    
    try:
        # Initialiser le logger PnL
        pnl_logger = PnLLogger(export_dir=args.export_dir)
        
        # G√©rer les erreurs potentielles lors du premier calcul
        try:
            pnl_logger.update_stats()
            logger.info("‚úÖ Statistiques initiales calcul√©es")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du calcul des statistiques initiales: {str(e)}")
            logger.info("Continuons avec des statistiques vides")
        
        # D√©marrer le thread de mise √† jour des statistiques
        try:
            pnl_logger.start_update_thread(interval=args.update_interval)
            logger.info(f"‚úÖ Thread de mise √† jour d√©marr√© (intervalle: {args.update_interval}s)")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage du thread de mise √† jour: {str(e)}")
        
        # Initialiser le tuner de strat√©gies si activ√©
        if not args.no_tuning:
            try:
                strategy_tuner = StrategyTuner(results_dir=args.results_dir)
                logger.info("‚úÖ Strategy Tuner initialis√©")
                
                # Planifier une optimisation toutes les 24 heures
                last_optimization_time = 0
                optimization_interval = 24 * 3600  # 24 heures
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation du Strategy Tuner: {str(e)}")
                strategy_tuner = None
        else:
            logger.info("Optimisation des strat√©gies d√©sactiv√©e")
        
        logger.info("‚úÖ Service PnL Tracker d√©marr√©")
        
        # Tenter d'exporter des statistiques pour tester la fonctionnalit√©
        try:
            export_path = pnl_logger.export_stats_to_csv()
            if export_path:
                logger.info(f"Test d'exportation r√©ussi: {export_path}")
            else:
                logger.warning("‚ö†Ô∏è Test d'exportation: aucun fichier g√©n√©r√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test d'exportation: {str(e)}")
        
        # Boucle principale pour garder le service actif
        while running:
            time.sleep(1)
            
            # Exporter les statistiques p√©riodiquement (tous les jours √† minuit)
            current_time = time.time()
            current_datetime = time.localtime(current_time)
            current_date = time.strftime("%Y-%m-%d", current_datetime)
            
            # Export horaire (toutes les heures)
            current_hour = current_datetime.tm_hour
            if current_datetime.tm_min == 0 and last_hourly_export_hour != current_hour:
                try:
                    logger.info(f"üìä Export horaire des statistiques PnL ({current_hour}h)")
                    
                    # Nom de fichier avec l'heure
                    timestamp = time.strftime("%Y%m%d_%H", current_datetime)
                    hourly_filename = f"pnl_stats_hourly_{timestamp}.xlsx"
                    
                    # Exporter les statistiques
                    export_path = pnl_logger.export_stats_to_csv(filename=hourly_filename)
                    if export_path:
                        logger.info(f"‚úÖ Export horaire r√©ussi: {export_path}")
                    
                    # Marquer l'export comme effectu√© pour cette heure
                    last_hourly_export_hour = current_hour
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de l'export horaire: {str(e)}")
            
            # √Ä minuit, exporter les statistiques compl√®tes (une seule fois par jour)
            if current_datetime.tm_hour == 0 and current_datetime.tm_min == 0 and last_daily_export_date != current_date:
                try:
                    logger.info(f"üïê D√©clenchement de l'export quotidien pour {current_date}")
                    
                    # Exporter les statistiques
                    export_path = pnl_logger.export_stats_to_csv()
                    if export_path:
                        logger.info(f"‚úÖ Statistiques PnL export√©es vers: {export_path}")
                    
                    # Exporter l'historique des trades
                    try:
                        history_path = pnl_logger.export_trade_history(days=90)
                        if history_path:
                            logger.info(f"‚úÖ Historique des trades export√© vers: {history_path}")
                    except Exception as inner_e:
                        logger.error(f"‚ùå Erreur lors de l'exportation de l'historique: {str(inner_e)}")
                    
                    # Marquer l'export comme effectu√© pour aujourd'hui
                    last_daily_export_date = current_date
                    logger.info(f"‚úÖ Export quotidien termin√© pour {current_date}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de l'exportation p√©riodique: {str(e)}")
            
            # Ex√©cuter l'optimisation des strat√©gies p√©riodiquement
            if strategy_tuner and not args.no_tuning and current_time - last_optimization_time > optimization_interval:
                try:
                    # Lancer l'optimisation dans un thread s√©par√©
                    optimization_thread = threading.Thread(
                        target=run_strategy_optimization,
                        args=(strategy_tuner,),
                        daemon=True
                    )
                    optimization_thread.start()
                    
                    # Mettre √† jour le timestamp d'optimisation
                    last_optimization_time = current_time
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du lancement de l'optimisation: {str(e)}")
    
    except KeyboardInterrupt:
        logger.info("Programme interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans le service PnL Tracker: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # Arr√™ter le logger PnL
        if pnl_logger:
            try:
                pnl_logger.stop_update_thread()
                pnl_logger.close()
                logger.info("Service PnL Tracker arr√™t√© proprement")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'arr√™t du PnL Logger: {str(e)}")
        
        logger.info("Service PnL Tracker termin√©")

if __name__ == "__main__":
    main()