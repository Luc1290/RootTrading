"""
Gestionnaire d'ordres pour le trader.
Re√ßoit les signaux, les valide, et cr√©e des cycles de trading.
"""
import logging
import threading
import json
import time
from typing import Dict, List, Any, Optional, Union
from datetime import datetime
import queue

# Importer les modules partag√©s
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.config import SYMBOLS, TRADE_QUANTITY
from shared.src.redis_client import RedisClient
from shared.src.enums import OrderSide, SignalStrength, CycleStatus  # Ajout de CycleStatus
from shared.src.schemas import StrategySignal, TradeOrder

from trader.src.cycle_manager import CycleManager
from trader.src.binance_executor import BinanceExecutor

# Configuration du logging
logger = logging.getLogger(__name__)

class OrderManager:
    """
    Gestionnaire d'ordres.
    Re√ßoit les signaux de trading, les valide, et cr√©e des cycles de trading.
    """
    
    def __init__(self, symbols: List[str] = None, redis_client: RedisClient = None, 
                 cycle_manager: CycleManager = None):
        """
        Initialise le gestionnaire d'ordres.
        
        Args:
            symbols: Liste des symboles √† surveiller
            redis_client: Client Redis pr√©existant (optionnel)
            cycle_manager: Gestionnaire de cycles pr√©existant (optionnel)
        """
        self.symbols = symbols or SYMBOLS
        self.redis_client = redis_client or RedisClient()
        self.cycle_manager = cycle_manager or CycleManager()
        
        # Configuration du canal Redis pour les signaux
        self.signal_channel = "roottrading:analyze:signal"
        
        # Configuration du canal Redis pour les mises √† jour de prix
        self.price_channels = [f"roottrading:market:data:{symbol.lower()}" for symbol in self.symbols]
        
        # File d'attente thread-safe pour les signaux
        self.signal_queue = queue.Queue()
        
        # Dictionnaire pour stocker les derniers prix par symbole
        self.last_prices: Dict[str, float] = {}
        
        # Thread pour le traitement des signaux
        self.processing_thread = None
        self.stop_event = threading.Event()
        
        # Thread pour le traitement des mises √† jour de prix
        self.price_thread = None
        
        logger.info(f"‚úÖ OrderManager initialis√© pour {len(self.symbols)} symboles: {', '.join(self.symbols)}")
    
    def _process_signal(self, channel: str, data: Dict[str, Any]) -> None:
        """
        Callback pour traiter les signaux re√ßus de Redis.
        Ajoute les signaux √† la file d'attente pour traitement.
        
        Args:
            channel: Canal Redis d'o√π provient le signal
            data: Donn√©es du signal
        """
        try:
            # Valider le signal avec Pydantic
            signal = StrategySignal(**data)
            
            # Ajouter √† la file d'attente pour traitement
            self.signal_queue.put(signal)
            
            logger.info(f"üì® Signal re√ßu: {signal.side} {signal.symbol} @ {signal.price} ({signal.strategy})")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement du signal: {str(e)}")
    
    def _process_price_update(self, channel: str, data: Dict[str, Any]) -> None:
        """
        Callback pour traiter les mises √† jour de prix re√ßues de Redis.
        Met √† jour les derniers prix et v√©rifie les stop-loss/take-profit.
        
        Args:
            channel: Canal Redis d'o√π provient la mise √† jour
            data: Donn√©es de prix
        """
        try:
            # Ne traiter que les chandeliers ferm√©s
            if not data.get('is_closed', False):
                return
            
            symbol = data.get('symbol')
            price = data.get('close')
            
            if not symbol or price is None:
                return
            
            # Mettre √† jour le dernier prix
            self.last_prices[symbol] = price
            
            # Traiter la mise √† jour de prix dans le gestionnaire de cycles
            self.cycle_manager.process_price_update(symbol, price)
            
            logger.debug(f"üí∞ Prix mis √† jour: {symbol} @ {price}")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement de la mise √† jour de prix: {str(e)}")
    
    def _signal_processing_loop(self) -> None:
        """
        Boucle de traitement des signaux de trading.
        Cette m√©thode s'ex√©cute dans un thread s√©par√©.
        """
        logger.info("D√©marrage de la boucle de traitement des signaux")
        
        while not self.stop_event.is_set():
            try:
                # R√©cup√©rer un signal de la file d'attente avec timeout
                try:
                    signal = self.signal_queue.get(timeout=1.0)
                except queue.Empty:
                    continue
                
                # Traiter le signal
                self._handle_signal(signal)
                
                # Marquer la t√¢che comme termin√©e
                self.signal_queue.task_done()
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de traitement des signaux: {str(e)}")
                time.sleep(1)  # Pause pour √©viter une boucle d'erreur infinie
        
        logger.info("Boucle de traitement des signaux arr√™t√©e")

    # Calculer le pourcentage minimal de changement de prix n√©cessaire pour √™tre rentable
    def calculate_min_profitable_change(self, symbol: str) -> float:
        """
        Calcule le pourcentage minimal de changement de prix n√©cessaire pour √™tre rentable,
        en tenant compte des frais d'achat et de vente.
    
        Args:
            symbol: Le symbole de la paire de trading
        
        Returns:
            Le pourcentage minimal n√©cessaire (ex: 0.3 pour 0.3%)
        """
        maker_fee, taker_fee = self.binance_executor.get_trade_fee(symbol)
    
        # Calculer l'impact total des frais (achat + vente)
        # Pour √™tre s√ªr, on consid√®re les frais taker qui sont g√©n√©ralement plus √©lev√©s
        total_fee_impact = (1 + taker_fee) * (1 + taker_fee) - 1
    
        # Ajouter une petite marge de s√©curit√© (20% suppl√©mentaire)
        min_profitable_change = total_fee_impact * 1.2 * 100  # Convertir en pourcentage
    
        return min_profitable_change
    
    def _handle_signal(self, signal: StrategySignal) -> None:
        """
        Traite un signal de trading et cr√©e un cycle si n√©cessaire.
        
        Args:
            signal: Signal de trading √† traiter
        """
        try:
            # V√©rifier si le symbole est support√©
            if signal.symbol not in self.symbols:
                logger.warning(f"‚ö†Ô∏è Signal ignor√©: symbole non support√© {signal.symbol}")
                return
            
            # V√©rifier si le signal est assez fort
            if signal.strength in [SignalStrength.WEAK]:
                logger.info(f"‚ö†Ô∏è Signal ignor√©: force insuffisante ({signal.strength})")
                return
            
            # R√©cup√©rer le dernier prix du symbole (utiliser le prix du signal si non disponible)
            current_price = self.last_prices.get(signal.symbol, signal.price)
            
            # Calculer la quantit√© √† trader (utiliser la configuration par d√©faut)
            quantity = TRADE_QUANTITY
            
            # Calculer les prix cibles et stop-loss
            target_price = None
            stop_price = None
            trailing_delta = None
            
            # Si le signal contient des m√©tadonn√©es sp√©cifiques
            metadata = signal.metadata or {}
            
            # R√©cup√©rer target/stop des m√©tadonn√©es si pr√©sents
            if 'target_price' in metadata:
                target_price = float(metadata['target_price'])
            if 'stop_price' in metadata:
                stop_price = float(metadata['stop_price'])
            if 'trailing_delta' in metadata:
                trailing_delta = float(metadata['trailing_delta'])
            
            # Sinon, calculer des valeurs par d√©faut
            if target_price is None and signal.side == OrderSide.BUY:
                # Pour un achat, cible = prix + 3%
                target_price = current_price * 1.03
            elif target_price is None and signal.side == OrderSide.SELL:
                # Pour une vente, cible = prix - 3%
                target_price = current_price * 0.97
            
            if stop_price is None and signal.side == OrderSide.BUY:
                # Pour un achat, stop = prix - 2%
                stop_price = current_price * 0.98
            elif stop_price is None and signal.side == OrderSide.SELL:
                # Pour une vente, stop = prix + 2%
                stop_price = current_price * 1.02

             # V√©rifier que le gain potentiel est sup√©rieur au seuil minimal
            min_change = self.calculate_min_profitable_change(signal.symbol)
            target_price_percent = abs((target_price - current_price) / current_price * 100)
        
            if target_price_percent < min_change:
                logger.info(f"‚ö†Ô∏è Signal ignor√©: gain potentiel {target_price_percent:.2f}% inf√©rieur au seuil minimal {min_change:.2f}%")
                return
            
            # D√©terminer la poche √† utiliser (par d√©faut: active)
            pocket = metadata.get('pocket', 'active')
            
            # Cr√©er un nouveau cycle de trading
            cycle = self.cycle_manager.create_cycle(
                symbol=signal.symbol,
                strategy=signal.strategy,
                side=signal.side,
                price=current_price,
                quantity=quantity,
                pocket=pocket,
                target_price=target_price,
                stop_price=stop_price,
                trailing_delta=trailing_delta
            )
            
            if cycle:
                logger.info(f"‚úÖ Cycle cr√©√© pour le signal: {cycle.id}")
            else:
                logger.error("‚ùå √âchec de cr√©ation du cycle pour le signal")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement du signal: {str(e)}")
    
    def start(self) -> None:
        """
        D√©marre le gestionnaire d'ordres.
        S'abonne aux canaux Redis et lance les threads de traitement.
        """
        logger.info("üöÄ D√©marrage du gestionnaire d'ordres...")
        
        # R√©initialiser l'√©v√©nement d'arr√™t
        self.stop_event.clear()
        
        # S'abonner au canal des signaux
        self.redis_client.subscribe(self.signal_channel, self._process_signal)
        logger.info(f"‚úÖ Abonn√© au canal Redis des signaux: {self.signal_channel}")
        
        # S'abonner aux canaux des mises √† jour de prix
        self.redis_client.subscribe(self.price_channels, self._process_price_update)
        logger.info(f"‚úÖ Abonn√© aux canaux Redis des prix: {len(self.price_channels)} canaux")
        
        # D√©marrer le thread de traitement des signaux
        self.processing_thread = threading.Thread(
            target=self._signal_processing_loop,
            daemon=True
        )
        self.processing_thread.start()
        
        logger.info("‚úÖ Gestionnaire d'ordres d√©marr√©")
    
    def stop(self) -> None:
        """
        Arr√™te le gestionnaire d'ordres.
        """
        logger.info("Arr√™t du gestionnaire d'ordres...")
        
        # Signaler l'arr√™t aux threads
        self.stop_event.set()
        
        # Attendre que le thread de traitement se termine
        if self.processing_thread and self.processing_thread.is_alive():
            self.processing_thread.join(timeout=5.0)
            logger.info("Thread de traitement des signaux arr√™t√©")
        
        # Se d√©sabonner des canaux Redis
        self.redis_client.unsubscribe()
        
        # Fermer le client Redis
        self.redis_client.close()
        
        # Fermer le gestionnaire de cycles
        self.cycle_manager.close()
        
        logger.info("‚úÖ Gestionnaire d'ordres arr√™t√©")
    
    def create_manual_order(self, symbol: str, side: OrderSide, quantity: float, 
                           price: Optional[float] = None) -> str:
        """
        Cr√©e un ordre manuel (hors signal).
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            side: C√¥t√© de l'ordre (BUY ou SELL)
            quantity: Quantit√© √† trader
            price: Prix (optionnel, sinon au march√©)
            
        Returns:
            ID du cycle cr√©√© ou message d'erreur
        """
        try:
            # V√©rifier si le symbole est support√©
            if symbol not in self.symbols:
                return f"Symbole non support√©: {symbol}"
            
            # Utiliser le dernier prix connu si non sp√©cifi√©
            if price is None:
                price = self.last_prices.get(symbol)
                if price is None:
                    return "Prix non sp√©cifi√© et aucun prix r√©cent disponible"
            
            # Cr√©er un cycle avec la strat√©gie "Manual"
            cycle = self.cycle_manager.create_cycle(
                symbol=symbol,
                strategy="Manual",
                side=side,
                price=price,
                quantity=quantity,
                pocket="active"  # Utiliser la poche active par d√©faut
            )
            
            if cycle:
                return cycle.id
            else:
                return "√âchec de cr√©ation du cycle"
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation de l'ordre manuel: {str(e)}")
            return f"Erreur: {str(e)}"
    
    def get_active_orders(self) -> List[Dict[str, Any]]:
        """
        R√©cup√®re la liste des ordres actifs.
        
        Returns:
            Liste des ordres actifs au format JSON
        """
        active_cycles = self.cycle_manager.get_active_cycles()
        
        # Convertir les cycles en dictionnaires pour JSON
        orders = []
        for cycle in active_cycles:
            orders.append({
                "id": cycle.id,
                "symbol": cycle.symbol,
                "strategy": cycle.strategy,
                "status": cycle.status.value,
                "side": "BUY" if cycle.status in [CycleStatus.ACTIVE_BUY, CycleStatus.WAITING_BUY] else "SELL",
                "entry_price": cycle.entry_price,
                "current_price": self.last_prices.get(cycle.symbol),
                "quantity": cycle.quantity,
                "target_price": cycle.target_price,
                "stop_price": cycle.stop_price,
                "created_at": cycle.created_at.isoformat() if cycle.created_at else None
            })
        
        return orders