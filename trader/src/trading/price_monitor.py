"""
Moniteur de prix pour le trader.
S'occupe de surveiller les prix en temps r√©el et de notifier les changements.
"""
import logging
import threading
import time
from typing import Dict, Callable, List, Optional
from datetime import datetime

from shared.src.redis_client import RedisClient

# Configuration du logging
logger = logging.getLogger(__name__)

class PriceMonitor:
    """
    Moniteur de prix.
    S'abonne aux mises √† jour de prix et les transmet aux composants int√©ress√©s.
    """
    
    def __init__(self, symbols: List[str], price_update_callback: Callable[[str, float], None]):
        """
        Initialise le moniteur de prix.
        
        Args:
            symbols: Liste des symboles √† surveiller
            price_update_callback: Fonction de rappel pour les mises √† jour de prix
        """
        self.symbols = symbols
        self.price_update_callback = price_update_callback
        self.redis_client = RedisClient()
        
        # Configuration des canaux Redis pour les mises √† jour de prix
        self.price_channels = [f"roottrading:market:data:{symbol.lower()}" for symbol in self.symbols]
        
        # Dictionnaire des derniers prix
        self.last_prices: Dict[str, float] = {}
        self.last_update_times: Dict[str, datetime] = {}
        
        # Mutex pour prot√©ger les acc√®s aux prix
        self.price_lock = threading.RLock()
        
        # Thread de v√©rification pour les timeouts
        self.check_thread = None
        self.running = False
        
        logger.info(f"‚úÖ PriceMonitor initialis√© pour {len(self.symbols)} symboles")
    
    def _process_price_update(self, channel: str, data: Dict) -> None:
        """
        Traite une mise √† jour de prix depuis Redis.
        
        Args:
            channel: Canal Redis
            data: Donn√©es de prix
        """
        try:
            # V√©rifier que c'est bien une donn√©e de prix
            if not isinstance(data, dict) or 'symbol' not in data or 'close' not in data:
                return
            
            # Ne traiter que les chandeliers ferm√©s si sp√©cifi√©
            if data.get('is_closed', True) is False and data.get('type') == 'kline':
                return
            
            symbol = data.get('symbol', '').upper()
            price = float(data.get('close', 0))
            
            # Ignorer les prix invalides
            if price <= 0 or symbol not in self.symbols:
                return
            
            # Mettre √† jour le prix
            with self.price_lock:
                old_price = self.last_prices.get(symbol)
                self.last_prices[symbol] = price
                self.last_update_times[symbol] = datetime.now()
            
            # Calculer le pourcentage de changement
            if old_price:
                change_pct = (price - old_price) / old_price * 100
                log_level = logging.INFO if abs(change_pct) >= 0.5 else logging.DEBUG
                logger.log(log_level, f"üìä Prix {symbol}: {price:.2f} ({change_pct:+.2f}%)")
            else:
                logger.info(f"üìä Premier prix {symbol}: {price:.2f}")
            
            # Appeler le callback
            self.price_update_callback(symbol, price)
            
        except Exception as e:
            # Gestion robuste de l'erreur
            error_msg = str(e) if hasattr(e, '__str__') else repr(e)
            logger.error(f"‚ùå Erreur lors du traitement d'une mise √† jour de prix: {error_msg}", exc_info=True)
    
    def _check_price_timeouts(self) -> None:
        """
        V√©rifie les timeouts des prix et g√©n√©rer des alertes si n√©cessaire.
        """
        while self.running:
            try:
                now = datetime.now()
                alerts = []
                
                with self.price_lock:
                    for symbol in self.symbols:
                        last_time = self.last_update_times.get(symbol)
                        if last_time:
                            # V√©rifier si le dernier prix date de plus de 5 minutes
                            elapsed = (now - last_time).total_seconds()
                            if elapsed > 300:  # 5 minutes
                                alerts.append((symbol, elapsed))
                
                # G√©n√©rer des alertes en dehors du lock
                for symbol, elapsed in alerts:
                    logger.warning(f"‚ö†Ô∏è Aucune mise √† jour de prix pour {symbol} depuis {elapsed:.0f} secondes")
                
                # V√©rifier toutes les 60 secondes
                time.sleep(60)
                
            except Exception as e:
                # Gestion robuste de l'erreur
                error_msg = str(e) if hasattr(e, '__str__') else repr(e)
                logger.error(f"‚ùå Erreur dans la v√©rification des timeouts: {error_msg}", exc_info=True)
                time.sleep(10)  # En cas d'erreur, attendre 10 secondes
    
    def start(self) -> None:
        """
        D√©marre le moniteur de prix.
        """
        if self.running:
            logger.warning("Le moniteur de prix est d√©j√† en cours d'ex√©cution")
            return
        
        # D√©marrer la surveillance
        self.running = True
        
        # S'abonner aux canaux Redis et sauvegarder le client_id
        self.client_id = self.redis_client.subscribe(self.price_channels, self._process_price_update)
        logger.info(f"‚úÖ Abonn√© aux canaux de prix: {', '.join(self.price_channels)}")
        
        # D√©marrer le thread de v√©rification des timeouts
        self.check_thread = threading.Thread(
            target=self._check_price_timeouts,
            daemon=True,
            name="PriceTimeoutChecker"
        )
        self.check_thread.start()
        
        logger.info("‚úÖ Moniteur de prix d√©marr√©")
    
    def stop(self) -> None:
        """
        Arr√™te le moniteur de prix.
        """
        if not self.running:
            return
        
        logger.info("Arr√™t du moniteur de prix...")
        self.running = False
        
        # Se d√©sabonner des canaux Redis
        if hasattr(self, 'client_id') and self.client_id:
            self.redis_client.unsubscribe(self.client_id)
        self.redis_client.close()
        
        # Attendre la fin du thread de v√©rification
        if self.check_thread and self.check_thread.is_alive():
            self.check_thread.join(timeout=5.0)
        
        logger.info("‚úÖ Moniteur de prix arr√™t√©")
    
    def get_last_price(self, symbol: str) -> Optional[float]:
        """
        R√©cup√®re le dernier prix connu pour un symbole.
        
        Args:
            symbol: Symbole √† r√©cup√©rer
            
        Returns:
            Dernier prix ou None si non disponible
        """
        with self.price_lock:
            return self.last_prices.get(symbol)
    
    def get_all_prices(self) -> Dict[str, float]:
        """
        R√©cup√®re tous les derniers prix connus.
        
        Returns:
            Dictionnaire des derniers prix par symbole
        """
        with self.price_lock:
            return self.last_prices.copy()