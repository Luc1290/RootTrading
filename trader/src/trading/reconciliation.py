"""
Module de r√©conciliation pour synchroniser l'√©tat des cycles avec Binance.
V√©rifie p√©riodiquement l'√©tat des ordres sur Binance et met √† jour les cycles.
"""
import logging
import time
import threading
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

from shared.src.enums import CycleStatus, OrderStatus, OrderSide

# Helper pour la conversion robuste des statuts de cycle
def parse_cycle_status(status_str):
    """Convertit une cha√Æne de statut de cycle en √©num√©ration CycleStatus de mani√®re robuste."""
    if isinstance(status_str, str):
        # Tenter de convertir directement via l'√©num√©ration
        try:
            return CycleStatus(status_str)
        except (KeyError, ValueError):
            # Mapping de fallback pour g√©rer les diff√©rences de casse
            mapping = {s.value.lower(): s for s in CycleStatus}
            return mapping.get(status_str.lower(), CycleStatus.FAILED)
    return status_str  # Si c'est d√©j√† une √©num√©ration
from shared.src.schemas import TradeCycle
from trader.src.exchange.binance_executor import BinanceExecutor
from trader.src.trading.cycle_repository import CycleRepository

# Configuration du logging
logger = logging.getLogger(__name__)

class ExchangeReconciliation:
    """
    Classe qui g√®re la r√©conciliation p√©riodique avec l'exchange.
    Compare l'√©tat des cycles en base de donn√©es avec l'√©tat r√©el sur Binance.
    """
    
    def __init__(self, cycle_repository: CycleRepository, binance_executor: BinanceExecutor, 
                 reconciliation_interval: int = 600, cycle_manager=None):
        """
        Initialise le service de r√©conciliation.
        
        Args:
            cycle_repository: R√©f√©rentiel de cycles de trading
            binance_executor: Ex√©cuteur Binance pour v√©rifier l'√©tat des ordres
            reconciliation_interval: Intervalle entre les r√©conciliations en secondes (d√©faut: 10 minutes)
            cycle_manager: Gestionnaire de cycles pour mettre √† jour le cache m√©moire
        """
        self.repository = cycle_repository
        self.binance_executor = binance_executor
        self.cycle_manager = cycle_manager
        self.reconciliation_interval = reconciliation_interval
        self.running = False
        self.reconciliation_thread = None
        
        # Statistiques
        self.last_reconciliation = None
        self.stats = {
            "cycles_checked": 0,
            "cycles_reconciled": 0,
            "cycles_failed": 0,
            "last_run_duration": 0
        }
        
        logger.info(f"‚úÖ Service de r√©conciliation initialis√© (intervalle: {reconciliation_interval}s)")
    
    def start(self):
        """
        D√©marre le thread de r√©conciliation p√©riodique.
        """
        if self.running:
            logger.warning("Le service de r√©conciliation est d√©j√† en cours d'ex√©cution")
            return
            
        self.running = True
        self.reconciliation_thread = threading.Thread(
            target=self._reconciliation_loop,
            daemon=True,
            name="ExchangeReconciliation"
        )
        self.reconciliation_thread.start()
        
        logger.info("‚úÖ Service de r√©conciliation d√©marr√©")
    
    def stop(self):
        """
        Arr√™te le thread de r√©conciliation.
        """
        if not self.running:
            return
            
        self.running = False
        
        if self.reconciliation_thread and self.reconciliation_thread.is_alive():
            self.reconciliation_thread.join(timeout=5.0)
            
        logger.info("‚úÖ Service de r√©conciliation arr√™t√©")
    
    def _reconciliation_loop(self):
        """
        Boucle principale de r√©conciliation p√©riodique.
        """
        while self.running:
            try:
                # Effectuer une r√©conciliation
                self.reconcile_all_cycles()
                
                # Mettre √† jour le timestamp de derni√®re r√©conciliation
                self.last_reconciliation = datetime.now()
                
                # Attendre l'intervalle configur√©
                time.sleep(self.reconciliation_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de r√©conciliation: {str(e)}")
                # Pause pour √©viter une boucle d'erreur infinie
                time.sleep(60)
    
    def reconcile_all_cycles(self, force: bool = False):
        """
        R√©concilie tous les cycles actifs avec l'√©tat sur Binance.
        
        Args:
            force: Si True, force la r√©conciliation m√™me pour les cycles r√©cemment mis √† jour
        """
        start_time = time.time()
        
        try:
            # R√©cup√©rer tous les cycles actifs
            active_cycles = self.repository.get_active_cycles()
            logger.info(f"üîÑ D√©but de la r√©conciliation pour {len(active_cycles)} cycles actifs")
            
            # R√©initialiser les statistiques pour cette ex√©cution
            cycles_checked = 0
            cycles_reconciled = 0
            cycles_failed = 0
            
            # Traiter chaque cycle actif
            for cycle in active_cycles:
                try:
                    cycles_checked += 1
                    
                    # V√©rifier si la r√©conciliation est n√©cessaire
                    if not force and self._is_recent_update(cycle):
                        continue
                    
                    # R√©concilier ce cycle
                    if self.reconcile_cycle(cycle):
                        cycles_reconciled += 1
                except Exception as e:
                    import traceback
                    logger.error(f"‚ùå Erreur lors de la r√©conciliation du cycle {cycle.id}: {str(e)}")
                    logger.error(f"üìã Stack trace: {traceback.format_exc()}")
                    logger.error(f"üîç Cycle status type: {type(cycle.status)}, value: {cycle.status}")
                    cycles_failed += 1
            
            # Mettre √† jour les statistiques
            self.stats["cycles_checked"] = cycles_checked
            self.stats["cycles_reconciled"] = cycles_reconciled
            self.stats["cycles_failed"] = cycles_failed
            self.stats["last_run_duration"] = time.time() - start_time
            
            logger.info(f"‚úÖ R√©conciliation termin√©e: {cycles_reconciled}/{cycles_checked} cycles mis √† jour ({cycles_failed} √©checs)")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©conciliation des cycles: {str(e)}")
            self.stats["last_run_duration"] = time.time() - start_time
    
    def _is_recent_update(self, cycle: TradeCycle, threshold_minutes: int = 5) -> bool:
        """
        V√©rifie si un cycle a √©t√© mis √† jour r√©cemment.
        
        Args:
            cycle: Cycle √† v√©rifier
            threshold_minutes: Seuil en minutes consid√©r√© comme "r√©cent"
            
        Returns:
            True si le cycle a √©t√© mis √† jour r√©cemment, False sinon
        """
        if not cycle.updated_at:
            return False
            
        threshold = datetime.now() - timedelta(minutes=threshold_minutes)
        return cycle.updated_at > threshold
    
    def reconcile_cycle(self, cycle: TradeCycle) -> bool:
        """
        R√©concilie un cycle avec son √©tat sur Binance.
        
        Args:
            cycle: Cycle √† r√©concilier
            
        Returns:
            True si le cycle a √©t√© mis √† jour, False sinon
        """
        # Si le cycle n'a pas d'ordre d'entr√©e, le marquer comme annul√©
        if not cycle.entry_order_id:
            logger.warning(f"‚ö†Ô∏è Cycle {cycle.id} sans ordre d'entr√©e, marqu√© comme annul√©")
            cycle.status = CycleStatus.CANCELED
            cycle.updated_at = datetime.now()
            self.repository.save_cycle(cycle)
            return True
        
        # V√©rifier l'√©tat de l'ordre d'entr√©e sur Binance
        entry_execution = self.binance_executor.get_order_status(cycle.symbol, cycle.entry_order_id)
        
        # Si l'ordre d'entr√©e n'existe pas sur Binance, le marquer comme annul√©
        if not entry_execution and not self.binance_executor.demo_mode:
            logger.warning(f"‚ö†Ô∏è Ordre d'entr√©e {cycle.entry_order_id} non trouv√© sur Binance, cycle {cycle.id} marqu√© comme annul√©")
            cycle.status = CycleStatus.CANCELED
            cycle.updated_at = datetime.now()
            self.repository.save_cycle(cycle)
            return True
        
        # Si le cycle est en attente de vente mais n'a pas d'ordre de sortie, cr√©er l'ordre
        if cycle.status in [CycleStatus.WAITING_SELL, CycleStatus.ACTIVE_SELL, CycleStatus.WAITING_BUY, CycleStatus.ACTIVE_BUY] and not cycle.exit_order_id:
            # Conversion robuste du statut pour l'affichage
            status_display = cycle.status.value if hasattr(cycle.status, 'value') else str(cycle.status)
            logger.warning(f"‚ö†Ô∏è Cycle {cycle.id} en statut {status_display} sans ordre de sortie")
            
            # V√©rifier que l'ordre d'entr√©e est bien FILLED avant de cr√©er l'ordre de sortie
            if entry_execution and entry_execution.status == OrderStatus.FILLED:
                logger.info(f"üîß Cr√©ation de l'ordre de sortie manquant pour le cycle {cycle.id}")
                
                # D√©terminer le side de l'ordre de sortie
                if cycle.status in [CycleStatus.ACTIVE_BUY, CycleStatus.WAITING_SELL]:
                    exit_side = OrderSide.SELL
                else:
                    exit_side = OrderSide.BUY
                
                # Cr√©er l'ordre de sortie
                try:
                    from shared.src.enums import OrderType
                    from shared.src.schemas import TradeOrder
                    
                    exit_price = cycle.target_price if cycle.target_price else None
                    
                    # Cr√©er un objet TradeOrder
                    exit_order = TradeOrder(
                        symbol=cycle.symbol,
                        side=exit_side,
                        price=exit_price,
                        quantity=cycle.quantity,
                        order_type=OrderType.LIMIT if exit_price else OrderType.MARKET,
                        client_order_id=f"exit_{cycle.id}"
                    )
                    
                    exit_execution = self.binance_executor.execute_order(exit_order)
                    
                    if exit_execution:
                        # Mettre √† jour le cycle
                        cycle.exit_order_id = exit_execution.order_id
                        cycle.status = CycleStatus.WAITING_SELL if exit_side == OrderSide.SELL else CycleStatus.WAITING_BUY
                        cycle.updated_at = datetime.now()
                        self.repository.save_cycle(cycle)
                        self.repository.save_execution(exit_execution, cycle.id)
                        
                        logger.info(f"‚úÖ Ordre de sortie {exit_execution.order_id} cr√©√© pour le cycle {cycle.id}")
                        return True
                    else:
                        logger.error(f"‚ùå √âchec de cr√©ation de l'ordre de sortie pour le cycle {cycle.id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la cr√©ation de l'ordre de sortie: {str(e)}")
            
            # V√©rifier depuis combien de temps le cycle est dans cet √©tat
            time_since_update = datetime.now() - cycle.updated_at
            
            # Si le cycle est bloqu√© depuis plus de 30 minutes, le marquer comme √©chou√©
            if time_since_update.total_seconds() > 1800:  # 30 minutes
                logger.error(f"‚ùå Cycle {cycle.id} bloqu√© en {status_display} depuis {time_since_update.total_seconds()/60:.1f} minutes, marqu√© comme √©chou√©")
                cycle.status = CycleStatus.FAILED
                cycle.updated_at = datetime.now()
                if not hasattr(cycle, 'metadata') or cycle.metadata is None:
                    cycle.metadata = {}
                cycle.metadata['cancel_reason'] = f"Bloqu√© en {status_display} sans ordre de sortie pendant {time_since_update.total_seconds()/60:.1f} minutes"
                self.repository.save_cycle(cycle)
                
                # Retirer le cycle du cache m√©moire
                if self.cycle_manager and hasattr(self.cycle_manager, 'active_cycles'):
                    with self.cycle_manager.cycles_lock:
                        if cycle.id in self.cycle_manager.active_cycles:
                            del self.cycle_manager.active_cycles[cycle.id]
                            logger.info(f"‚ôªÔ∏è Cycle {cycle.id} retir√© du cache m√©moire (FAILED)")
                
                return True
            
            logger.info(f"‚ÑπÔ∏è Cycle {cycle.id} en {status_display} depuis {time_since_update.total_seconds()/60:.1f} minutes")
            return False
        
        # Si le cycle a un ordre de sortie, v√©rifier son √©tat
        if cycle.exit_order_id:
            exit_execution = self.binance_executor.get_order_status(cycle.symbol, cycle.exit_order_id)
            
            # Si l'ordre de sortie n'existe pas, marquer comme √©chou√©
            if not exit_execution and not self.binance_executor.demo_mode:
                logger.warning(f"‚ö†Ô∏è Ordre de sortie {cycle.exit_order_id} non trouv√© sur Binance, cycle {cycle.id} marqu√© comme √©chou√©")
                cycle.status = CycleStatus.FAILED
                cycle.updated_at = datetime.now()
                self.repository.save_cycle(cycle)
                return True
            
            # Si l'ordre de sortie est rempli, marquer comme termin√©
            if exit_execution and exit_execution.status == OrderStatus.FILLED:
                # Conversion robuste du statut pour la comparaison
                status_lower = cycle.status.value.lower() if hasattr(cycle.status, 'value') else str(cycle.status).lower()
                if cycle.status != CycleStatus.COMPLETED and status_lower != 'completed':
                    logger.info(f"‚úÖ Ordre de sortie {cycle.exit_order_id} rempli, cycle {cycle.id} marqu√© comme termin√©")
                    # Utiliser CycleStatus.COMPLETED directement comme enum
                    cycle.status = CycleStatus.COMPLETED
                    cycle.exit_price = exit_execution.price
                    cycle.completed_at = exit_execution.timestamp
                    cycle.updated_at = datetime.now()
                    
                    # Calculer P&L si possible
                    if cycle.entry_price and cycle.exit_price and cycle.quantity:
                        # D√©terminer si c'√©tait un cycle d'achat ou de vente initial
                        # On v√©rifie l'ordre d'entr√©e pour savoir la direction initiale
                        if entry_execution:
                            entry_side = entry_execution.side
                        else:
                            # Fallback: si l'ordre d'entr√©e n'est pas trouv√©, on suppose BUY
                            # (la plupart des strat√©gies commencent par acheter)
                            entry_side = OrderSide.BUY
                            logger.warning(f"‚ö†Ô∏è Ordre d'entr√©e non trouv√© pour le cycle {cycle.id}, assum√© BUY")
                        
                        # Si entr√©e = BUY, alors sortie = SELL : profit = (prix_sortie - prix_entr√©e) * quantit√©
                        if entry_side == OrderSide.BUY:
                            cycle.profit_loss = (cycle.exit_price - cycle.entry_price) * cycle.quantity
                        # Si entr√©e = SELL, alors sortie = BUY : profit = (prix_entr√©e - prix_sortie) * quantit√©
                        else:
                            cycle.profit_loss = (cycle.entry_price - cycle.exit_price) * cycle.quantity
                        
                        # Calculer le pourcentage de P&L
                        entry_value = cycle.entry_price * cycle.quantity
                        if entry_value > 0:
                            cycle.profit_loss_percent = (cycle.profit_loss / entry_value) * 100
                    
                    self.repository.save_cycle(cycle)
                    
                    # Retirer le cycle du cache m√©moire du cycle_manager
                    if self.cycle_manager and hasattr(self.cycle_manager, 'active_cycles'):
                        with self.cycle_manager.cycles_lock:
                            if cycle.id in self.cycle_manager.active_cycles:
                                del self.cycle_manager.active_cycles[cycle.id]
                                logger.info(f"‚ôªÔ∏è Cycle {cycle.id} retir√© du cache m√©moire")
                    
                    return True
        
        # V√©rifier si le cycle est actif depuis trop longtemps (> 7 jours)
        cycle_age = datetime.now() - cycle.created_at
        # Convertir le statut en cha√Æne minuscule pour comparaison insensible √† la casse
        status_lower = cycle.status.value.lower() if hasattr(cycle.status, 'value') else str(cycle.status).lower()
        terminal_statuses = ['completed', 'canceled', 'failed']
        if cycle_age.days > 7 and status_lower not in terminal_statuses:
            logger.warning(f"‚ö†Ô∏è Cycle {cycle.id} actif depuis plus de 7 jours ({cycle_age.days}), marqu√© comme √©chou√©")
            cycle.status = CycleStatus.FAILED
            cycle.updated_at = datetime.now()
            if not hasattr(cycle, 'metadata') or cycle.metadata is None:
                cycle.metadata = {}
            cycle.metadata['cancel_reason'] = "Timeout automatique apr√®s 7 jours"
            self.repository.save_cycle(cycle)
            
            # Retirer le cycle du cache m√©moire
            if self.cycle_manager and hasattr(self.cycle_manager, 'active_cycles'):
                with self.cycle_manager.cycles_lock:
                    if cycle.id in self.cycle_manager.active_cycles:
                        del self.cycle_manager.active_cycles[cycle.id]
                        logger.info(f"‚ôªÔ∏è Cycle {cycle.id} retir√© du cache m√©moire (timeout 7 jours)")
            
            return True
        
        # Aucune mise √† jour n√©cessaire
        return False
    
    def force_reconciliation(self):
        """
        Force une r√©conciliation imm√©diate de tous les cycles.
        """
        logger.info("For√ßage de la r√©conciliation de tous les cycles")
        self.reconcile_all_cycles(force=True)
    
    def get_stats(self) -> Dict[str, Any]:
        """
        R√©cup√®re les statistiques de r√©conciliation.
        
        Returns:
            Statistiques du service de r√©conciliation
        """
        stats = self.stats.copy()
        stats['last_reconciliation'] = self.last_reconciliation.isoformat() if self.last_reconciliation else None
        return stats