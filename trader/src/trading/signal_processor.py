"""
Processeur de signaux de trading.
Analyse et filtre les signaux avant de cr√©er des cycles de trading.
"""
import logging
import json
import time
import queue
import threading
from typing import Dict, List, Any, Optional, Callable
from datetime import datetime

from shared.src.redis_client import RedisClient
from shared.src.enums import OrderSide, SignalStrength
from shared.src.schemas import StrategySignal

# Configuration du logging
logger = logging.getLogger(__name__)

def parse_signal_strength(strength_str):
    """Convertit une cha√Æne de force de signal en √©num√©ration SignalStrength."""
    if isinstance(strength_str, str):
        # Tenter de convertir directement via l'√©num√©ration
        try:
            return SignalStrength[strength_str.upper()]
        except (KeyError, AttributeError):
            # Mapping de fallback pour les anciennes valeurs ou formats diff√©rents
            mapping = {
                "WEAK": SignalStrength.WEAK,
                "MODERATE": SignalStrength.MODERATE,
                "STRONG": SignalStrength.STRONG,
                "VERY_STRONG": SignalStrength.VERY_STRONG,
                # Versions minuscules
                "weak": SignalStrength.WEAK,
                "moderate": SignalStrength.MODERATE,
                "strong": SignalStrength.STRONG,
                "very_strong": SignalStrength.VERY_STRONG
            }
            return mapping.get(strength_str, SignalStrength.MODERATE)  # Valeur par d√©faut
    elif strength_str is None:
        return SignalStrength.MODERATE  # Valeur par d√©faut si None
    return strength_str  # Si c'est d√©j√† une √©num√©ration

class SignalProcessor:
    """
    Processeur de signaux de trading.
    Re√ßoit, valide et traite les signaux pour cr√©er des cycles de trading.
    """
    
    def __init__(self, symbols: List[str], signal_callback: Callable[[StrategySignal], None],
                 min_signal_strength: SignalStrength = SignalStrength.MODERATE):
        """
        Initialise le processeur de signaux.
        
        Args:
            symbols: Liste des symboles autoris√©s
            signal_callback: Fonction de rappel pour les signaux valid√©s
            min_signal_strength: Force minimale des signaux √† traiter
        """
        # Log les valeurs possibles de SignalStrength pour d√©bogage
        logger.debug(f"Valeurs possibles de SignalStrength: {[e.name for e in SignalStrength]}")
        logger.debug(f"Force minimale des signaux configur√©e: {min_signal_strength.name}")
        self.symbols = symbols
        self.signal_callback = signal_callback
        self.min_signal_strength = min_signal_strength
        
        # Client Redis pour recevoir les signaux
        self.redis_client = RedisClient()
        
        # Canal Redis pour les signaux
        self.signal_channel = "roottrading:analyze:signal"
        
        # File d'attente thread-safe pour les signaux
        self.signal_queue = queue.Queue()
        
        # Thread de traitement des signaux
        self.processing_thread = None
        self.running = False
        
        # Dictionnaire pour suivre les signaux r√©cents (anti-doublon)
        self.recent_signals = {}
        self.signal_lock = threading.RLock()
        
        # Compteurs pour les statistiques
        self.stats = {
            "signals_received": 0,
            "signals_processed": 0,
            "signals_rejected": 0,
            "signals_duplicated": 0
        }
        
        logger.info(f"‚úÖ SignalProcessor initialis√© pour {len(symbols)} symboles")
    
    def _process_signal_message(self, channel: str, data: Dict[str, Any]) -> None:
        """
        Callback pour traiter les signaux re√ßus de Redis.
        Valide et ajoute les signaux √† la file d'attente pour traitement.

        Args:
            channel: Canal Redis d'o√π provient le signal
            data: Donn√©es du signal
        """
        try:
            # Logging pour debug - afficher les donn√©es brutes re√ßues
            logger.debug(f"Signal brut re√ßu: {json.dumps(data)}")
            
            with self.signal_lock:
                self.stats["signals_received"] += 1

            # Filtres de protection : ignorer les donn√©es de prix ou autres messages non pertinents
            if not isinstance(data, dict) or "strategy" not in data or "side" not in data:
                logger.debug(f"‚è≠Ô∏è Message ignor√©: n'est pas un signal valide")
                return
        
            # V√©rifier les champs obligatoires
            required_fields = ["strategy", "symbol", "side", "timestamp", "price"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                logger.warning(f"‚ùå Champs obligatoires manquants dans le signal: {missing_fields}")
                with self.signal_lock:
                    self.stats["signals_rejected"] += 1
                return
            
            # V√©rifier que le symbole est support√©
            if data["symbol"] not in self.symbols:
                logger.debug(f"‚è≠Ô∏è Signal ignor√©: symbole non support√© {data['symbol']}")
                with self.signal_lock:
                    self.stats["signals_rejected"] += 1
                return
            
            # Convertir la cha√Æne ISO en objet datetime
            if "timestamp" in data and isinstance(data["timestamp"], str):
                try:
                    data["timestamp"] = datetime.fromisoformat(data["timestamp"])
                except ValueError:
                    logger.error(f"‚ùå Format de timestamp invalide: {data['timestamp']}")
                    with self.signal_lock:
                        self.stats["signals_rejected"] += 1
                    return
            
            # V√©rifier les doublons
            signal_fingerprint = f"{data['symbol']}:{data['strategy']}:{data['side']}:{int(data['price'])}"
            
            with self.signal_lock:
                if signal_fingerprint in self.recent_signals:
                    recent_time = self.recent_signals[signal_fingerprint]
                    # Ignorer si moins de 30 secondes
                    if time.time() - recent_time < 30:
                        logger.debug(f"‚è≠Ô∏è Signal ignor√©: doublon r√©cent {signal_fingerprint}")
                        self.stats["signals_duplicated"] += 1
                        return

                # Mettre √† jour l'horodatage du signal
                self.recent_signals[signal_fingerprint] = time.time()
                
                # Nettoyer les signaux trop anciens (plus de 5 minutes)
                current_time = time.time()
                expired_signals = [fp for fp, ts in self.recent_signals.items() if current_time - ts > 300]
                for fp in expired_signals:
                    self.recent_signals.pop(fp, None)
            
            # Convertir la valeur strength en enum avant validation
            if "strength" in data and isinstance(data["strength"], str):
                data["strength"] = parse_signal_strength(data["strength"])
            
            # Valider le signal avec Pydantic
            try:
                signal = StrategySignal(**data)
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la validation du signal: {str(e)}")
                logger.error(f"Donn√©es re√ßues probl√©matiques: {data}")
                with self.signal_lock:
                    self.stats["signals_rejected"] += 1
                return
            
            # V√©rifier la force du signal
            # S'assurer que strength est bien un objet enum et pas une cha√Æne
            signal_strength = signal.strength
            if isinstance(signal_strength, str):
                signal_strength = parse_signal_strength(signal_strength)
                
            if signal_strength.value < self.min_signal_strength.value:
                logger.debug(f"‚è≠Ô∏è Signal ignor√©: force insuffisante ({signal_strength.name})")
                with self.signal_lock:
                    self.stats["signals_rejected"] += 1
                return
            
            # Ajouter √† la file d'attente pour traitement
            self.signal_queue.put(signal)
            logger.info(f"üì® Signal re√ßu: {signal.side} {signal.symbol} @ {signal.price} ({signal.strategy})")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement du signal: {str(e)}")
            logger.error(f"Donn√©es re√ßues probl√©matiques: {data}")
    
    def _signal_processing_loop(self) -> None:
        """
        Boucle de traitement des signaux de trading.
        Cette m√©thode s'ex√©cute dans un thread s√©par√©.
        """
        logger.info("D√©marrage de la boucle de traitement des signaux")
        
        while self.running:
            try:
                # R√©cup√©rer un signal de la file d'attente avec timeout
                try:
                    signal = self.signal_queue.get(timeout=1.0)
                except queue.Empty:
                    continue
                
                # Traiter le signal
                try:
                    self.signal_callback(signal)
                    with self.signal_lock:
                        self.stats["signals_processed"] += 1
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du traitement du signal: {str(e)}")
                    with self.signal_lock:
                        self.stats["signals_rejected"] += 1
                
                # Marquer la t√¢che comme termin√©e
                self.signal_queue.task_done()
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de traitement des signaux: {str(e)}")
                time.sleep(1)  # Pause pour √©viter une boucle d'erreur infinie
        
        logger.info("Boucle de traitement des signaux arr√™t√©e")
    
    def start(self) -> None:
        """
        D√©marre le processeur de signaux.
        """
        if self.running:
            logger.warning("Le processeur de signaux est d√©j√† en cours d'ex√©cution")
            return
        
        self.running = True
        
        # S'abonner au canal des signaux et sauvegarder le client_id
        self.client_id = self.redis_client.subscribe(self.signal_channel, self._process_signal_message)
        logger.info(f"‚úÖ Abonn√© au canal Redis des signaux: {self.signal_channel}")
        
        # D√©marrer le thread de traitement des signaux
        self.processing_thread = threading.Thread(
            target=self._signal_processing_loop,
            daemon=True,
            name="SignalProcessor"
        )
        self.processing_thread.start()
        
        logger.info("‚úÖ Processeur de signaux d√©marr√©")
    
    def stop(self) -> None:
        """
        Arr√™te le processeur de signaux.
        """
        if not self.running:
            return
        
        logger.info("Arr√™t du processeur de signaux...")
        self.running = False
        
        # Attendre que le thread de traitement se termine
        if self.processing_thread and self.processing_thread.is_alive():
            self.processing_thread.join(timeout=5.0)
        
        # Se d√©sabonner du canal Redis
        if hasattr(self, 'client_id') and self.client_id:
            self.redis_client.unsubscribe(self.client_id)
        self.redis_client.close()
        
        logger.info("‚úÖ Processeur de signaux arr√™t√©")
    
    def get_stats(self) -> Dict[str, int]:
        """
        R√©cup√®re les statistiques du processeur de signaux.
        
        Returns:
            Dictionnaire des statistiques
        """
        with self.signal_lock:
            return self.stats.copy()
    
    def set_min_signal_strength(self, strength: SignalStrength) -> None:
        """
        Modifie la force minimale des signaux √† traiter.
        
        Args:
            strength: Nouvelle force minimale
        """
        self.min_signal_strength = strength
        logger.info(f"Force minimale des signaux modifi√©e: {strength}")