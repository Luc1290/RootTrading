# trader/src/exchange/constraints.py
"""
Gestion des contraintes de trading de Binance (min. qt√©s, pr√©cisions, etc.)
Fournit des informations sur les limites de trading par symbole.
"""
import logging
import math
from typing import Dict, Any, Optional
from decimal import Decimal, getcontext, ROUND_DOWN

# Configuration de la pr√©cision d√©cimale
getcontext().prec = 28

# Configuration du logging
logger = logging.getLogger(__name__)

class BinanceSymbolConstraints:
    """
    G√®re les contraintes de trading par symbole pour Binance.
    Fournit des m√©thodes pour v√©rifier et ajuster les quantit√©s et prix.
    """
    
    def __init__(self, symbol_info: Optional[Dict[str, Dict[str, Any]]] = None):
        """
        Initialise les contraintes de symbole avec des valeurs par d√©faut.
        
        Args:
            symbol_info: Informations de symboles obtenues depuis fetch_exchange_info()
        """
        self.symbol_info = symbol_info or {}
        
        # Quantit√© minimale par d√©faut pour les symboles (fallback si pas de donn√©es en temps r√©el)
        self.default_min_quantities = {
            "BTCUSDC": 0.00001,   # minQty selon Binance
            "ETHUSDC": 0.0001,    # minQty selon Binance
            "ETHBTC": 0.0001,     # minQty selon Binance
        }
        
        # Pas de quantit√© par d√©faut (step size) pour les symboles (fallback)
        self.default_step_sizes = {
            "BTCUSDC": 0.00001,   # stepSize selon Binance (5 d√©cimales)
            "ETHUSDC": 0.0001,    # stepSize selon Binance (4 d√©cimales)
            "ETHBTC": 0.0001,     # stepSize selon Binance (4 d√©cimales)
        }
        
        # Valeur minimale des ordres par d√©faut (min notional) (fallback)
        self.default_min_notionals = {
            "BTCUSDC": 10.0,
            "ETHUSDC": 10.0,
            "ETHBTC": 0.0001,     # 0.0001 BTC ‚âà 10 USDC, pas 10 BTC !
        }
        
        # Pr√©cision des prix par d√©faut (fallback)
        self.default_price_precisions = {
            "BTCUSDC": 2,  # 2 d√©cimales (ex: 50000.25)
            "ETHUSDC": 2,  # 2 d√©cimales (ex: 3000.50)
            "ETHBTC": 5,   # 5 d√©cimales (ex: 0.02402)
        }
        
        logger.info(f"‚úÖ Contraintes de symbole initialis√©es avec {len(self.symbol_info)} symboles en temps r√©el")
    
    def get_min_qty(self, symbol: str) -> float:
        """
        R√©cup√®re la quantit√© minimale pour un symbole.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            
        Returns:
            Quantit√© minimale
        """
        # Utiliser les donn√©es en temps r√©el si disponibles
        if symbol in self.symbol_info and 'min_qty' in self.symbol_info[symbol]:
            return self.symbol_info[symbol]['min_qty']
        # Sinon, utiliser les valeurs par d√©faut
        return self.default_min_quantities.get(symbol, 0.001)
    
    def get_step_size(self, symbol: str) -> float:
        """
        R√©cup√®re le pas de quantit√© pour un symbole.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            
        Returns:
            Pas de quantit√©
        """
        # Utiliser les donn√©es en temps r√©el si disponibles
        if symbol in self.symbol_info and 'step_size' in self.symbol_info[symbol]:
            return self.symbol_info[symbol]['step_size']
        # Sinon, utiliser les valeurs par d√©faut
        return self.default_step_sizes.get(symbol, 0.0001)
    
    def get_min_notional(self, symbol: str) -> float:
        """
        R√©cup√®re la valeur minimale d'un ordre pour un symbole.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            
        Returns:
            Valeur minimale de l'ordre
        """
        # Utiliser les donn√©es en temps r√©el si disponibles
        if symbol in self.symbol_info and 'min_notional' in self.symbol_info[symbol]:
            return self.symbol_info[symbol]['min_notional']
        # Sinon, utiliser les valeurs par d√©faut
        return self.default_min_notionals.get(symbol, 10.0)
    
    def get_price_precision(self, symbol: str) -> int:
        """
        R√©cup√®re la pr√©cision des prix pour un symbole.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            
        Returns:
            Nombre de d√©cimales pour les prix
        """
        # Pour la pr√©cision des prix, calculer depuis tick_size si disponible
        if symbol in self.symbol_info and 'tick_size' in self.symbol_info[symbol]:
            tick_size = self.symbol_info[symbol]['tick_size']
            # Calculer le nombre de d√©cimales depuis tick_size
            # Ex: 0.01 -> 2 d√©cimales, 0.001 -> 3 d√©cimales
            import math
            if tick_size > 0:
                return max(0, -int(math.floor(math.log10(tick_size))))
        # Sinon, utiliser les valeurs par d√©faut
        return self.default_price_precisions.get(symbol, 2)
    
    def truncate_quantity(self, symbol: str, quantity: float) -> float:
        """
        Tronque la quantit√© au pas (stepSize) Binance, sans erreur binaire.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            quantity: Quantit√© √† tronquer
            
        Returns:
            Quantit√© tronqu√©e
        """
        if quantity <= 0:
            logger.warning(f"‚ö†Ô∏è Quantit√© n√©gative ou nulle : {quantity}")
            return self.get_min_qty(symbol)
        
        step_size = self.get_step_size(symbol)          # ex. 0.000001
        step_dec = Decimal(str(step_size))
        qty_dec = Decimal(str(quantity))
        
        # Arrondi ¬´ floor ¬ª au multiple de stepSize
        truncated = (qty_dec // step_dec) * step_dec
        truncated = truncated.quantize(step_dec, rounding=ROUND_DOWN)
        
        # S√©curit√© : si on tombe √† 0, on repasse √† la quantit√© mini
        if truncated <= 0:
            logger.warning(f"‚ö†Ô∏è Quantit√© nulle apr√®s troncature : {quantity} ‚Üí {truncated}")
            truncated = Decimal(str(self.get_min_qty(symbol)))
        
        # Convertir en float mais s'assurer qu'il n'y a pas de notation scientifique
        result = float(truncated)
        
        # Si le r√©sultat est tr√®s petit, le formater explicitement pour √©viter la notation scientifique
        if result < 0.0001:
            # Calculer le nombre de d√©cimales n√©cessaires selon le step_size
            step_decimals = len(str(step_dec).split('.')[-1]) if '.' in str(step_dec) else 0
            # Formater avec suffisamment de d√©cimales et reconvertir en float
            formatted = f"{result:.{step_decimals}f}"
            logger.debug(f"üîß Formatage quantit√© pour √©viter notation scientifique: {result} ‚Üí {formatted}")
            return float(formatted)
        
        return result
    
    def round_price(self, symbol: str, price: float) -> float:
        """
        Arrondit le prix selon le tickSize du symbole.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            price: Prix √† arrondir
            
        Returns:
            Prix arrondi
        """
        precision = self.get_price_precision(symbol)
        return round(price, precision)
    
    def is_quantity_valid(self, symbol: str, quantity: float) -> bool:
        """
        V√©rifie si la quantit√© est valide selon les r√®gles de Binance.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            quantity: Quantit√© √† v√©rifier
            
        Returns:
            True si la quantit√© est valide, False sinon
        """
        # V√©rifier que la quantit√© n'est pas n√©gative ou nulle
        if quantity <= 0:
            return False
        
        # V√©rifier si la quantit√© est sup√©rieure au minimum
        min_qty = self.get_min_qty(symbol)
        return quantity >= min_qty
    
    def is_notional_valid(self, symbol: str, quantity: float, price: float) -> bool:
        """
        V√©rifie si la valeur totale (quantit√© * prix) est valide selon les r√®gles de Binance.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            quantity: Quantit√©
            price: Prix
            
        Returns:
            True si la valeur est valide, False sinon
        """
        # V√©rifier que la quantit√© et le prix ne sont pas nuls
        if quantity <= 0 or price <= 0:
            return False
        
        # Calculer la valeur totale
        notional = quantity * price
        
        # V√©rifier si la valeur est sup√©rieure au minimum
        min_notional = self.get_min_notional(symbol)
        return notional >= min_notional
        
    def calculate_min_quantity(self, symbol: str, price: float) -> float:
        """
        Calcule la quantit√© minimale n√©cessaire pour respecter √† la fois
        les contraintes de min_qty et min_notional.
        
        Args:
            symbol: Symbole (ex: 'BTCUSDC')
            price: Prix actuel
            
        Returns:
            Quantit√© minimale arrondie adapt√©e au step_size
        """
        min_qty = self.get_min_qty(symbol)
        min_notional = self.get_min_notional(symbol)
        
        # Calculer la quantit√© minimale pour respecter min_notional
        notional_min_qty = min_notional / price if price > 0 else min_qty
        
        # Prendre le maximum des deux contraintes
        required_min_qty = max(min_qty, notional_min_qty)
        
        # Arrondir au step size sup√©rieur
        step_size = self.get_step_size(symbol)
        steps = (required_min_qty / step_size) if step_size > 0 else 0
        rounded_steps = math.ceil(steps)
        rounded_qty = rounded_steps * step_size
        
        logger.info(f"Quantit√© minimale calcul√©e pour {symbol} @ {price}: {rounded_qty} (min_qty: {min_qty}, notional min: {notional_min_qty})")
        return rounded_qty