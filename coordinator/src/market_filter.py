"""
Module de filtrage des signaux bas√© sur les conditions de march√©.
Extrait de signal_handler.py pour am√©liorer la modularit√©.
"""
import logging
import time
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from shared.src.schemas import StrategySignal
from shared.src.enums import OrderSide, SignalStrength

logger = logging.getLogger(__name__)


class MarketFilter:
    """
    G√®re le filtrage des signaux bas√© sur les conditions de march√©.
    Permet de filtrer les signaux en fonction du mode de march√© (ride/react),
    des actions recommand√©es et de l'√¢ge des donn√©es.
    """
    
    def __init__(self, max_filter_age: int = 900):
        """
        Initialise le filtre de march√©.
        
        Args:
            max_filter_age: √Çge maximum des donn√©es de filtrage en secondes (d√©faut: 15 minutes)
        """
        self.max_filter_age = max_filter_age
        self.market_filters: Dict[str, Dict[str, Any]] = {}
        self.last_refresh_attempt: Dict[str, float] = {}
        
    def should_filter_signal(self, signal: StrategySignal) -> bool:
        """
        D√©termine si un signal doit √™tre filtr√© en utilisant les donn√©es enrichies.
        
        OPTIMISATION: Utilise les donn√©es techniques du signal_aggregator.
        
        Args:
            signal: Signal √† √©valuer (avec m√©tadonn√©es techniques)
            
        Returns:
            True si le signal doit √™tre filtr√© (ignor√©), False sinon
        """
        # NOUVEAU: Filtrage intelligent pour signaux agr√©g√©s bas√© sur leurs m√©tadonn√©es
        if signal.strategy.startswith("Aggregated_"):
            return self._apply_technical_filtering(signal)
            
        # V√©rifier si nous avons des informations de filtrage pour ce symbole
        if signal.symbol not in self.market_filters:
            logger.debug(f"Aucune information de filtrage pour {signal.symbol}")
            return False
            
        filter_info = self.market_filters[signal.symbol]
        
        # V√©rifier si les informations sont obsol√®tes
        if self._is_filter_outdated(signal.symbol):
            logger.warning(f"Informations de filtrage obsol√®tes pour {signal.symbol}")
            # En mode de secours, filtrer uniquement les signaux faibles
            signal_strength = signal.strength if hasattr(signal.strength, 'value') else SignalStrength(signal.strength) if isinstance(signal.strength, str) else signal.strength
            if signal_strength == SignalStrength.WEAK:
                logger.info(f"Signal {signal.side} filtr√© en mode de secours (force insuffisante)")
                return True
            return False
            
        # Appliquer les r√®gles de filtrage bas√©es sur le mode de march√©
        legacy_filter = self._apply_filter_rules(signal, filter_info)
        
        # NOUVEAU: Compl√©ter avec filtrage technique si disponible
        technical_filter = self._apply_technical_filtering(signal)
        
        # Combiner les deux filtres (OR logic - filtr√© si l'un des deux dit oui)
        return legacy_filter or technical_filter
        
    def update_market_filter(self, symbol: str, filter_data: Dict[str, Any]):
        """
        Met √† jour les informations de filtrage pour un symbole.
        
        Args:
            symbol: Symbole √† mettre √† jour
            filter_data: Nouvelles donn√©es de filtrage
        """
        filter_data['updated_at'] = time.time()
        self.market_filters[symbol] = filter_data
        logger.info(f"Filtre de march√© mis √† jour pour {symbol}: {filter_data}")
    
    def _apply_technical_filtering(self, signal: StrategySignal) -> bool:
        """
        Applique un filtrage bas√© sur les indicateurs techniques enrichis du signal_aggregator.
        
        OPTIMISATION: R√©utilise les calculs d√©j√† effectu√©s.
        
        Args:
            signal: Signal avec m√©tadonn√©es techniques
            
        Returns:
            True si le signal doit √™tre filtr√©
        """
        try:
            # V√©rifier la pr√©sence des m√©tadonn√©es
            if not hasattr(signal, 'metadata') or not signal.metadata:
                # Pas de m√©tadonn√©es = filtrage conservateur
                signal_strength = getattr(signal, 'strength', None)
                if signal_strength and str(signal_strength).lower() == 'weak':
                    logger.info(f"üö´ Signal {signal.side} filtr√©: force faible sans m√©tadonn√©es")
                    return True
                return False
            
            metadata = signal.metadata
            
            # 1. Filtrage bas√© sur le r√©gime Enhanced
            regime = metadata.get('regime')
            regime_metrics = metadata.get('regime_metrics', {})
            
            if regime == 'UNDEFINED' or regime == 'VOLATILE':
                # March√© instable: filtrer les signaux faibles (confidence < 0.65 pour crypto)
                signal_confidence = getattr(signal, 'confidence', 0.5)
                if signal_confidence < 0.65:  # Seuil crypto pour march√© instable
                    logger.info(f"üö´ Signal {signal.side} filtr√©: confiance {signal_confidence:.2f} en march√© {regime}")
                    return True
            
            # 2. Filtrage bas√© sur l'ADX (force de tendance)
            adx = regime_metrics.get('adx')
            if adx is not None:
                if adx < 20 and not metadata.get('ultra_confluence'):
                    logger.info(f"üö´ Signal {signal.side} filtr√©: ADX trop faible ({adx:.1f}) sans ultra-confluence")
                    return True
                elif adx > 70:
                    # Tendance tr√®s forte: risque de retournement
                    logger.info(f"‚ö†Ô∏è Signal {signal.side} filtr√©: ADX tr√®s √©lev√© ({adx:.1f}) - risque retournement")
                    return True
            
            # 3. Filtrage bas√© sur le volume
            volume_analysis = metadata.get('volume_analysis', {})
            if volume_analysis:
                avg_volume_ratio = volume_analysis.get('avg_volume_ratio', 1.0)
                if avg_volume_ratio < 0.8:
                    logger.info(f"üö´ Signal {signal.side} filtr√©: volume faible (ratio={avg_volume_ratio:.2f})")
                    return True
            
            # 4. Filtrage par confiance multi-strat√©gies (CRYPTO OPTIMIS√â)
            strategy_count = metadata.get('strategy_count', 1)
            signal_confidence = getattr(signal, 'confidence', 0.5)
            
            # Seuils crypto plus stricts
            if strategy_count == 1 and signal_confidence < 0.75:  # Relev√© de 0.8 √† 0.75 pour crypto
                logger.info(f"üö´ Signal {signal.side} filtr√©: une seule strat√©gie avec confiance {signal_confidence:.2f}")
                return True
            elif strategy_count >= 2 and signal_confidence < 0.55:  # Multi-strat√©gies : seuil 0.55
                logger.info(f"üö´ Signal {signal.side} filtr√©: {strategy_count} strat√©gies avec confiance {signal_confidence:.2f}")
                return True
            
            # 5. Exception pour signaux institutionnels
            if metadata.get('institutional_grade') or metadata.get('excellent_grade'):
                logger.info(f"üéÜ Signal {signal.side} exempt√© du filtrage: qualit√© institutionnelle/excellente")
                return False
            
            # Signal pass√© avec succ√®s
            logger.debug(f"‚úÖ Signal {signal.side} pass√© le filtrage technique")
            return False
            
        except Exception as e:
            logger.error(f"Erreur filtrage technique: {e}")
            return False  # En cas d'erreur, ne pas filtrer
        
    def _is_filter_outdated(self, symbol: str) -> bool:
        """
        V√©rifie si les donn√©es de filtrage sont obsol√®tes.
        
        Args:
            symbol: Symbole √† v√©rifier
            
        Returns:
            True si les donn√©es sont obsol√®tes
        """
        if symbol not in self.market_filters:
            return True
            
        filter_info = self.market_filters[symbol]
        age = time.time() - filter_info.get('updated_at', 0)
        return age > self.max_filter_age
        
    def _apply_filter_rules(self, signal: StrategySignal, filter_info: Dict[str, Any]) -> bool:
        """
        Applique les r√®gles de filtrage au signal.
        
        Args:
            signal: Signal √† √©valuer
            filter_info: Informations de filtrage
            
        Returns:
            True si le signal doit √™tre filtr√©
        """
        # Filtrage bas√© sur le mode de march√©
        mode = filter_info.get('mode')
        
        # En mode "ride", filtrer les signaux contre-tendance faibles
        if mode == 'ride':
            signal_side = signal.side if hasattr(signal.side, 'value') else OrderSide(signal.side) if isinstance(signal.side, str) else signal.side
            signal_strength = signal.strength if hasattr(signal.strength, 'value') else SignalStrength(signal.strength) if isinstance(signal.strength, str) else signal.strength
            if signal_side == OrderSide.SELL and signal_strength != SignalStrength.VERY_STRONG:
                logger.info(f"üîç Signal {signal.side} filtr√©: march√© en mode RIDE pour {signal.symbol}")
                return True
                
        # Filtrage bas√© sur les actions recommand√©es
        action = filter_info.get('action')
        
        if action == 'no_trading':
            logger.info(f"üîç Signal {signal.side} filtr√©: action 'no_trading' active pour {signal.symbol}")
            return True
            
        elif action == 'buy_only' and (signal.side if hasattr(signal.side, 'value') else OrderSide(signal.side) if isinstance(signal.side, str) else signal.side) == OrderSide.SELL:
            logger.info(f"üîç Signal {signal.side} filtr√©: seuls les achats autoris√©s pour {signal.symbol}")
            return True
            
        elif action == 'sell_only' and (signal.side if hasattr(signal.side, 'value') else OrderSide(signal.side) if isinstance(signal.side, str) else signal.side) == OrderSide.BUY:
            logger.info(f"üîç Signal {signal.side} filtr√©: seules les ventes autoris√©es pour {signal.symbol}")
            return True
            
        return False
        
    def get_filter_status(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        Obtient le statut des filtres de march√©.
        
        Args:
            symbol: Symbole sp√©cifique ou None pour tous
            
        Returns:
            Statut des filtres
        """
        if symbol:
            if symbol in self.market_filters:
                filter_info = self.market_filters[symbol].copy()
                filter_info['is_outdated'] = self._is_filter_outdated(symbol)
                return {symbol: filter_info}
            return {symbol: {"status": "no_filter"}}
            
        # Retourner le statut de tous les filtres
        status = {}
        for sym, filter_info in self.market_filters.items():
            info = filter_info.copy()
            info['is_outdated'] = self._is_filter_outdated(sym)
            status[sym] = info
            
        return status
        
    def clear_outdated_filters(self):
        """
        Supprime les filtres obsol√®tes du cache.
        """
        symbols_to_remove = []
        current_time = time.time()
        
        for symbol, filter_info in self.market_filters.items():
            if current_time - filter_info.get('updated_at', 0) > self.max_filter_age * 2:
                symbols_to_remove.append(symbol)
                
        for symbol in symbols_to_remove:
            del self.market_filters[symbol]
            logger.info(f"Filtre obsol√®te supprim√© pour {symbol}")
            
        if symbols_to_remove:
            logger.info(f"Suppression de {len(symbols_to_remove)} filtres obsol√®tes")