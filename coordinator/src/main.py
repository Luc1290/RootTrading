"""
Point d'entr√©e principal pour le microservice Coordinator.
Valide et transmet les signaux de trading au service Trader.
"""
import logging
import signal
import sys
import time
import os
import threading
from flask import Flask, jsonify
import requests  # type: ignore
from urllib.parse import urljoin

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from coordinator import Coordinator
from shared.src.redis_client import RedisClient

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('coordinator.log')
    ]
)
logger = logging.getLogger("coordinator")


class CoordinatorService:
    """
    Service principal du Coordinator simplifi√©.
    Valide les signaux et les transmet au trader.
    """
    
    def __init__(self, trader_api_url=None, portfolio_api_url=None, port=5003):
        """
        Initialise le service Coordinator.
        
        Args:
            trader_api_url: URL de l'API du service Trader
            portfolio_api_url: URL de l'API du service Portfolio
            port: Port pour l'API HTTP
        """
        self.trader_api_url = trader_api_url or os.getenv("TRADER_API_URL", "http://trader:5002")
        self.portfolio_api_url = portfolio_api_url or os.getenv("PORTFOLIO_API_URL", "http://portfolio:8000")
        self.port = port
        
        self.coordinator = None
        self.redis_client = None
        self.running = False
        self.start_time = time.time()
        
        # Initialiser l'API Flask
        self.app = Flask(__name__)
        self.setup_routes()
        
        logger.info("‚úÖ CoordinatorService initialis√© (version simplifi√©e)")
    
    def setup_routes(self):
        """Configure les routes de l'API Flask."""
        self.app.route('/health', methods=['GET'])(self.health_check)
        self.app.route('/diagnostic', methods=['GET'])(self.diagnostic)
        self.app.route('/status', methods=['GET'])(self.get_status)
        self.app.route('/stats', methods=['GET'])(self.get_stats)   
    
    def health_check(self):
        """
        Point de terminaison pour v√©rifier l'√©tat du service.
        """
        return jsonify({
            "status": "healthy" if self.running else "stopped",
            "timestamp": time.time(),
            "uptime": time.time() - self.start_time,
            "components": {
                "coordinator": self.coordinator is not None,
                "redis": self.redis_client is not None
            }
        })
    
    def diagnostic(self):
        """
        Point de terminaison pour le diagnostic du service.
        """
        # V√©rifier la sant√© des services d√©pendants
        trader_health = self._check_service_health(self.trader_api_url)
        portfolio_health = self._check_service_health(self.portfolio_api_url)        
                
        # Construire la r√©ponse de diagnostic
        diagnostic_info = {
            "status": "operational" if self.running else "stopped",
            "timestamp": time.time(),
            "uptime": time.time() - self.start_time,
            "services": {
                "trader": trader_health,
                "portfolio": portfolio_health
            },
            "stats": self.coordinator.get_stats() if self.coordinator else {}
        }
        
        return jsonify(diagnostic_info)
        
    def get_status(self):
        """
        Renvoie l'√©tat actuel du Coordinator.
        """
        if not self.running:
            return jsonify({
                "status": "stopped"
            })
        
        # Collecter les informations d'√©tat
        status_data = {
            "running": self.running,
            "uptime": time.time() - self.start_time,
            "version": "simplified-1.0"
        }
        
        return jsonify(status_data)
    
    def get_stats(self):
        """
        R√©cup√®re les statistiques du coordinator.
        """
        if not self.coordinator:
            return jsonify({
                "status": "not_initialized"
            }), 503
        
        return jsonify(self.coordinator.get_stats())
    
    def _check_service_health(self, service_url):
        """
        V√©rifie l'√©tat de sant√© d'un service d√©pendant.
        
        Args:
            service_url: URL de base du service
            
        Returns:
            Dict avec les informations d'√©tat
        """
        try:
            health_url = urljoin(service_url, "/health")
            response = requests.get(health_url, timeout=2.0)
            
            if response.status_code == 200:
                return {
                    "status": "healthy",
                    "response_time": response.elapsed.total_seconds(),
                    "details": response.json() if response.headers.get('content-type') == 'application/json' else None
                }
            else:
                return {
                    "status": "unhealthy",
                    "status_code": response.status_code
                }
                
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }       
    
    def check_portfolio_health(self) -> bool:
        """
        V√©rifie l'√©tat de sant√© du service Portfolio.
            
        Returns:
            True si le service est en bonne sant√©, False sinon
        """
        try:
            health_url = urljoin(self.portfolio_api_url, "/health")
            response = requests.get(health_url, timeout=2.0)
            
            if response.status_code == 200:
                # Log de sant√© r√©ussi supprim√© pour r√©duire la verbosit√©
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Service Portfolio a retourn√© un code d'√©tat non-OK: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification de sant√© du service Portfolio: {str(e)}")
            return False
    
    def start_api_server(self):
        """
        D√©marre le serveur API dans un thread s√©par√©.
        """
        api_thread = threading.Thread(
            target=lambda: self.app.run(host='0.0.0.0', port=self.port, debug=False, use_reloader=False),
            daemon=True
        )
        api_thread.start()
        logger.info(f"‚úÖ API REST d√©marr√©e sur le port {self.port}")
        return api_thread
    
    def start(self):
        """
        D√©marre le service Coordinator.
        """
        if self.running:
            logger.warning("Le service est d√©j√† en cours d'ex√©cution")
            return
            
        self.running = True
        logger.info("üöÄ D√©marrage du service Coordinator RootTrading (version simplifi√©e)...")
        
        try:
            # V√©rifier que le portfolio est en ligne avant de continuer
            portfolio_health_checks = 0
            while portfolio_health_checks < 5:  # Essayer 5 fois maximum
                if self.check_portfolio_health():
                    break
                portfolio_health_checks += 1
                logger.warning(f"Tentative {portfolio_health_checks}/5: Service Portfolio non disponible, nouvelle tentative dans 5 secondes...")
                time.sleep(5)
            
            if portfolio_health_checks >= 5:
                logger.error("‚ùå Service Portfolio non disponible apr√®s 5 tentatives")
                logger.info("üí° Le Coordinator attendra que le Portfolio soit disponible...")
                # Continuer √† attendre mais avec un intervalle plus long
                while not self.check_portfolio_health():
                    logger.info("‚è≥ En attente du service Portfolio... (v√©rification toutes les 30s)")
                    time.sleep(30)
                logger.info("‚úÖ Service Portfolio maintenant disponible!")
            
            # Initialiser le coordinator
            self.coordinator = Coordinator(
                trader_api_url=self.trader_api_url,
                portfolio_api_url=self.portfolio_api_url
            )
            
            # Initialiser Redis
            self.redis_client = RedisClient()
            
            # S'abonner aux signaux filtr√©s
            self.redis_client.subscribe("roottrading:signals:filtered", self.coordinator.process_signal)
            logger.info("üì° Abonn√© aux signaux filtr√©s")
            
            # D√©marrer le serveur API
            self.start_api_server()
            
            logger.info("‚úÖ Service Coordinator d√©marr√©")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur critique lors du d√©marrage: {str(e)}")
            self.running = False
            raise
    
    def run_maintenance_loop(self):
        """
        Ex√©cute la boucle principale de maintenance du coordinateur.
        """
        # Compteurs pour les v√©rifications p√©riodiques
        last_health_check = 0
        
        # Boucle principale pour garder le service actif
        while self.running:
            time.sleep(1)
            current_time = int(time.time())
            
            # V√©rifier la sant√© du portfolio toutes les minutes
            if current_time - last_health_check >= 60:
                try:
                    if not self.check_portfolio_health():
                        logger.warning("Le service Portfolio n'est pas en bonne sant√©.")
                    last_health_check = current_time
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la v√©rification de sant√© du portfolio: {str(e)}")
    
    def stop(self):
        """
        Arr√™te proprement le service Coordinator.
        """
        if not self.running:
            return
            
        logger.info("Arr√™t du service Coordinator...")
        self.running = False
        
        # Arr√™ter les composants
        if self.redis_client:
            self.redis_client.unsubscribe_all()
            self.redis_client = None
        
        if self.coordinator:
            self.coordinator = None
        
        logger.info("Service Coordinator termin√©")
    


def main():
    """
    Fonction principale du service Coordinator.
    """
    # Cr√©er le service
    coordinator = CoordinatorService()
    
    # Configurer les gestionnaires de signaux
    def shutdown_handler(signum, frame):
        logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
        coordinator.stop()
    
    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)
    
    try:
        # D√©marrer le service
        coordinator.start()
        
        # Ex√©cuter la boucle de maintenance
        coordinator.run_maintenance_loop()
    
    except KeyboardInterrupt:
        logger.info("Programme interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans le service Coordinator: {str(e)}")
    finally:
        # Arr√™ter le service
        coordinator.stop()


if __name__ == "__main__":
    main()