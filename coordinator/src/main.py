"""
Point d'entr√©e principal pour le microservice Coordinator.
G√®re la coordination entre les signaux et les processus de trading.
"""
import logging
import signal
import sys
import time
import os
import threading
from typing import Dict, Any

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from coordinator.src.signal_handler import SignalHandler
from coordinator.src.pocket_checker import PocketChecker

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('coordinator.log')
    ]
)
logger = logging.getLogger("coordinator")

# Variables pour le contr√¥le du service
signal_handler = None
pocket_checker = None
running = True

def shutdown_handler(signum, frame):
    """
    Gestionnaire de signal pour l'arr√™t propre.
    
    Args:
        signum: Num√©ro du signal
        frame: Frame actuelle
    """
    global running
    logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
    running = False

def main():
    """
    Fonction principale du service Coordinator.
    """
    global signal_handler, pocket_checker
    
    # Configurer les gestionnaires de signaux
    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)
    
    logger.info("üöÄ D√©marrage du service Coordinator RootTrading...")
    
    # Param√®tres des services
    trader_api_url = os.getenv("TRADER_API_URL", "http://trader:5002")
    portfolio_api_url = os.getenv("PORTFOLIO_API_URL", "http://portfolio:8000")
    
    try:
        # Initialiser le v√©rificateur de poches
        pocket_checker = PocketChecker(portfolio_api_url=portfolio_api_url)
        
        # Initialiser le gestionnaire de signaux
        signal_handler = SignalHandler(
            trader_api_url=trader_api_url,
            portfolio_api_url=portfolio_api_url
        )
        
        # D√©marrer les composants
        signal_handler.start()
        
        # R√©allouer les fonds initialement
        logger.info("R√©allocation initiale des fonds...")
        pocket_checker.reallocate_funds()
        
        logger.info("‚úÖ Service Coordinator d√©marr√©")
        
        # Boucle principale pour garder le service actif
        while running:
            time.sleep(1)
            
            # Toutes les 15 minutes, v√©rifier et r√©allouer les fonds si n√©cessaire
            if int(time.time()) % 900 == 0:
                try:
                    pocket_checker.reallocate_funds()
                except Exception as e:
                    logger.error(f"Erreur lors de la r√©allocation des fonds: {str(e)}")
    
    except KeyboardInterrupt:
        logger.info("Programme interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans le service Coordinator: {str(e)}")
    finally:
        # Nettoyage des ressources
        if signal_handler:
            signal_handler.stop()
        
        logger.info("Service Coordinator termin√©")

if __name__ == "__main__":
    main()