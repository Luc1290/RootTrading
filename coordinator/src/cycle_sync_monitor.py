"""
Module pour surveiller et corriger automatiquement la synchronisation des cycles.
Solution D√âFINITIVE au probl√®me de d√©synchronisation du coordinator.
"""
import logging
import threading
import time
from typing import Dict, List, Optional
import requests
from urllib.parse import urljoin

logger = logging.getLogger(__name__)


class CycleSyncMonitor:
    """
    Moniteur de synchronisation des cycles.
    S'assure que le coordinator reste toujours synchronis√© avec la base de donn√©es.
    """
    
    def __init__(self, trader_api_url: str, check_interval: int = 30):
        """
        Initialise le moniteur de synchronisation.
        
        Args:
            trader_api_url: URL de l'API du trader
            check_interval: Intervalle de v√©rification en secondes (par d√©faut 30s)
        """
        self.trader_api_url = trader_api_url
        self.check_interval = check_interval
        self.running = False
        self.monitor_thread = None
        
        # Cache des cycles connus
        self.known_cycles = set()
        
        # Statistiques
        self.stats = {
            "checks_performed": 0,
            "discrepancies_found": 0,
            "cycles_cleaned": 0,
            "last_check": None,
            "last_discrepancy": None
        }
        
        logger.info(f"‚úÖ CycleSyncMonitor initialis√© - Intervalle: {check_interval}s")
    
    def start(self):
        """D√©marre le moniteur de synchronisation."""
        if self.running:
            logger.warning("Le moniteur est d√©j√† en cours d'ex√©cution")
            return
            
        self.running = True
        self.monitor_thread = threading.Thread(
            target=self._monitor_loop,
            daemon=True
        )
        self.monitor_thread.start()
        logger.info("‚úÖ Moniteur de synchronisation d√©marr√©")
    
    def stop(self):
        """Arr√™te le moniteur de synchronisation."""
        self.running = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("‚úÖ Moniteur de synchronisation arr√™t√©")
    
    def _monitor_loop(self):
        """Boucle principale du moniteur."""
        while self.running:
            try:
                self._check_synchronization()
                time.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de monitoring: {str(e)}")
                time.sleep(self.check_interval)
    
    def _check_synchronization(self):
        """
        V√©rifie la synchronisation entre les cycles en m√©moire et la DB.
        """
        self.stats["checks_performed"] += 1
        self.stats["last_check"] = time.time()
        
        try:
            # R√©cup√©rer les cycles actifs depuis l'API centralis√©e
            response = requests.get(
                urljoin(self.trader_api_url, "/cycles"),
                params={"confirmed": "true", "include_completed": "false"},
                timeout=5
            )
            
            if response.status_code != 200:
                logger.warning(f"Impossible de r√©cup√©rer les cycles: {response.status_code}")
                return
                
            result = response.json()
            if not result.get('success'):
                logger.warning(f"R√©ponse invalide de l'API cycles")
                return
                
            db_cycles = result.get('cycles', [])
            
            # Les cycles retourn√©s par l'API /cycles sont d√©j√† filtr√©s comme actifs
            db_cycle_ids = {cycle['id'] for cycle in db_cycles}
            
            # D√©tecter les cycles fant√¥mes (dans notre cache mais pas dans la DB)
            phantom_cycles = self.known_cycles - db_cycle_ids
            
            if phantom_cycles:
                logger.warning(f"‚ö†Ô∏è {len(phantom_cycles)} cycles fant√¥mes d√©tect√©s: {phantom_cycles}")
                self.stats["discrepancies_found"] += 1
                self.stats["last_discrepancy"] = time.time()
                
                # D√âSACTIV√â: Ne pas nettoyer automatiquement pour √©viter les suppressions erron√©es
                # for cycle_id in phantom_cycles:
                #     self.known_cycles.remove(cycle_id)
                #     self.stats["cycles_cleaned"] += 1
                #     logger.info(f"üßπ Cycle fant√¥me retir√© du cache: {cycle_id}")
                logger.info(f"üö´ Nettoyage automatique D√âSACTIV√â - Cycles suspect√©s fant√¥mes: {list(phantom_cycles)}")
            
            # Ajouter les nouveaux cycles de la DB sans supprimer les existants
            # Pour √©viter de perdre des cycles l√©gitimes non encore visibles par l'API
            self.known_cycles.update(db_cycle_ids)
            
            # Logger p√©riodiquement l'√©tat
            if self.stats["checks_performed"] % 10 == 0:
                logger.info(f"üìä Sync OK - Cycles actifs: {len(self.known_cycles)} - "
                          f"V√©rifications: {self.stats['checks_performed']} - "
                          f"Nettoyages: {self.stats['cycles_cleaned']}")
                          
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification de sync: {str(e)}")
    
    def force_sync(self) -> bool:
        """
        Force une synchronisation imm√©diate.
        
        Returns:
            True si la synchronisation a r√©ussi, False sinon
        """
        logger.info("üîÑ Synchronisation forc√©e demand√©e")
        try:
            self._check_synchronization()
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sync forc√©e: {str(e)}")
            return False
    
    def get_stats(self) -> Dict:
        """
        Retourne les statistiques du moniteur.
        
        Returns:
            Dictionnaire des statistiques
        """
        return {
            **self.stats,
            "active_cycles": len(self.known_cycles),
            "running": self.running
        }
    
    def remove_cycle_from_cache(self, cycle_id: str) -> None:
        """
        Retire un cycle du cache local.
        
        Args:
            cycle_id: ID du cycle √† retirer
        """
        if cycle_id in self.known_cycles:
            self.known_cycles.remove(cycle_id)
            self.stats["cycles_cleaned"] += 1
            logger.debug(f"‚úÖ Cycle {cycle_id} retir√© du cache local")
        else:
            logger.debug(f"‚ö†Ô∏è Cycle {cycle_id} n'√©tait pas dans le cache local")