"""
Gestionnaire de trailing sell intelligent avec tracking du prix maximum historique.
Extrait du coordinator pour all√©ger le code et am√©liorer la maintenance.
"""

import json
import logging
import time
import traceback
from datetime import datetime
from typing import Any

logger = logging.getLogger(__name__)


class TrailingSellManager:
    """
    G√®re la logique de trailing sell avec tracking intelligent du prix maximum.
    """

    def __init__(self, redis_client, service_client, db_connection=None):
        """
        Initialise le gestionnaire de trailing sell.

        Args:
            redis_client: Client Redis pour stocker les r√©f√©rences
            service_client: Client des services pour r√©cup√©rer les positions
            db_connection: Connexion DB pour les donn√©es d'analyse (optionnel)
        """
        self.redis_client = redis_client
        self.service_client = service_client
        self.db_connection = db_connection

        # Configuration stop-loss adaptatif - SCALP OPTIMIS√â
        self.stop_loss_percent_base = 0.012  # 1.2% de base - protection rapide scalp
        self.stop_loss_percent_bullish = 0.014  # 1.4% en tendance haussi√®re
        self.stop_loss_percent_strong_bullish = 0.016  # 1.6% en tendance tr√®s haussi√®re

        # Note: Trailing sell utilise d√©sormais _get_adaptive_trailing_margin() (ligne 931+)
        # Plus de seuils fixes, tout est adaptatif selon le gain atteint

        logger.info("‚úÖ TrailingSellManager initialis√©")

    def _get_redis_key(
        self, key_type: str, symbol: str, position_id: str | None = None
    ) -> str:
        """
        G√©n√®re une cl√© Redis unique avec namespace position_id.

        Args:
            key_type: Type de cl√© (cycle_max_price, sell_reference, max_tp_level)
            symbol: Symbole
            position_id: ID de position (optionnel, fallback sur symbol seul pour legacy)

        Returns:
            Cl√© Redis format√©e
        """
        if position_id:
            return f"{key_type}:{symbol}:{position_id}"
        # Legacy fallback (pour compatibilit√©, mais logguer warning)
        logger.warning(
            f"‚ö†Ô∏è Cl√© Redis {key_type}:{symbol} sans position_id - risque collision!"
        )
        return f"{key_type}:{symbol}"

    def check_trailing_sell(
        self,
        symbol: str,
        current_price: float,
        entry_price: float,
        entry_time: Any,
        position_id: str | None = None,
    ) -> tuple[bool, str]:
        """
        V√©rifie si on doit ex√©cuter le SELL selon la logique de trailing sell am√©lior√©e.
        Utilise le prix maximum historique du cycle pour une meilleure d√©cision.

        Args:
            symbol: Symbole de trading
            current_price: Prix actuel
            entry_price: Prix d'entr√©e de la position
            entry_time: Timestamp d'entr√©e (ISO string ou epoch)
            position_id: ID unique de la position (√©vite collision multi-positions)

        Returns:
            (should_sell, reason)
        """
        logger.info(f"üîç DEBUT check_trailing_sell pour {symbol} @ {current_price}")

        try:
            # Convertir timestamp ISO en epoch si n√©cessaire
            if isinstance(entry_time, str):
                entry_time_dt = datetime.fromisoformat(
                    entry_time.replace("Z", "+00:00")
                )
                entry_time_epoch = entry_time_dt.timestamp()
            else:
                entry_time_epoch = float(entry_time) if entry_time else time.time()

            precision = self._get_price_precision(current_price)
            logger.info(
                f"üîç Prix entr√©e: {entry_price:.{precision}f}, Prix actuel: {current_price:.{precision}f}"
            )

            # Calculer la performance actuelle (positif = gain, n√©gatif =
            # perte)
            performance_percent = (current_price - entry_price) / entry_price

            # R√©cup√©rer et afficher le prix max historique d√®s le d√©but
            historical_max = self._get_and_update_max_price(
                symbol, current_price, entry_price, position_id
            )
            drop_from_max = (historical_max - current_price) / historical_max
            logger.info(
                f"üìä Prix max historique: {historical_max:.{precision}f}, Chute depuis max: {drop_from_max*100:.2f}%"
            )

            # === STOP-LOSS ADAPTATIF INTELLIGENT ===
            adaptive_threshold = self._calculate_adaptive_threshold(
                symbol, entry_price, entry_time_epoch
            )

            # Affichage clair selon performance
            if performance_percent >= 0:
                logger.info(
                    f"üß† Stop-loss adaptatif pour {symbol}: {adaptive_threshold*100:.2f}% (gain actuel: +{performance_percent*100:.2f}%)"
                )
            else:
                logger.info(
                    f"üß† Stop-loss adaptatif pour {symbol}: {adaptive_threshold*100:.2f}% (perte actuelle: {abs(performance_percent)*100:.2f}%)"
                )

            # Si perte d√©passe le seuil adaptatif : SELL imm√©diat (perte =
            # performance n√©gative)
            if (
                performance_percent < 0
                and abs(performance_percent) >= adaptive_threshold
            ):
                logger.info(
                    f"üìâ Stop-loss adaptatif d√©clench√© pour {symbol}: perte {abs(performance_percent)*100:.2f}% ‚â• seuil {adaptive_threshold*100:.2f}%"
                )
                return (
                    True,
                    f"Stop-loss adaptatif d√©clench√© (perte {abs(performance_percent)*100:.2f}% ‚â• {adaptive_threshold*100:.2f}%)",
                )

            # Si position perdante mais dans la tol√©rance : garder
            if performance_percent < 0:
                logger.info(
                    f"üü° Position perdante mais dans tol√©rance pour {symbol}: perte {abs(performance_percent)*100:.2f}% < seuil {adaptive_threshold*100:.2f}%"
                )
                return (
                    False,
                    f"Position perdante mais dans tol√©rance (perte {abs(performance_percent)*100:.2f}% < {adaptive_threshold*100:.2f}%)",
                )

            # === POSITION GAGNANTE : BREAKEVEN + TAKE PROFIT + TRAILING ===
            # Maintenant coh√©rent (positif = gain)
            gain_percent = performance_percent
            logger.info(
                f"üîç Position gagnante d√©tect√©e: +{gain_percent*100:.2f}%, v√©rification breakeven/take profit/trailing"
            )

            # === BREAKEVEN INTELLIGENT : Protection critique bas√©e sur MAX historique ===
            # CORRECTION CRITIQUE : Breakeven bas√© sur le GAIN MAX atteint, pas le gain actuel
            # Sinon si max=+2% puis retour √† +0.5%, le breakeven niveau 2 ne se
            # d√©clenche jamais
            max_gain_percent = (historical_max - entry_price) / entry_price
            fee_percent = 0.0008  # 8 bps (taker Binance standard)
            breakeven_threshold_1 = 0.012  # 1.2%
            breakeven_threshold_2 = 0.020  # 2.0%

            # V√©rifier breakeven bas√© sur le MAX atteint, pas le gain actuel
            if max_gain_percent >= breakeven_threshold_2:
                # Max a d√©pass√© +2% : s√©curiser profit net minimum
                breakeven_price = entry_price * (1 + 0.002)  # Entry + 0.2%
                if current_price < breakeven_price:
                    logger.warning(
                        f"üõ°Ô∏è BREAKEVEN NIVEAU 2 d√©clench√©: prix {current_price:.{precision}f} < breakeven {breakeven_price:.{precision}f} (max atteint: +{max_gain_percent*100:.2f}%)"
                    )
                    self._cleanup_references(symbol, position_id)
                    return (
                        True,
                        f"Breakeven niveau 2 (entry+0.2%): {current_price:.{precision}f} < {breakeven_price:.{precision}f}",
                    )
                logger.debug(
                    f"üõ°Ô∏è Breakeven niveau 2 arm√© @ {breakeven_price:.{precision}f} (max: +{max_gain_percent*100:.2f}%)"
                )

            elif max_gain_percent >= breakeven_threshold_1:
                # Max a d√©pass√© +1.2% : prot√©ger entry + frais (pas de perte)
                breakeven_price = entry_price * (1 + 2 * fee_percent)  # Entry + 2xfrais
                if current_price < breakeven_price:
                    logger.warning(
                        f"üõ°Ô∏è BREAKEVEN NIVEAU 1 d√©clench√©: prix {current_price:.{precision}f} < breakeven {breakeven_price:.{precision}f} (max atteint: +{max_gain_percent*100:.2f}%)"
                    )
                    self._cleanup_references(symbol, position_id)
                    return (
                        True,
                        f"Breakeven niveau 1 (entry+fees): {current_price:.{precision}f} < {breakeven_price:.{precision}f}",
                    )
                logger.debug(
                    f"üõ°Ô∏è Breakeven niveau 1 arm√© @ {breakeven_price:.{precision}f} (max: +{max_gain_percent*100:.2f}%)"
                )

            # === TAKE PROFIT PROGRESSIF INTELLIGENT ===
            # R√©cup√©rer les donn√©es une seule fois
            atr_based_thresholds = self._get_atr_based_thresholds(symbol)
            market_regime = self._get_market_regime(symbol)
            atr_percent = self._get_atr_percentage(symbol) or 0.02

            # Mode PUMP RIDER : d√©sactiver TP progressif sur vrais pumps (amplitude + vitesse)
            # Pump = fort gain rapide, pas juste une hausse normale lente
            time_elapsed_sec = time.time() - entry_time_epoch
            pump_rider_mode = (
                market_regime in ["TRENDING_BULL", "BREAKOUT_BULL"]
                # Volatilit√© tr√®s √©lev√©e (>3% - vrais pumps)
                and atr_percent > 0.030
                and gain_percent >= 0.05  # D√©j√† +5% minimum (pas 3%)
                # <10min (vitesse = confirmation pump)
                and time_elapsed_sec < 600
            )

            if pump_rider_mode:
                logger.info(
                    f"üöÄ MODE PUMP RIDER activ√© pour {symbol}: TP progressif D√âSACTIV√â (gain {gain_percent*100:.2f}%, ATR {atr_percent*100:.1f}%)"
                )
            elif gain_percent >= 0.025:  # Activer TP progressif √† partir de +2.5%
                should_take_profit, tp_reason = self._check_progressive_take_profit(
                    symbol, gain_percent, position_id
                )
                if should_take_profit:
                    logger.info(f"üí∞ TAKE PROFIT PROGRESSIF D√âCLENCH√â: {tp_reason}")
                    self._cleanup_references(symbol, position_id)
                    return True, tp_reason
            else:
                logger.debug(
                    f"TP progressif d√©sactiv√© pour {symbol} (gain {gain_percent*100:.2f}% < 2.5%)"
                )

            # Utiliser les seuils d√©j√† r√©cup√©r√©s
            min_gain_for_trailing = atr_based_thresholds["activate_trailing_gain"]
            sell_margin = atr_based_thresholds["trailing_margin"]

            logger.info(
                f"üìä Seuils ATR pour {symbol}: activation={min_gain_for_trailing*100:.2f}%, marge={sell_margin*100:.2f}%"
            )

            # V√©rifier si le gain minimum est atteint pour activer le trailing
            if gain_percent < min_gain_for_trailing:
                logger.info(
                    f"üìä Gain insuffisant pour trailing ({gain_percent*100:.2f}% < {min_gain_for_trailing*100:.2f}%), position continue"
                )
                return (
                    False,
                    f"Gain insuffisant pour activer le trailing ({gain_percent*100:.2f}% < {min_gain_for_trailing*100:.2f}%)",
                )

            # Prix max d√©j√† r√©cup√©r√© plus haut
            logger.info(
                f"üéØ TRAILING LOGIC: Utilisation du prix MAX ({historical_max:.{precision}f}) pour d√©cision, PAS le prix d'entr√©e"
            )

            # === TRAILING ADAPTATIF PROGRESSIF ===
            # Calculer le gain depuis le max (pour savoir √† quel palier on est)
            max_gain_from_entry = (historical_max - entry_price) / entry_price

            # Marge adaptative : plus on a mont√©, plus on serre le trailing
            adaptive_margin = self._get_adaptive_trailing_margin(max_gain_from_entry)
            logger.info(
                f"üéØ TRAILING ADAPTATIF: max_gain={max_gain_from_entry*100:.2f}%, marge={adaptive_margin*100:.2f}%"
            )

            # R√©cup√©rer le prix SELL pr√©c√©dent
            previous_sell_price = self._get_previous_sell_price(symbol, position_id)
            logger.info(f"üîç Prix SELL pr√©c√©dent: {previous_sell_price}")

            # === D√âCISION DE VENTE BAS√âE SUR LE PRIX MAX ===

            # Si chute importante depuis le max (utiliser marge adaptative),
            # vendre imm√©diatement
            if drop_from_max >= adaptive_margin:
                logger.warning(
                    f"üìâ CHUTE IMPORTANTE depuis max ({drop_from_max*100:.2f}%), SELL IMM√âDIAT!"
                )
                self._cleanup_references(symbol, position_id)
                return (
                    True,
                    f"Chute de {drop_from_max*100:.2f}% depuis max {historical_max:.{precision}f}, SELL imm√©diat",
                )

            if previous_sell_price is None:
                # Premier SELL : d√©j√† prot√©g√© par adaptive_margin ligne 158
                # On stocke juste la r√©f√©rence pour le trailing classique
                self._update_sell_reference(symbol, current_price, position_id)
                logger.info(
                    f"üéØ Premier SELL @ {current_price:.{precision}f} stock√© (max: {historical_max:.{precision}f}, marge adaptative: {adaptive_margin*100:.2f}%)"
                )
                return (
                    False,
                    f"Premier SELL stock√©, max historique: {historical_max:.{precision}f}",
                )

            # === SELL SUIVANTS : TRAILING D√âJ√Ä PROT√âG√â PAR ADAPTIVE_MARGIN LIGNE 158 ===
            # Cette section ne devrait √™tre atteinte que si drop_from_max < adaptive_margin
            # Donc on fait juste le trailing classique sur le
            # previous_sell_price

            # Ensuite logique classique de trailing avec marge ATR
            sell_threshold = previous_sell_price * (1 - sell_margin)
            logger.info(
                f"üîç Seuil de vente calcul√©: {sell_threshold:.{precision}f} (marge {sell_margin*100:.2f}%)"
            )

            if current_price > previous_sell_price:
                # Prix monte : mettre √† jour r√©f√©rence
                self._update_sell_reference(symbol, current_price, position_id)
                logger.info(
                    f"üìà Prix monte: {current_price:.{precision}f} > {previous_sell_price:.{precision}f}, r√©f√©rence mise √† jour"
                )
                return (
                    False,
                    f"Prix monte, r√©f√©rence mise √† jour (max: {historical_max:.{precision}f})",
                )

            if current_price > sell_threshold:
                # Prix dans la marge de tol√©rance
                logger.info(
                    f"üü° Prix stable: {current_price:.{precision}f} > seuil {sell_threshold:.{precision}f}"
                )
                return (
                    False,
                    f"Prix dans marge de tol√©rance (max: {historical_max:.{precision}f})",
                )

            # Prix baisse significativement : VENDRE
            logger.warning(
                f"üìâ Baisse significative: {current_price:.{precision}f} ‚â§ {sell_threshold:.{precision}f}, SELL!"
            )
            self._cleanup_references(symbol, position_id)
            return (
                True,
                f"Baisse sous seuil trailing ({current_price:.{precision}f} ‚â§ {sell_threshold:.{precision}f})",
            )

        except Exception:
            logger.exception("‚ùå Erreur dans check_trailing_sell pour {symbol}")           

            logger.exception(f"‚ùå Traceback: {traceback.format_exc()}")
            # En cas d'erreur, autoriser le SELL par s√©curit√©
            return True, "Erreur technique, SELL autoris√© par d√©faut"

    def update_max_price_if_needed(
        self, symbol: str, current_price: float, position_id: str | None = None
    ) -> bool:
        """
        Met √† jour le prix max si le prix actuel est plus √©lev√©.
        Appel√© par le monitoring automatique.

        Args:
            symbol: Symbole
            current_price: Prix actuel
            position_id: ID unique de position

        Returns:
            True si le prix max a √©t√© mis √† jour
        """
        try:
            max_price_key = self._get_redis_key("cycle_max_price", symbol, position_id)
            max_price_data = self.redis_client.get(max_price_key)

            historical_max = None
            if max_price_data:
                try:
                    if isinstance(max_price_data, dict):
                        historical_max = float(max_price_data.get("price", 0))
                    elif isinstance(max_price_data, str | bytes):
                        if isinstance(max_price_data, bytes):
                            max_price_data = max_price_data.decode("utf-8")
                        max_price_dict = json.loads(max_price_data)
                        historical_max = float(max_price_dict.get("price", 0))
                except Exception:
                    logger.exception("Erreur parsing prix max")

            if historical_max is None or current_price > historical_max:
                self._update_cycle_max_price(symbol, current_price, position_id)
                precision = self._get_price_precision(current_price)
                logger.info(
                    f"üìà Nouveau max pour {symbol}: {current_price:.{precision}f}"
                )
                return True

            return False

        except Exception:
            logger.exception("Erreur mise √† jour prix max {symbol}")
            return False

    def _get_and_update_max_price(
        self,
        symbol: str,
        current_price: float,
        entry_price: float,
        position_id: str | None = None,
    ) -> float:
        """
        R√©cup√®re et met √† jour le prix max historique du cycle.

        Args:
            symbol: Symbole
            current_price: Prix actuel
            entry_price: Prix d'entr√©e (utilis√© si pas de max stock√©)
            position_id: ID unique de position

        Returns:
            Prix maximum historique
        """
        # R√©cup√©rer le prix max historique
        max_price_key = self._get_redis_key("cycle_max_price", symbol, position_id)
        max_price_data = self.redis_client.get(max_price_key)
        historical_max = None

        if max_price_data:
            try:
                if isinstance(max_price_data, dict):
                    historical_max = float(max_price_data.get("price", 0))
                elif isinstance(max_price_data, str | bytes):
                    if isinstance(max_price_data, bytes):
                        max_price_data = max_price_data.decode("utf-8")
                    max_price_dict = json.loads(max_price_data)
                    historical_max = float(max_price_dict.get("price", 0))
            except Exception:
                logger.exception("Erreur r√©cup√©ration prix max")

        # Si pas de prix max, initialiser avec le prix d'entr√©e
        if historical_max is None:
            historical_max = entry_price
            self._update_cycle_max_price(symbol, entry_price, position_id)

        # Mettre √† jour si le prix actuel est plus √©lev√©
        if current_price > historical_max:
            historical_max = current_price
            self._update_cycle_max_price(symbol, current_price, position_id)
            precision = self._get_price_precision(current_price)
            logger.info(
                f"üìä Nouveau prix max pour {symbol}: {current_price:.{precision}f}"
            )

        return historical_max

    def _get_previous_sell_price(
        self, symbol: str, position_id: str | None = None
    ) -> float | None:
        """
        R√©cup√®re le prix du SELL pr√©c√©dent stock√© en r√©f√©rence.

        Args:
            symbol: Symbole √† v√©rifier
            position_id: ID unique de position

        Returns:
            Prix du SELL pr√©c√©dent ou None
        """
        try:
            ref_key = self._get_redis_key("sell_reference", symbol, position_id)
            price_data = self.redis_client.get(ref_key)

            if not price_data:
                return None

            logger.debug(
                f"üîç R√©cup√©ration sell reference {symbol}: type={type(price_data)}, data={price_data}"
            )

            # G√©rer tous les cas possibles de retour Redis
            if isinstance(price_data, dict):
                if "price" in price_data:
                    return float(price_data["price"])
                logger.warning(f"Cl√© 'price' manquante dans dict Redis pour {symbol}")
                return None

            if isinstance(price_data, str | bytes):
                try:
                    if isinstance(price_data, bytes):
                        price_data = price_data.decode("utf-8")

                    parsed_data = json.loads(price_data)
                    if isinstance(parsed_data, dict) and "price" in parsed_data:
                        return float(parsed_data["price"])
                    logger.warning(f"Format JSON invalide pour {symbol}: {parsed_data}")
                    return None
                except json.JSONDecodeError:
                    logger.exception("Erreur JSON decode pour {symbol}")
                    return None

            else:
                logger.warning(
                    f"Type Redis inattendu pour {symbol}: {type(price_data)}"
                )
                return None

        except Exception:
            logger.exception("Erreur r√©cup√©ration sell reference pour {symbol}")
            return None

    def _update_sell_reference(
        self, symbol: str, price: float, position_id: str | None = None
    ) -> None:
        """
        Met √† jour la r√©f√©rence de prix SELL pour un symbole.

        Args:
            symbol: Symbole
            price: Nouveau prix de r√©f√©rence
            position_id: ID unique de position
        """
        try:
            ref_key = self._get_redis_key("sell_reference", symbol, position_id)
            ref_data = {"price": price, "timestamp": int(time.time() * 1000)}
            # TTL de 7 jours (604800s) - sera refresh √† chaque check
            self.redis_client.set(ref_key, json.dumps(ref_data), expiration=604800)
        except Exception:
            logger.exception("Erreur mise √† jour sell reference pour {symbol}")

    def _clear_sell_reference(
        self, symbol: str, position_id: str | None = None
    ) -> None:
        """
        Supprime la r√©f√©rence de prix SELL pour un symbole.

        Args:
            symbol: Symbole
            position_id: ID unique de position
        """
        try:
            ref_key = self._get_redis_key("sell_reference", symbol, position_id)
            self.redis_client.delete(ref_key)
            logger.info(f"üßπ R√©f√©rence SELL supprim√©e pour {symbol}")
        except Exception:
            logger.exception("Erreur suppression sell reference pour {symbol}")

    def _update_cycle_max_price(
        self, symbol: str, price: float, position_id: str | None = None
    ) -> None:
        """
        Met √† jour le prix maximum historique d'un cycle.

        Args:
            symbol: Symbole
            price: Nouveau prix maximum
            position_id: ID unique de position
        """
        try:
            max_key = self._get_redis_key("cycle_max_price", symbol, position_id)
            max_data = {"price": price, "timestamp": int(time.time() * 1000)}
            # TTL de 7 jours (604800s) - sera refresh √† chaque check
            self.redis_client.set(max_key, json.dumps(max_data), expiration=604800)
            logger.debug(f"üìà Prix max mis √† jour pour {symbol}: {price}")
        except Exception:
            logger.exception("Erreur mise √† jour prix max pour {symbol}")

    def _clear_cycle_max_price(
        self, symbol: str, position_id: str | None = None
    ) -> None:
        """
        Supprime le prix maximum historique d'un cycle.

        Args:
            symbol: Symbole
            position_id: ID unique de position
        """
        try:
            max_key = self._get_redis_key("cycle_max_price", symbol, position_id)
            self.redis_client.delete(max_key)
            logger.info(f"üßπ Prix max historique supprim√© pour {symbol}")
        except Exception:
            logger.exception("Erreur suppression prix max pour {symbol}")

    # SUPPRIM√â - fonction dupliqu√©e, gard√©e seulement la version mise √† jour
    # plus bas

    def _get_atr_based_thresholds(self, symbol: str) -> dict[str, float]:
        """
        Calcule les seuils adaptatifs OPTIMIS√âS pour maximiser les gains en haussier.

        Args:
            symbol: Symbole √† analyser

        Returns:
            Dict avec trailing_margin, activate_trailing_gain, adaptive_sl
        """
        try:
            # R√©cup√©rer ATR et donn√©es de march√©
            atr_percent = self._get_atr_percentage(symbol)
            market_regime = self._get_market_regime(symbol)

            if atr_percent is None:
                logger.debug(f"Pas d'ATR pour {symbol}, seuils par d√©faut scalp")
                return {
                    "trailing_margin": 0.012,  # 1.2% par d√©faut
                    "activate_trailing_gain": 0.015,  # 1.5% activation scalp
                    "adaptive_sl": self.stop_loss_percent_base,
                }

            # === ACTIVATION TRAILING : Optimis√©e pour scalp intraday ===
            # Base 1.5% pour scalp BTC - capture gains r√©alistes sans
            # over-trading
            activate_trailing_gain = max(0.015, 0.8 * atr_percent)  # Min 1.5% scalp

            # === MARGES TRAILING : Adaptatives au r√©gime de march√© ===
            base_trailing_margin = max(
                0.012, 1.2 * atr_percent
            )  # Base 1.2% min au lieu de 0.8%

            # Multiplicateurs selon le r√©gime (optimis√©s pour gains)
            regime_multipliers = {
                # Bull fort = marges tr√®s larges (ride les pumps)
                "TRENDING_BULL": 1.8,
                "BREAKOUT_BULL": 1.6,  # Breakout = marges larges
                "RANGING": 1.0,  # Range = marges normales
                "TRANSITION": 1.2,  # Transition = l√©g√®rement plus large
                "TRENDING_BEAR": 0.8,  # Bear = marges plus strictes
                "VOLATILE": 1.4,  # Volatile = marges mod√©r√©ment larges
                "BREAKOUT_BEAR": 0.7,  # Bear breakout = tr√®s strict
            }

            regime_factor = regime_multipliers.get(
                market_regime, 1.2
            )  # D√©faut l√©g√®rement optimiste
            trailing_margin = base_trailing_margin * regime_factor

            # Contraintes finales scalp
            trailing_margin = max(0.012, min(0.030, trailing_margin))  # 1.2% √† 3.0%
            activate_trailing_gain = max(
                0.015, min(0.025, activate_trailing_gain)
            )  # 1.5% √† 2.5% scalp

            # Stop-loss adaptatif √©quilibr√©
            adaptive_sl = min(0.025, max(1.2 * atr_percent, 0.016))

            logger.debug(
                f"üöÄ Seuils OPTIMIS√âS {symbol}: trailing={trailing_margin*100:.2f}%, "
                f"activation={activate_trailing_gain*100:.2f}%, SL={adaptive_sl*100:.2f}% "
                f"(ATR={atr_percent*100:.2f}%, r√©gime={market_regime})"
            )

            return {
                "trailing_margin": trailing_margin,
                "activate_trailing_gain": activate_trailing_gain,
                "adaptive_sl": adaptive_sl,
            }

        except Exception:
            logger.exception("Erreur calcul seuils optimis√©s {symbol}")
            return {
                "trailing_margin": 0.012,  # Fallback scalp
                "activate_trailing_gain": 0.015,  # 1.5% scalp coh√©rent
                "adaptive_sl": self.stop_loss_percent_base,
            }

    def _get_atr_percentage(self, symbol: str) -> float | None:
        """
        R√©cup√®re l'ATR en pourcentage depuis les donn√©es d'analyse.

        Args:
            symbol: Symbole

        Returns:
            ATR en pourcentage (ex: 0.025 = 2.5%) ou None
        """
        if not self.db_connection:
            return None

        try:
            with self.db_connection.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT ad.atr_14, md.close
                    FROM analyzer_data ad
                    JOIN market_data md ON (ad.symbol = md.symbol AND ad.timeframe = md.timeframe AND ad.time = md.time)
                    WHERE ad.symbol = %s AND ad.timeframe = '1m'
                    AND ad.atr_14 IS NOT NULL
                    ORDER BY ad.time DESC
                    LIMIT 1
                """,
                    (symbol,),
                )

                result = cursor.fetchone()
                if result and result[0] and result[1]:
                    atr_value = float(result[0])
                    close_price = float(result[1])
                    return atr_value / close_price if close_price > 0 else 0
                return None
        except Exception:
            logger.exception("Erreur r√©cup√©ration ATR {symbol}")
            return None

    def _get_market_regime(self, symbol: str) -> str:
        """
        R√©cup√®re le r√©gime de march√© actuel pour un symbole.

        Args:
            symbol: Symbole √† analyser

        Returns:
            R√©gime de march√© ou 'UNKNOWN'
        """
        if not self.db_connection:
            return "UNKNOWN"

        try:
            with self.db_connection.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT market_regime
                    FROM analyzer_data
                    WHERE symbol = %s AND timeframe = '1m'
                    AND market_regime IS NOT NULL
                    ORDER BY time DESC
                    LIMIT 1
                """,
                    (symbol,),
                )

                result = cursor.fetchone()
                if result and result[0]:
                    return result[0]
                return "UNKNOWN"
        except Exception:
            logger.exception("Erreur r√©cup√©ration r√©gime march√© {symbol}")
            return "UNKNOWN"

    def _calculate_adaptive_threshold(
        self, symbol: str, entry_price: float, entry_time: float
    ) -> float:
        """
        Calcule le seuil de stop-loss adaptatif avec ATR et donn√©es d'analyse.

        Args:
            symbol: Symbole √† analyser
            entry_price: Prix d'entr√©e de la position
            entry_time: Timestamp d'entr√©e (epoch)

        Returns:
            Seuil de perte acceptable avant stop-loss (ex: 0.015 = 1.5%)
        """
        try:
            # R√©cup√©rer les seuils ATR
            atr_thresholds = self._get_atr_based_thresholds(symbol)
            atr_based_sl = atr_thresholds["adaptive_sl"]

            # R√©cup√©rer les donn√©es d'analyse si disponibles
            analysis = (
                self._get_latest_analysis_data(symbol) if self.db_connection else None
            )

            if not analysis:
                logger.debug(
                    f"Pas de donn√©es d'analyse pour {symbol}, utilisation ATR seul: {atr_based_sl*100:.2f}%"
                )
                return atr_based_sl

            # R√©cup√©rer le r√©gime de march√©
            analysis.get("market_regime", "UNKNOWN")

            # Calculer les facteurs d'ajustement (version all√©g√©e)
            regime_factor = self._calculate_regime_factor(analysis)
            support_factor = self._calculate_support_factor(analysis, entry_price)
            time_factor = self._calculate_time_factor(entry_time)

            # Combiner ATR avec moyenne pond√©r√©e (√©viter l'√©crasement par produit)
            # ATR = base (60%), r√©gime = important (25%), support/temps =
            # mod√©r√© (15%)
            weighted_factor = (
                0.60 * 1.0  # ATR base (neutre √† 1.0)
                + 0.25 * regime_factor
                + 0.10 * support_factor
                + 0.05 * time_factor
            )
            adaptive_threshold = float(atr_based_sl) * float(weighted_factor)

            # Contraintes finales √©quilibr√©es - coupe faux signaux, pr√©serve
            # vrais trades
            adaptive_threshold = max(
                0.014, min(0.025, adaptive_threshold)
            )  # 1.4%-2.5% - √©quilibr√©

            logger.debug(
                f"üß† Stop-loss adaptatif ATR+analyse {symbol}: {adaptive_threshold*100:.2f}%"
            )

            return adaptive_threshold

        except Exception:
            logger.exception("Erreur calcul stop-loss adaptatif {symbol}")
            return self.stop_loss_percent_base

    def _get_latest_analysis_data(self, symbol: str) -> dict | None:
        """
        R√©cup√®re les donn√©es d'analyse les plus r√©centes.
        """
        if not self.db_connection:
            return None

        try:
            with self.db_connection.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT
                        market_regime, regime_strength, regime_confidence,
                        volatility_regime, atr_percentile,
                        nearest_support, support_strength,
                        trend_alignment, directional_bias
                    FROM analyzer_data
                    WHERE symbol = %s AND timeframe = '1m'
                    ORDER BY time DESC
                    LIMIT 1
                """,
                    (symbol,),
                )

                result = cursor.fetchone()
                if result:
                    return {
                        "market_regime": result[0],
                        "regime_strength": result[1],
                        "regime_confidence": float(result[2]) if result[2] else 50.0,
                        "volatility_regime": result[3],
                        "atr_percentile": float(result[4]) if result[4] else 50.0,
                        "nearest_support": float(result[5]) if result[5] else None,
                        "support_strength": result[6],
                        "trend_alignment": result[7],
                        "directional_bias": result[8],
                    }
                return None
        except Exception:
            logger.exception("Erreur r√©cup√©ration donn√©es analyse {symbol}")
            return None

    def _calculate_regime_factor(self, analysis: dict) -> float:
        """Calcule le facteur bas√© sur le r√©gime de march√©."""
        regime = analysis.get("market_regime", "UNKNOWN")
        strength = analysis.get("regime_strength", "WEAK")
        confidence = float(analysis.get("regime_confidence", 50))

        # LOGIQUE CORRIG√âE : en bear, SL plus large (laisser respirer
        # reversals)
        regime_multipliers = {
            "TRENDING_BULL": 1.2,  # Bull = plus tol√©rant (seuil plus large)
            "BREAKOUT_BULL": 1.1,  # Breakout bull = mod√©r√©ment tol√©rant
            "RANGING": 1.0,  # Range = neutre
            "TRANSITION": 0.95,  # Transition = l√©g√®rement strict
            # Bear = TOL√âRANT (laisser respirer reversals)
            "TRENDING_BEAR": 1.1,
            "VOLATILE": 0.9,  # Volatile = l√©g√®rement strict
            "BREAKOUT_BEAR": 1.0,  # Breakout bear = neutre (reversal possible)
        }

        base_factor = regime_multipliers.get(regime, 1.0)

        strength_multipliers = {
            "EXTREME": 1.2,  # R√©duit de 1.3 √† 1.2
            "STRONG": 1.1,
            "MODERATE": 1.0,
            "WEAK": 0.9,  # Augment√© de 0.8 √† 0.9 (moins punitif)
        }

        strength_factor = strength_multipliers.get(strength, 1.0)
        confidence_factor = 0.7 + (float(confidence) / 100.0) * 0.6

        return float(base_factor * strength_factor * confidence_factor)

    def _calculate_volatility_factor(self, analysis: dict) -> float:
        """Calcule le facteur bas√© sur la volatilit√©."""
        volatility_regime = analysis.get("volatility_regime", "normal")
        atr_percentile = float(analysis.get("atr_percentile", 50))

        volatility_multipliers = {
            "low": 0.7,
            "normal": 1.0,
            "high": 1.4,
            "extreme": 1.8,
        }

        base_factor = volatility_multipliers.get(volatility_regime, 1.0)
        percentile_factor = 0.6 + (float(atr_percentile) / 100.0) * 0.8

        return float(base_factor * percentile_factor)

    def _calculate_support_factor(self, analysis: dict, entry_price: float) -> float:
        """Calcule le facteur bas√© sur la proximit√© des supports."""
        nearest_support = analysis.get("nearest_support")
        support_strength = analysis.get("support_strength", "WEAK")

        if not nearest_support:
            return 1.0

        support_price = float(nearest_support)
        entry_price_float = float(entry_price)
        support_distance = abs(entry_price_float - support_price) / entry_price_float

        strength_multipliers = {
            "MAJOR": 1.6,
            "STRONG": 1.3,
            "MODERATE": 1.1,
            "WEAK": 0.9,
        }

        strength_factor = strength_multipliers.get(support_strength, 1.0)

        if support_distance < 0.01:
            distance_factor = 1.4
        elif support_distance < 0.02:
            distance_factor = 1.2
        elif support_distance < 0.05:
            distance_factor = 1.0
        else:
            distance_factor = 0.8

        return float(strength_factor * distance_factor)

    def _calculate_time_factor(self, entry_time: float) -> float:
        """
        Calcule le facteur bas√© sur le temps √©coul√© - LOGIQUE SCALP CORRIG√âE.
        Trade r√©cent = strict (non confirm√©), trade ancien = tol√©rant (a r√©sist√©).
        """
        time_elapsed = float(time.time() - float(entry_time))
        minutes_elapsed = time_elapsed / 60.0

        # LOGIQUE INVERS√âE : strict sur r√©cent, tol√©rant sur ancien
        if minutes_elapsed < 2:
            return 0.8  # Tr√®s r√©cent = strict (non confirm√©, risque max)
        if minutes_elapsed < 10:
            return 1.0  # R√©cent = neutre
        if minutes_elapsed < 60:
            return 1.1  # Confirm√© = tol√©rant (a tenu 10-60min)
        return 1.2  # Tr√®s ancien (>1h) = tr√®s tol√©rant (a bien r√©sist√©)

    def get_current_price(self, symbol: str) -> float | None:
        """
        R√©cup√®re le prix actuel d'un symbole depuis Redis ou DB en fallback.

        Args:
            symbol: Symbole √† r√©cup√©rer

        Returns:
            Prix actuel ou None
        """
        try:
            # Essayer de r√©cup√©rer depuis Redis (ticker)
            ticker_key = f"ticker:{symbol}"
            ticker_data = self.redis_client.get(ticker_key)

            if ticker_data:
                if isinstance(ticker_data, dict):
                    price = ticker_data.get("price")
                    if price:
                        return float(price)
                elif isinstance(ticker_data, str):
                    ticker_dict = json.loads(ticker_data)
                    price = ticker_dict.get("price")
                    if price:
                        return float(price)

            # Fallback: essayer market_data Redis
            market_key = f"market_data:{symbol}:1m"
            market_data = self.redis_client.get(market_key)

            if market_data:
                if isinstance(market_data, dict):
                    price = market_data.get("close")
                    if price:
                        return float(price)
                elif isinstance(market_data, str):
                    market_dict = json.loads(market_data)
                    price = market_dict.get("close")
                    if price:
                        return float(price)

            # Fallback final: r√©cup√©rer depuis la base de donn√©es
            if self.db_connection:
                try:
                    with self.db_connection.cursor() as cursor:
                        cursor.execute(
                            """
                            SELECT close
                            FROM market_data
                            WHERE symbol = %s
                            ORDER BY time DESC
                            LIMIT 1
                        """,
                            (symbol,),
                        )

                        result = cursor.fetchone()
                        if result and result[0]:
                            logger.info(
                                f"üíæ Prix r√©cup√©r√© depuis DB pour {symbol}: {result[0]}"
                            )
                            return float(result[0])
                        logger.warning(f"üíæ Aucun r√©sultat DB pour {symbol}")
                except Exception:
                    logger.exception("‚ùå Erreur DB pour : ")
            else:
                logger.warning(f"üíæ Pas de connexion DB pour {symbol}")

            logger.warning(f"‚ö†Ô∏è Prix non trouv√© pour {symbol} (Redis + DB)")
            return None

        except Exception:
            logger.exception("‚ùå Erreur r√©cup√©ration prix pour {symbol}")
            return None

    def _check_progressive_take_profit(
        self, symbol: str, gain_percent: float, position_id: str | None = None
    ) -> tuple[bool, str]:
        """
        Take profit progressif AM√âLIOR√â : vend si rechute significative depuis le palier atteint.
        Permet de rider les pumps tout en fermant les cycles efficacement.

        Args:
            symbol: Symbole pour tracking du palier
            gain_percent: Pourcentage de gain actuel (ex: 0.025 = 2.5%)
            position_id: ID unique de position

        Returns:
            (should_sell, reason)
        """
        # Paliers TP SIMPLIFI√âS - focus gains r√©els, stop micro-trading
        # destructeur
        tp_levels = [
            0.12,  # 12% - gains exceptionnels (pump majeur)
            0.08,  # 8% - gains tr√®s importants
            0.05,  # 5% - gains importants
            0.03,  # 3% - gain solide
            0.02,  # 2% - gain minimal viable (couvre frais + marge)
        ]

        # Trouver le palier le plus √©lev√© atteint actuellement
        current_tp_level = None
        for level in tp_levels:
            if gain_percent >= level:
                current_tp_level = level
                break

        if current_tp_level is None:
            # Aucun palier atteint, pas de TP
            return False, f"Aucun palier TP atteint (+{gain_percent*100:.2f}%)"

        # R√©cup√©rer le palier max historique pour ce symbole
        historical_tp_key = self._get_redis_key("max_tp_level", symbol, position_id)
        historical_tp_data = self.redis_client.get(historical_tp_key)
        historical_max_tp = None

        if historical_tp_data:
            try:
                if isinstance(historical_tp_data, str | bytes):
                    if isinstance(historical_tp_data, bytes):
                        historical_tp_data = historical_tp_data.decode("utf-8")
                    historical_tp_dict = json.loads(historical_tp_data)
                    historical_max_tp = float(historical_tp_dict.get("level", 0))
                elif isinstance(historical_tp_data, dict):
                    historical_max_tp = float(historical_tp_data.get("level", 0))
            except Exception:
                logger.exception("Erreur r√©cup√©ration palier TP historique {symbol}")

        # Initialiser si pas de palier historique
        if historical_max_tp is None:
            historical_max_tp = 0

        # Mettre √† jour le palier max si on a atteint un nouveau sommet
        if current_tp_level > historical_max_tp:
            self._update_max_tp_level(symbol, current_tp_level, position_id)
            logger.info(
                f"üéØ Nouveau palier TP pour {symbol}: +{current_tp_level*100:.1f}% (√©tait +{historical_max_tp*100:.1f}%)"
            )
            historical_max_tp = current_tp_level

        # VENDRE si rechute significative depuis le palier max - tol√©rance INVERS√âE (strict sur gros gains)
        # Plus le gain est gros, plus on prot√®ge (tol√©rance serr√©e)
        if historical_max_tp >= 0.08:  # Gains exceptionnels (>8%)
            tolerance_factor = 0.85  # Garde 85% du palier (strict - rend 15%)
        elif historical_max_tp >= 0.05:  # Gros gains (5-8%)
            tolerance_factor = 0.80  # Garde 80% du palier (rend 20%)
        elif historical_max_tp >= 0.03:  # Gains moyens (3-5%)
            tolerance_factor = 0.75  # Garde 75% du palier (rend 25%)
        else:  # Petits gains (<3%)
            tolerance_factor = (
                # Garde 70% du palier (permissif - rend 30%, acceptable en
                # scalp)
                0.70
            )

        adjusted_threshold = historical_max_tp * tolerance_factor

        if gain_percent < adjusted_threshold:
            logger.warning(
                f"üìâ Rechute significative pour {symbol}: +{gain_percent*100:.2f}% < seuil ajust√© +{adjusted_threshold*100:.2f}% (palier max: +{historical_max_tp*100:.1f}%)"
            )
            self._clear_max_tp_level(symbol, position_id)  # Nettoyer apr√®s vente
            return (
                True,
                f"Rechute sous seuil TP ajust√© +{adjusted_threshold*100:.2f}% (palier: +{historical_max_tp*100:.1f}%, gain: +{gain_percent*100:.2f}%)",
            )

        # Sinon, continuer √† surveiller
        return (
            False,
            f"Au-dessus palier TP +{historical_max_tp*100:.1f}% (+{gain_percent*100:.2f}%), surveillance active",
        )

    def _update_max_tp_level(
        self, symbol: str, tp_level: float, position_id: str | None = None
    ) -> None:
        """
        Met √† jour le palier TP maximum atteint pour un symbole.

        Args:
            symbol: Symbole
            tp_level: Nouveau palier TP maximum (ex: 0.025 = 2.5%)
            position_id: ID unique de position
        """
        try:
            tp_key = self._get_redis_key("max_tp_level", symbol, position_id)
            tp_data = {"level": tp_level, "timestamp": int(time.time() * 1000)}
            # TTL de 7 jours (604800s) - sera refresh √† chaque check
            self.redis_client.set(tp_key, json.dumps(tp_data), expiration=604800)
            logger.debug(f"üéØ Palier TP mis √† jour pour {symbol}: +{tp_level*100:.1f}%")
        except Exception:
            logger.exception("Erreur mise √† jour palier TP pour {symbol}")

    def _clear_max_tp_level(self, symbol: str, position_id: str | None = None) -> None:
        """
        Supprime le palier TP maximum pour un symbole.

        Args:
            symbol: Symbole
            position_id: ID unique de position
        """
        try:
            tp_key = self._get_redis_key("max_tp_level", symbol, position_id)
            self.redis_client.delete(tp_key)
            logger.info(f"üßπ Palier TP max supprim√© pour {symbol}")
        except Exception:
            logger.exception("Erreur suppression palier TP pour {symbol}")

    def _get_adaptive_trailing_margin(self, max_gain_percent: float) -> float:
        """
        Calcule une marge de trailing adaptative selon le gain maximum atteint.
        Plus le gain est √©lev√©, plus la marge est serr√©e pour prot√©ger les profits.

        Args:
            max_gain_percent: Gain maximum atteint depuis l'entr√©e (ex: 0.02 = 2%)

        Returns:
            Marge de tol√©rance √† la baisse depuis le max (ex: 0.005 = 0.5%)
        """
        # Paliers progressifs : plus on monte, plus on prot√®ge
        if max_gain_percent >= 0.08:  # Gain ‚â• 8% (exceptionnel)
            margin = 0.004  # Tol√©rance 0.4% seulement (verrouiller gains)
        elif max_gain_percent >= 0.05:  # Gain 5-8% (tr√®s bon)
            margin = 0.006  # Tol√©rance 0.6%
        elif max_gain_percent >= 0.03:  # Gain 3-5% (bon)
            margin = 0.008  # Tol√©rance 0.8%
        elif max_gain_percent >= 0.02:  # Gain 2-3% (solide)
            margin = 0.010  # Tol√©rance 1.0%
        elif max_gain_percent >= 0.015:  # Gain 1.5-2% (correct)
            margin = 0.012  # Tol√©rance 1.2%
        elif max_gain_percent >= 0.01:  # Gain 1-1.5% (d√©but)
            margin = 0.014  # Tol√©rance 1.4%
        else:  # Gain < 1%
            margin = 0.015  # Tol√©rance 1.5% (large pour respirer)

        return margin

    def _cleanup_references(self, symbol: str, position_id: str | None = None) -> None:
        """
        Nettoie toutes les r√©f√©rences pour un symbole apr√®s une vente.

        Args:
            symbol: Symbole
            position_id: ID unique de position
        """
        self._clear_sell_reference(symbol, position_id)
        self._clear_cycle_max_price(symbol, position_id)
        self._clear_max_tp_level(symbol, position_id)
        logger.info(f"üßπ Toutes les r√©f√©rences nettoy√©es pour {symbol}")

    def _get_price_precision(self, price: float) -> int:
        """
        D√©termine la pr√©cision d'affichage selon le niveau de prix.
        """
        if price >= 1000:
            return 2
        if price >= 100:
            return 3
        if price >= 1 or price >= 0.01:
            return 6
        if price >= 0.0001:
            return 10
        return 12
