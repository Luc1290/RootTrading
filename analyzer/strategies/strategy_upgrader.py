"""
Module d'upgrade automatique pour les strat√©gies.
Ajoute des filtres sophistiqu√©s aux generate_signal existants sans tout r√©√©crire.
"""
import logging
from typing import Optional, Dict, Any
import numpy as np
import pandas as pd
from shared.src.enums import OrderSide
from shared.src.schemas import StrategySignal

logger = logging.getLogger(__name__)


def upgrade_signal_with_filters(strategy_instance, original_signal: Optional[StrategySignal], 
                               df: pd.DataFrame) -> Optional[StrategySignal]:
    """
    Upgrade un signal existant avec des filtres sophistiqu√©s.
    
    Args:
        strategy_instance: Instance de la strat√©gie (doit h√©riter AdvancedFiltersMixin)
        original_signal: Signal original g√©n√©r√© par la strat√©gie
        df: DataFrame des donn√©es de march√©
        
    Returns:
        Signal upgrad√© ou None si filtr√©
    """
    if original_signal is None:
        return None
    
    try:
        # === APPLICATION DES FILTRES SOPHISTIQUES ===
        
        # 1. FILTRE VOLUME
        volumes = df['volume'].values if 'volume' in df.columns else None
        volume_score = strategy_instance._analyze_volume_confirmation_common(volumes) if volumes is not None else 0.7
        if volume_score < 0.4:
            logger.debug(f"[{strategy_instance.name}] Signal rejet√© - volume insuffisant ({volume_score:.2f})")
            return None
        
        # 2. FILTRE TREND ALIGNMENT
        trend_score = strategy_instance._analyze_trend_alignment_common(df, original_signal.side)
        
        # 3. FILTRE RSI CONFIRMATION
        rsi_score = strategy_instance._calculate_rsi_confirmation_common(df, original_signal.side)
        
        # 4. FILTRE SUPPORT/RESISTANCE
        current_price = df['close'].iloc[-1]
        sr_score = strategy_instance._detect_support_resistance_common(df, current_price, original_signal.side)
        
        # 5. FILTRE ATR ENVIRONMENT
        atr_score = strategy_instance._analyze_atr_environment_common(df)
        
        # === CALCUL DE CONFIANCE COMPOSITE ===
        scores = {
            'original': original_signal.confidence,  # Confiance originale
            'volume': volume_score,
            'trend': trend_score,
            'rsi': rsi_score,
            'sr': sr_score,
            'atr': atr_score
        }
        
        weights = {
            'original': 0.40,  # Poids principal √† la strat√©gie originale
            'volume': 0.20,    # Volume important
            'trend': 0.15,     # Tendance sup√©rieure
            'rsi': 0.10,       # RSI confirmation
            'sr': 0.10,        # Support/r√©sistance
            'atr': 0.05       # Environnement ATR
        }
        
        confidence = strategy_instance._calculate_composite_confidence_common(scores, weights)
        
        # Seuil minimum de confiance
        if confidence < 0.65:
            logger.debug(f"[{strategy_instance.name}] Signal rejet√© - confiance trop faible ({confidence:.2f})")
            return None
        
        # === UPGRADE DU SIGNAL ===
        # Cr√©er une copie du signal avec confiance upgrad√©e
        upgraded_signal = StrategySignal(
            strategy=original_signal.strategy,
            symbol=original_signal.symbol,
            side=original_signal.side,
            timestamp=original_signal.timestamp,
            price=original_signal.price,
            confidence=confidence,  # Nouvelle confiance composite
            strength=original_signal.strength,
            metadata=original_signal.metadata.copy()
        )
        
        # Ajouter les m√©tadonn√©es des filtres
        upgraded_signal.metadata.update({
            'upgraded_with_filters': True,
            'original_confidence': original_signal.confidence,
            'volume_score': volume_score,
            'trend_score': trend_score,
            'rsi_score': rsi_score,
            'sr_score': sr_score,
            'atr_score': atr_score,
            'filter_version': '1.0'
        })
        
        logger.info(f"üîÑ [{strategy_instance.name}] Signal upgrad√©: confiance {original_signal.confidence:.2f} ‚Üí {confidence:.2f}")
        
        return upgraded_signal
        
    except Exception as e:
        logger.error(f"Erreur upgrade signal: {e}")
        # Retourner le signal original en cas d'erreur
        return original_signal


def wrap_generate_signal(strategy_instance, original_generate_signal_method):
    """
    Wrapper pour la m√©thode generate_signal qui applique automatiquement les filtres.
    
    Args:
        strategy_instance: Instance de la strat√©gie
        original_generate_signal_method: M√©thode generate_signal originale
        
    Returns:
        M√©thode generate_signal wrapp√©e
    """
    def wrapped_generate_signal():
        # Appeler la m√©thode originale
        original_signal = original_generate_signal_method()
        
        # Si pas de signal, retourner None
        if original_signal is None:
            return None
        
        # Obtenir les donn√©es DataFrame
        df = strategy_instance.get_data_as_dataframe()
        if df is None:
            return original_signal  # Retourner l'original si pas de donn√©es
        
        # Appliquer les filtres sophistiqu√©s
        return upgrade_signal_with_filters(strategy_instance, original_signal, df)
    
    return wrapped_generate_signal