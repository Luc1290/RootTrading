"""
Strat√©gie adaptative "Ride or React" qui ajuste son comportement en fonction des tendances.
Permet de "laisser courir" lors des fortes tendances et d'√™tre plus r√©actif pendant les phases de consolidation.
"""
import logging
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timedelta
import numpy as np
import pandas as pd

# Importer les modules partag√©s
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

from shared.src.config import get_strategy_param
from shared.src.enums import OrderSide, SignalStrength
from shared.src.schemas import StrategySignal

from .base_strategy import BaseStrategy

# Configuration du logging
logger = logging.getLogger(__name__)

class RideOrReactStrategy(BaseStrategy):
    """
    Strat√©gie adaptative qui permet de:
    - "Ride": Laisser courir les positions pendant les tendances fortes
    - "React": √ätre plus r√©actif pendant les phases de consolidation ou retournement
    
    Cette strat√©gie agit comme un filtre sur les autres signaux, plut√¥t que de g√©n√©rer ses propres signaux directement.
    """
    
    def __init__(self, symbol: str, params: Dict[str, Any] = None):
        """
        Initialise la strat√©gie Ride or React.
        
        Args:
            symbol: Symbole de trading (ex: 'BTCUSDC')
            params: Param√®tres sp√©cifiques √† la strat√©gie
        """
        super().__init__(symbol, params)
        
        # Seuils de variation pour les diff√©rentes timeframes
        self.thresholds = {
            '1h': self.params.get('threshold_1h', get_strategy_param('ride_or_react', 'thresholds.1h', 0.8)),
            '3h': self.params.get('threshold_3h', get_strategy_param('ride_or_react', 'thresholds.3h', 2.5)),
            '6h': self.params.get('threshold_6h', get_strategy_param('ride_or_react', 'thresholds.6h', 3.6)),
            '12h': self.params.get('threshold_12h', get_strategy_param('ride_or_react', 'thresholds.12h', 5.1)),
            '24h': self.params.get('threshold_24h', get_strategy_param('ride_or_react', 'thresholds.24h', 7.8))
        }
        
        # √âtat actuel de la strat√©gie
        self.current_mode = "react"  # Par d√©faut, √™tre r√©actif
        self.last_evaluation_time = None
        self.current_market_condition = None
        
        # Buffer de prix pour diff√©rentes timeframes
        self.price_history = {}
        self.timestamps = []
        
        logger.info(f"üîß Strat√©gie Ride or React initialis√©e pour {symbol} "
                   f"(seuils: 1h={self.thresholds['1h']}%, 24h={self.thresholds['24h']}%)")
    
    @property
    def name(self) -> str:
        """Nom unique de la strat√©gie."""
        return "Ride_or_React_Strategy"
    
    def get_min_data_points(self) -> int:
        """
        Nombre minimum de points de donn√©es n√©cessaires.
        
        Returns:
            Nombre minimum de donn√©es requises
        """
        # Besoin d'au moins 24h de donn√©es (en fonction de l'intervalle)
        return 1440 // self.get_interval_minutes()
    
    def get_interval_minutes(self) -> int:
        """
        D√©termine l'intervalle en minutes des donn√©es re√ßues.
        
        Returns:
            Intervalle en minutes
        """
        # Tenter de d√©terminer l'intervalle √† partir des donn√©es
        df = self.get_data_as_dataframe()
        if df is not None and len(df) >= 2:
            # Calculer l'intervalle moyen entre deux points de donn√©es
            time_diffs = np.diff(df.index.astype(np.int64)) // 10**9 // 60  # Diff√©rence en minutes
            return int(np.median(time_diffs))
        
        # Valeur par d√©faut si impossible √† d√©terminer
        return 1  # Supposer 1 minute par d√©faut
    
    def add_market_data(self, data: Dict[str, Any]) -> None:
        """
        Ajoute des donn√©es de march√© au buffer et met √† jour l'historique des prix.
        
        Args:
            data: Donn√©es de march√© √† ajouter
        """
        # Ajouter aux donn√©es g√©n√©rales
        super().add_market_data(data)
        
        # Ne traiter que les chandeliers ferm√©s
        if not data.get('is_closed', False):
            return
        
        # Extraire les informations
        timestamp = data.get('start_time')
        price = data.get('close')
        
        if timestamp and price:
            # Convertir le timestamp en datetime
            dt = datetime.fromtimestamp(timestamp / 1000)
            
            # Stocker le prix et le timestamp
            self.timestamps.append(dt)
            self.price_history[dt] = price
            
            # Nettoyer les anciennes donn√©es (plus de 24h)
            cutoff = dt - timedelta(hours=24)
            self.timestamps = [ts for ts in self.timestamps if ts >= cutoff]
            self.price_history = {ts: p for ts, p in self.price_history.items() if ts >= cutoff}
    
    def _get_price_change(self, hours: int) -> Tuple[float, float]:
        """
        Calcule la variation de prix sur une p√©riode donn√©e.
        
        Args:
            hours: Nombre d'heures dans le pass√©
            
        Returns:
            Tuple (variation en pourcentage, prix actuel)
        """
        if not self.timestamps:
            return 0.0, 0.0
        
        # Obtenir le prix actuel
        current_time = max(self.timestamps)
        current_price = self.price_history[current_time]
        
        # D√©terminer l'heure de r√©f√©rence
        reference_time = current_time - timedelta(hours=hours)
        
        # Trouver le prix le plus proche de l'heure de r√©f√©rence
        closest_time = min(self.timestamps, key=lambda x: abs((x - reference_time).total_seconds()))
        
        # Si le temps le plus proche est trop √©loign√©, retourner 0
        if abs((closest_time - reference_time).total_seconds()) > hours * 3600 * 0.5:  # Plus de la moiti√© de la p√©riode
            return 0.0, current_price
        
        reference_price = self.price_history[closest_time]
        
        # Calculer la variation en pourcentage
        percent_change = ((current_price - reference_price) / reference_price) * 100
        
        return percent_change, current_price
    
    def calculate_atr(self, period: int = 14) -> float:
        """
        Calcule l'ATR (Average True Range) pour mesurer la volatilit√©.
    
        Args:
            period: P√©riode pour le calcul de l'ATR
        
        Returns:
            Valeur ATR normalis√©e (en pourcentage du prix)
        """
        df = self.get_data_as_dataframe()
        if df is None or len(df) < period + 1:
            return 0.0
    
        # Calculer le True Range
        df['high'] = df['high'].astype(float)
        df['low'] = df['low'].astype(float)
        df['close'] = df['close'].astype(float)
    
        df['previous_close'] = df['close'].shift(1)
        df['tr1'] = df['high'] - df['low']
        df['tr2'] = abs(df['high'] - df['previous_close'])
        df['tr3'] = abs(df['low'] - df['previous_close'])
        df['true_range'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)
    
        # Calculer l'ATR comme la moyenne mobile du True Range
        atr = df['true_range'].rolling(window=period).mean().iloc[-1]
    
        # Normaliser en pourcentage du prix actuel pour faciliter les comparaisons
        current_price = df['close'].iloc[-1]
        atr_percent = (atr / current_price) * 100
    
        return atr_percent
        
    def _evaluate_market_condition(self) -> Dict[str, Any]:
        """
        √âvalue les conditions actuelles du march√© sur plusieurs timeframes,
        en tenant compte de la volatilit√© (ATR).
        """
        results = {}
        current_price = 0.0
    
        # Calculer l'ATR actuel
        atr_percent = self.calculate_atr(period=14)
        results["atr_percent"] = atr_percent
    
        # Facteur d'ajustement bas√© sur l'ATR
        # Si l'ATR est √©lev√© (march√© volatil), on augmente nos seuils pour √©viter le surtrading
        # Si l'ATR est faible (march√© calme), on peut √™tre plus sensible aux mouvements de prix
        atr_adjustment = atr_percent / 1.5  # 1.5% est consid√©r√© comme un ATR "normal"
    
        # √âvaluer les variations sur diff√©rentes timeframes avec ajustement ATR
        for hours, key in [(1, '1h'), (3, '3h'), (6, '6h'), (12, '12h'), (24, '24h')]:
            percent_change, price = self._get_price_change(hours)
            current_price = price
        
            # Ajuster le seuil en fonction de la volatilit√© actuelle
            base_threshold = self.thresholds[key]
            adjusted_threshold = base_threshold * atr_adjustment
        
            results[f"{key}_change"] = percent_change
            results[f"{key}_base_threshold"] = base_threshold
            results[f"{key}_adjusted_threshold"] = adjusted_threshold
            results[f"{key}_exceeded"] = percent_change >= adjusted_threshold
    
        # D√©terminer le mode global avec les seuils ajust√©s
        ride_conditions_met = sum(results[f"{key}_exceeded"] for key in ['1h', '3h', '6h', '12h', '24h'])
    
        if ride_conditions_met >= 2:
            results["mode"] = "ride"
            results["action"] = "wait_for_reversal"
        else:
            results["mode"] = "react"
            results["action"] = "normal_trading"
    
        # Stocker le prix actuel et l'ATR
        results["current_price"] = current_price
        results["market_volatility"] = "high" if atr_percent > 2.0 else "medium" if atr_percent > 1.0 else "low"
    
        return results
    
    def generate_signal(self) -> Optional[StrategySignal]:
        """
        √âvalue les conditions de march√© et d√©cide du mode (ride ou react).
        Cette strat√©gie ne g√©n√®re pas directement de signaux d'achat/vente,
        mais peut √™tre utilis√©e pour filtrer les signaux d'autres strat√©gies.
        
        Returns:
            Signal de mode (metadata contient le mode) ou None
        """
        # V√©rifier si nous avons assez de donn√©es
        if len(self.timestamps) < 12:  # Au moins 12 points de donn√©es
            return None
        
        # √âvaluer le march√© au maximum toutes les 15 minutes
        now = datetime.now()
        if self.last_evaluation_time and (now - self.last_evaluation_time).total_seconds() < 900:
            return None
        
        # √âvaluer les conditions de march√©
        market_condition = self._evaluate_market_condition()
        self.current_market_condition = market_condition
        self.current_mode = market_condition["mode"]
        self.last_evaluation_time = now
        
        # Loguer le changement de mode si pertinent
        logger.info(f"üåä [Ride or React] {self.symbol}: Mode={self.current_mode}, "
                   f"1h={market_condition['1h_change']:.2f}%, "
                   f"24h={market_condition['24h_change']:.2f}%")
        
        # Cr√©er un signal "informatif" qui peut √™tre utilis√© par d'autres strat√©gies
        # Ce n'est pas un signal d'achat/vente, mais un signal de contexte du march√©
        return self.create_signal(
            side=OrderSide.BUY if market_condition["mode"] == "ride" else OrderSide.SELL,
            price=market_condition["current_price"],
            confidence=0.8,
            metadata=market_condition
        )
        
    def should_filter_signal(self, signal: StrategySignal) -> bool:
        """
        D√©termine si un signal d'une autre strat√©gie doit √™tre filtr√© en fonction du mode actuel.
        
        Args:
            signal: Signal √† √©valuer
            
        Returns:
            True si le signal doit √™tre filtr√© (ignor√©), False sinon
        """
        if not self.current_market_condition:
            return False  # Pas assez d'informations pour filtrer
        
        # En mode "ride", filtrer les signaux de vente si le march√© est en tendance haussi√®re
        if self.current_mode == "ride":
            # Si le march√© est en forte hausse et le signal est SELL, filtrer
            is_uptrend = self.current_market_condition.get('24h_change', 0) > 0
            
            if is_uptrend and signal.side == OrderSide.SELL:
                logger.info(f"üîç [Ride or React] Filtrage d'un signal SELL en mode RIDE (tendance haussi√®re)")
                return True
            
            # Si le march√© est en forte baisse et le signal est BUY, filtrer
            if not is_uptrend and signal.side == OrderSide.BUY:
                logger.info(f"üîç [Ride or React] Filtrage d'un signal BUY en mode RIDE (tendance baissi√®re)")
                return True
        
        # En mode "react", ne pas filtrer les signaux
        return False