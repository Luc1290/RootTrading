"""
Classe de base pour toutes les strat√©gies de trading.
D√©finit l'interface commune que toutes les strat√©gies doivent impl√©menter.
"""
import logging
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, Optional, List, Deque
from collections import deque

import numpy as np
import pandas as pd

# Importer les modules partag√©s
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

from shared.src.enums import OrderSide, SignalStrength
from shared.src.schemas import StrategySignal, MarketData

# Configuration du logging
logger = logging.getLogger(__name__)

class BaseStrategy(ABC):
    """
    Classe abstraite de base pour toutes les strat√©gies de trading.
    Les strat√©gies concr√®tes doivent h√©riter de cette classe et impl√©menter ses m√©thodes.
    """
    
    def __init__(self, symbol: str, params: Dict[str, Any] = None):
        """
        Initialise la strat√©gie de base.
        
        Args:
            symbol: Symbole de trading (ex: 'BTCUSDC')
            params: Param√®tres sp√©cifiques √† la strat√©gie
        """
        self.symbol = symbol
        self.params = params or {}
        self.buffer_size = self.params.get('buffer_size', 100)  # Taille par d√©faut du buffer
        self.data_buffer = deque(maxlen=self.buffer_size)  # Buffer circulaire pour stocker les donn√©es
        self.last_signal_time: Optional[datetime] = None
        self.signal_cooldown = self.params.get('signal_cooldown', 45)  # Temps min entre signaux (sec) - r√©duit pour confluence
    
    @property
    @abstractmethod
    def name(self) -> str:
        """
        Nom unique de la strat√©gie.
        Doit √™tre impl√©ment√© par les classes d√©riv√©es.
        
        Returns:
            Nom de la strat√©gie
        """
        pass
    
    def add_market_data(self, data: Dict[str, Any]) -> None:
        # V√©rifier que les donn√©es concernent le bon symbole
        if data.get('symbol') != self.symbol:
            return
    
        # Ajouter au buffer uniquement si le chandelier est ferm√©
        if data.get('is_closed', False):
            # V√©rifier si le buffer est devenu trop grand (s√©curit√© additionnelle)
            if len(self.data_buffer) >= self.buffer_size * 2:
                # Vider la moiti√© du buffer
                for _ in range(self.buffer_size):
                    if self.data_buffer:
                        self.data_buffer.popleft()
        
            self.data_buffer.append(data)
        
            # D√©boguer les donn√©es
            logger.info(f"[{self.name}] Donn√©es ajout√©es pour {self.symbol}: "
                        f"close={data['close']}, time={datetime.fromtimestamp(data['start_time']/1000)}")
    
    def get_data_as_dataframe(self) -> Optional[pd.DataFrame]:
        """
        Convertit les donn√©es du buffer en DataFrame pandas.
        
        Returns:
            DataFrame pandas avec les donn√©es de march√©, ou None si pas assez de donn√©es
        """
        if len(self.data_buffer) == 0:
            return None
        
        # Convertir le deque en DataFrame
        df = pd.DataFrame(list(self.data_buffer))
        
        # Convertir les timestamps en datetime
        if 'start_time' in df.columns:
            df['datetime'] = pd.to_datetime(df['start_time'], unit='ms')
            df.set_index('datetime', inplace=True)
        
        return df
    
    def can_generate_signal(self) -> bool:
        """
        V√©rifie si la strat√©gie peut g√©n√©rer un signal bas√© sur le cooldown.
        
        Returns:
            True si un signal peut √™tre g√©n√©r√©, False sinon
        """
        if not self.last_signal_time:
            return True
        
        now = datetime.now()
        elapsed = (now - self.last_signal_time).total_seconds()
        
        return elapsed >= self.signal_cooldown
    
    @abstractmethod
    def generate_signal(self) -> Optional[StrategySignal]:
        """
        G√©n√®re un signal de trading bas√© sur les donn√©es de march√©.
        Doit √™tre impl√©ment√© par les classes d√©riv√©es.
        
        Returns:
            Signal de trading ou None si aucun signal n'est g√©n√©r√©
        """
        pass
    
    def analyze(self) -> Optional[StrategySignal]:
        """
        Analyse les donn√©es de march√© et g√©n√®re un signal si les conditions sont remplies.
        
        Returns:
            Signal de trading ou None
        """
        # V√©rifier s'il y a assez de donn√©es
        if len(self.data_buffer) < self.get_min_data_points():
            logger.info(f"[{self.name}] Pas assez de donn√©es pour g√©n√©rer un signal ({len(self.data_buffer)}/{self.get_min_data_points()})")
            return None
        
        # V√©rifier le cooldown des signaux
        if not self.can_generate_signal():
            return None
        
        # G√©n√©rer un signal
        signal = self.generate_signal()
        
        if signal:
            # Mettre √† jour le timestamp du dernier signal
            self.last_signal_time = datetime.now()
            
            # Loguer le signal
            logger.info(f"üîî [{self.name}] Signal g√©n√©r√© pour {self.symbol}: {signal.side} @ {signal.price}")
        
        return signal
    
    def get_min_data_points(self) -> int:
        """
        Retourne le nombre minimum de points de donn√©es n√©cessaires pour g√©n√©rer un signal.
        Peut √™tre surcharg√© par les classes d√©riv√©es.
        
        Returns:
            Nombre minimum de points de donn√©es
        """
        # Par d√©faut, utiliser la taille du buffer ou une valeur minimale
        return min(self.buffer_size, 20)
    
    def create_signal(self, side: OrderSide, price: float, confidence: float = 0.7, 
                    metadata: Dict[str, Any] = None) -> StrategySignal:
        """
        Cr√©e un objet signal standardis√©.
        
        Args:
            side: C√¥t√© de l'ordre (BUY ou SELL)
            price: Prix actuel
            confidence: Niveau de confiance (0.0 √† 1.0)
            metadata: M√©tadonn√©es suppl√©mentaires sp√©cifiques √† la strat√©gie
            
        Returns:
            Objet signal standardis√©
        """
        # D√©terminer la force du signal bas√©e sur la confiance
        strength = SignalStrength.WEAK
        if confidence >= 0.9:
            strength = SignalStrength.VERY_STRONG
        elif confidence >= 0.75:
            strength = SignalStrength.STRONG
        elif confidence >= 0.5:
            strength = SignalStrength.MODERATE
        
        # Cr√©er le signal
        return StrategySignal(
            strategy=self.name,
            symbol=self.symbol,
            side=side,
            timestamp=datetime.now(),
            price=price,
            confidence=confidence,
            strength=strength,
            metadata=metadata or {}
        )
    
    def calculate_atr(self, df: pd.DataFrame = None, period: int = 14) -> float:
        """
        Calcule l'ATR (Average True Range) pour mesurer la volatilit√©.
        
        Args:
            df: DataFrame avec les donn√©es (si None, utilise le buffer)
            period: P√©riode pour le calcul de l'ATR
            
        Returns:
            Valeur ATR en pourcentage du prix actuel
        """
        if df is None:
            df = self.get_data_as_dataframe()
        
        if df is None or len(df) < period + 1:
            return 1.0  # Retourner 1% par d√©faut si pas assez de donn√©es
        
        # Calculer le True Range
        df['high'] = df['high'].astype(float)
        df['low'] = df['low'].astype(float)  
        df['close'] = df['close'].astype(float)
        
        df['previous_close'] = df['close'].shift(1)
        df['tr1'] = df['high'] - df['low']
        df['tr2'] = abs(df['high'] - df['previous_close'])
        df['tr3'] = abs(df['low'] - df['previous_close'])
        df['true_range'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)
        
        # Calculer l'ATR comme la moyenne mobile du True Range
        atr = df['true_range'].rolling(window=period).mean().iloc[-1]
        
        # Normaliser en pourcentage du prix actuel
        current_price = df['close'].iloc[-1]
        atr_percent = (atr / current_price) * 100
        
        return atr_percent
    
    def calculate_dynamic_stop(self, entry_price: float, side: OrderSide, 
                             atr_percent: float = None) -> Dict[str, float]:
        """
        Calcule seulement le stop dynamique bas√© sur l'ATR (plus de target avec TrailingStop pur).
        
        Args:
            entry_price: Prix d'entr√©e
            side: C√¥t√© du trade (BUY ou SELL)
            atr_percent: ATR en pourcentage (si None, calcul√© automatiquement)
            
        Returns:
            Dict avec stop_price seulement
        """
        if atr_percent is None:
            atr_percent = self.calculate_atr()
        
        # Limiter l'ATR pour √©viter des stops trop extr√™mes
        atr_percent = max(0.3, min(atr_percent, 2.0))
        
        # Pour les paires crypto, ajuster selon la volatilit√© moyenne
        if 'BTC' in self.symbol:
            atr_multiplier = 0.8
        elif 'ETH' in self.symbol:
            atr_multiplier = 1.0
        else:
            atr_multiplier = 1.2
        
        # Distance de base pour le stop
        # MODIFI√â: Augmentation du stop loss pour √©viter les sorties pr√©matur√©es
        if 'BTC' in self.symbol:
            base_stop_mult = 2.0  # Augment√© de 1.5 √† 2.0 pour BTC
        else:
            base_stop_mult = 3.0  # Augment√© de 2.5 √† 3.0 pour les altcoins
        
        stop_distance_percent = atr_percent * atr_multiplier * base_stop_mult
        
        # Calculer le prix de stop
        if side == OrderSide.BUY:
            stop_price = entry_price * (1 - stop_distance_percent / 100)
        else:  # SELL
            stop_price = entry_price * (1 + stop_distance_percent / 100)
        
        return {
            "stop_price": stop_price,
            "atr_percent": atr_percent,
            "stop_distance_percent": stop_distance_percent
        }
    
    def _validate_trend_alignment_for_signal(self) -> Optional[str]:
        """
        Valide la tendance actuelle pour d√©terminer si un signal est appropri√©.
        Utilise la m√™me logique que le signal_aggregator pour coh√©rence.
        M√©thode commune disponible pour toutes les strat√©gies.
        """
        try:
            df = self.get_data_as_dataframe()
            if df is None or len(df) < 50:
                return None
            
            prices = df['close'].values
            
            # Calculer EMA 21 vs EMA 50 (harmonis√© avec signal_aggregator)
            def ema(data, period):
                """Calcul EMA simple sans d√©pendance externe."""
                alpha = 2 / (period + 1)
                ema_values = np.zeros_like(data)
                ema_values[0] = data[0]
                for i in range(1, len(data)):
                    ema_values[i] = alpha * data[i] + (1 - alpha) * ema_values[i-1]
                return ema_values
            
            ema_21 = ema(prices, 21)
            ema_50 = ema(prices, 50)
            
            current_price = prices[-1]
            trend_21 = ema_21[-1]
            trend_50 = ema_50[-1]
            
            # Classification sophistiqu√©e de la tendance (m√™me logique que signal_aggregator)
            if trend_21 > trend_50 * 1.015:  # +1.5% = forte haussi√®re
                return "STRONG_BULLISH"
            elif trend_21 > trend_50 * 1.005:  # +0.5% = faible haussi√®re
                return "WEAK_BULLISH"
            elif trend_21 < trend_50 * 0.985:  # -1.5% = forte baissi√®re
                return "STRONG_BEARISH"
            elif trend_21 < trend_50 * 0.995:  # -0.5% = faible baissi√®re
                return "WEAK_BEARISH"
            else:
                return "NEUTRAL"
                
        except Exception as e:
            logger.warning(f"Erreur validation tendance: {e}")
            return None
    
    def __str__(self) -> str:
        """Repr√©sentation sous forme de cha√Æne de la strat√©gie."""
        return f"{self.name} Strategy ({self.symbol})"