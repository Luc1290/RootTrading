"""
Strat√©gie de trading bas√©e sur les breakouts de consolidation.
D√©tecte les p√©riodes de consolidation (range) et g√©n√®re des signaux lorsque le prix casse le range.
"""
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
import numpy as np
import pandas as pd

# Importer les modules partag√©s
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

from shared.src.config import get_strategy_param
from shared.src.enums import OrderSide
from shared.src.schemas import StrategySignal

from .base_strategy import BaseStrategy
from .advanced_filters_mixin import AdvancedFiltersMixin

# Configuration du logging
logger = logging.getLogger(__name__)

class BreakoutStrategy(BaseStrategy, AdvancedFiltersMixin):
    """
    Strat√©gie qui d√©tecte les cassures (breakouts) apr√®s des p√©riodes de consolidation.
    G√©n√®re des signaux d'achat quand le prix casse une r√©sistance et des signaux de vente
    quand le prix casse un support.
    """
    
    def __init__(self, symbol: str, params: Dict[str, Any] = None):
        """
        Initialise la strat√©gie de Breakout.
        
        Args:
            symbol: Symbole de trading (ex: 'BTCUSDC')
            params: Param√®tres sp√©cifiques √† la strat√©gie
        """
        super().__init__(symbol, params)
        
        # Param√®tres de la strat√©gie
        self.min_range_candles = self.params.get('min_range_candles', 5)  # Minimum de chandeliers pour un range
        self.max_range_percent = self.params.get('max_range_percent', 3.0)  # % max pour consid√©rer comme consolidation
        self.breakout_threshold = self.params.get('breakout_threshold', 0.5)  # % au-dessus/en-dessous pour confirmer
        self.max_lookback = self.params.get('max_lookback', 50)  # Nombre max de chandeliers √† analyser
        
        # Etat de la strat√©gie
        self.detected_ranges = []  # [(start_idx, end_idx, support, resistance), ...]
        self.last_breakout_idx = 0
        
        logger.info(f"üîß Strat√©gie Breakout initialis√©e pour {symbol} "
                   f"(min_candles={self.min_range_candles}, threshold={self.breakout_threshold}%)")
    
    @property
    def name(self) -> str:
        """Nom unique de la strat√©gie."""
        return "Breakout_Strategy"
    
    def get_min_data_points(self) -> int:
        """
        Nombre minimum de points de donn√©es n√©cessaires.
        
        Returns:
            Nombre minimum de donn√©es requises
        """
        # Besoin d'au moins 2x le nombre min de chandeliers + d√©tection de breakout
        return self.min_range_candles * 2 + 5
    
    def _find_consolidation_ranges(self, df: pd.DataFrame) -> List[Tuple[int, int, float, float]]:
        """
        Trouve les p√©riodes de consolidation (range) dans les donn√©es.
        
        Args:
            df: DataFrame avec les donn√©es de prix
            
        Returns:
            Liste de tuples (d√©but, fin, support, r√©sistance)
        """
        ranges = []
        
        # Limiter le nombre de chandeliers √† analyser
        lookback = min(len(df), self.max_lookback)
        
        # R√©cup√©rer les derni√®res N bougies
        recent_df = df.iloc[-lookback:]
        
        # Parcourir les p√©riodes possibles pour trouver des ranges
        for i in range(len(recent_df) - self.min_range_candles + 1):
            # R√©cup√©rer une fen√™tre de taille minimum
            window = recent_df.iloc[i:i+self.min_range_candles]
            
            # Calculer le support et la r√©sistance
            support = window['low'].min()
            resistance = window['high'].max()
            
            # Calculer l'amplitude du range en pourcentage
            range_percent = ((resistance - support) / support) * 100
            
            # V√©rifier si c'est un range valide
            if range_percent <= self.max_range_percent:
                # √âtendre le range autant que possible
                end_idx = i + self.min_range_candles
                while end_idx < len(recent_df):
                    next_candle = recent_df.iloc[end_idx]
                    # Si le prochain chandelier reste dans le range (ou presque)
                    if (next_candle['low'] >= support * 0.995 and 
                        next_candle['high'] <= resistance * 1.005):
                        end_idx += 1
                    else:
                        break
                
                # Ajuster les indices par rapport au DataFrame complet
                start_idx = len(df) - lookback + i
                end_idx = len(df) - lookback + end_idx - 1
                
                # Ajouter le range √† la liste
                ranges.append((start_idx, end_idx, support, resistance))
        
        return ranges
    
    def _detect_breakout(self, df: pd.DataFrame, ranges: List[Tuple[int, int, float, float]]) -> Optional[Dict[str, Any]]:
        """
        D√©tecte un breakout d'un des ranges identifi√©s.
        
        Args:
            df: DataFrame avec les donn√©es de prix
            ranges: Liste de ranges (d√©but, fin, support, r√©sistance)
            
        Returns:
            Informations sur le breakout ou None
        """
        if not ranges or not df.shape[0]:
            return None
        
        # Obtenir le dernier chandelier
        last_candle = df.iloc[-1]
        last_idx = len(df) - 1  # Index bas√© sur la position, pas sur l'index du DataFrame
        
        # V√©rifier chaque range pour un breakout
        for start_idx, end_idx, support, resistance in ranges:
            # Ne consid√©rer que les ranges qui se terminent r√©cemment
            # et qui n'ont pas d√©j√† produit un breakout
            if last_idx - end_idx <= 3 and end_idx > self.last_breakout_idx:
                last_close = last_candle['close']
                
                # Breakout haussier
                if last_close > resistance * (1 + self.breakout_threshold / 100):
                    self.last_breakout_idx = last_idx
                    
                    # Calculer la hauteur du range
                    range_height = resistance - support
                    
                    # Utiliser l'ATR pour des cibles dynamiques
                    atr_percent = self.calculate_atr(df)
                    
                    # Pour les breakouts, utiliser un ratio risque/r√©compense plus conservateur
                    # car les faux breakouts sont fr√©quents
                    risk_reward = 1.2 if range_height / support * 100 < 2 else 1.5
                    
                    # Calculer le stop bas√© sur l'ATR et la r√©sistance cass√©e
                    atr_stop_distance = atr_percent / 100
                    atr_stop = last_close * (1 - atr_stop_distance)
                    
                    # Le stop peut √™tre ajust√© pour √™tre juste sous la r√©sistance cass√©e
                    # si c'est plus proche que l'ATR stop
                    resistance_stop = resistance * 0.995
                    stop_loss = max(resistance_stop, atr_stop)
                    
                    return {
                        "type": "bullish",
                        "side": OrderSide.BUY,
                        "price": last_close,
                        "support": support,
                        "resistance": resistance,
                        "range_duration": end_idx - start_idx + 1,
                        "range_height_percent": (range_height / support) * 100,
                        "atr_percent": atr_percent,
                        "stop_price": stop_loss
                    }
                
                # Breakout baissier
                elif last_close < support * (1 - self.breakout_threshold / 100):
                    self.last_breakout_idx = last_idx
                    
                    # Calculer la hauteur du range
                    range_height = resistance - support
                    
                    # Utiliser l'ATR pour des cibles dynamiques
                    atr_percent = self.calculate_atr(df)
                    
                    # Pour les breakouts, utiliser un ratio risque/r√©compense plus conservateur
                    risk_reward = 1.2 if range_height / support * 100 < 2 else 1.5
                    
                    # Calculer le stop bas√© sur l'ATR et le support cass√©
                    atr_stop_distance = atr_percent / 100
                    atr_stop = last_close * (1 + atr_stop_distance)
                    
                    # Le stop peut √™tre ajust√© pour √™tre juste au-dessus du support cass√©
                    # si c'est plus proche que l'ATR stop
                    support_stop = support * 1.005
                    stop_loss = min(support_stop, atr_stop)
                    
                    return {
                        "type": "bearish",
                        "side": OrderSide.SELL,
                        "price": last_close,
                        "support": support,
                        "resistance": resistance,
                        "range_duration": end_idx - start_idx + 1,
                        "range_height_percent": (range_height / support) * 100,
                        "atr_percent": atr_percent,
                        "stop_price": stop_loss
                    }
        
        return None
    
    def generate_signal(self) -> Optional[StrategySignal]:
        """
        G√©n√®re un signal de trading sophistiqu√© bas√© sur les breakouts.
        Utilise des filtres avanc√©s pour √©viter les faux breakouts.
        
        Returns:
            Signal de trading ou None si aucun signal n'est g√©n√©r√©
        """
        # V√©rifier le cooldown avant de g√©n√©rer un signal
        if not self.can_generate_signal():
            return None
            
        # Convertir les donn√©es en DataFrame
        df = self.get_data_as_dataframe()
        if df is None or len(df) < self.get_min_data_points():
            return None
        
        # Extraire les donn√©es n√©cessaires
        volumes = df['volume'].values if 'volume' in df.columns else None
        current_price = df['close'].iloc[-1]
        
        # === NOUVEAU SYST√àME DE FILTRES SOPHISTIQUES ===
        
        # 1. FILTRE BREAKOUT DE BASE
        breakout_info = self._detect_valid_breakout(df)
        if breakout_info is None:
            return None
        
        signal_side = breakout_info['side']
        
        # 2. FILTRE VOLUME EXPANSION (confirmation institutionnelle)
        volume_score = self._analyze_volume_confirmation_common(volumes) if volumes is not None else 0.7
        if volume_score < 0.5:  # Plus strict pour breakouts
            logger.debug(f"[Breakout] {self.symbol}: Signal rejet√© - volume insuffisant ({volume_score:.2f})")
            return None
        
        # 3. FILTRE FALSE BREAKOUT DETECTION (√©viter les faux signaux)
        false_breakout_score = self._detect_false_breakout_patterns(df, breakout_info)
        if false_breakout_score < 0.5:
            logger.debug(f"[Breakout] {self.symbol}: Signal rejet√© - pattern faux breakout ({false_breakout_score:.2f})")
            return None
        
        # 4. FILTRE RETEST VALIDATION (confirmation du niveau)
        retest_score = self._validate_retest_opportunity(df, breakout_info)
        
        # 5. FILTRE TREND ALIGNMENT (direction g√©n√©rale)
        trend_score = self._analyze_trend_alignment_common(df, signal_side)
        
        # 6. FILTRE ATR ENVIRONMENT (environnement volatilit√©)
        atr_score = self._analyze_atr_environment_common(df)
        
        # === CALCUL DE CONFIANCE COMPOSITE ===
        scores = {
            'volume': volume_score,
            'false_breakout': false_breakout_score,
            'retest': retest_score,
            'trend': trend_score,
            'atr': atr_score
        }
        
        weights = {
            'volume': 0.30,        # Volume crucial pour breakouts
            'false_breakout': 0.25, # √âviter faux signaux
            'retest': 0.20,        # Validation niveau
            'trend': 0.15,         # Direction g√©n√©rale
            'atr': 0.10           # Environnement
        }
        
        confidence = self._calculate_composite_confidence_common(scores, weights)
        
        # Seuil minimum de confiance
        if confidence < 0.65:
            logger.debug(f"[Breakout] {self.symbol}: Signal rejet√© - confiance trop faible ({confidence:.2f})")
            return None
        
        # === CONSTRUCTION DU SIGNAL ===
        signal = self.create_signal(
            side=signal_side,
            price=current_price,
            confidence=confidence
        )
        
        # Ajouter les m√©tadonn√©es d'analyse
        signal.metadata.update({
            'breakout_level': breakout_info.get('level'),
            'range_duration': breakout_info.get('duration'),
            'range_height_pct': breakout_info.get('height_pct'),
            'volume_expansion': volume_score,
            'false_breakout_score': false_breakout_score,
            'retest_score': retest_score,
            'trend_score': trend_score,
            'atr_score': atr_score,
            'breakout_strength': self._calculate_breakout_strength(breakout_info)
        })
        
        precision = 5 if 'BTC' in self.symbol else 3
        logger.info(f"üéØ [Breakout] {self.symbol}: Signal {signal_side} @ {current_price:.{precision}f} "
                   f"(confiance: {confidence:.2f}, niveau: {breakout_info.get('level', 'N/A'):.{precision}f}, "
                   f"scores: V={volume_score:.2f}, FB={false_breakout_score:.2f})")
        
        return signal
    
    def _detect_valid_breakout(self, df: pd.DataFrame) -> Optional[Dict]:
        """Version simplifi√©e de d√©tection de breakout avec validation de tendance."""
        try:
            highs = df['high'].values
            lows = df['low'].values
            closes = df['close'].values
            
            if len(df) < 20:
                return None
            
            # NOUVEAU: Validation de tendance avant de g√©n√©rer le signal
            trend_alignment = self._validate_trend_alignment_for_signal(df)
            if trend_alignment is None:
                return None  # Pas assez de donn√©es pour valider la tendance
            
            # Chercher r√©sistance et support r√©cents
            lookback = min(20, len(df))
            recent_highs = highs[-lookback:]
            recent_lows = lows[-lookback:]
            current_price = closes[-1]
            
            resistance = np.max(recent_highs[:-1])  # Exclure la bougie actuelle
            support = np.min(recent_lows[:-1])
            
            # Breakout haussier ET tendance compatible
            if current_price > resistance * 1.002:  # 0.2% au-dessus
                # NOUVEAU: Ne faire de breakout BUY que si tendance n'est pas fortement baissi√®re
                if trend_alignment in ["STRONG_BEARISH", "WEAK_BEARISH"]:
                    logger.debug(f"[Breakout] {self.symbol}: BUY breakout supprim√© - tendance {trend_alignment}")
                    return None
                    
                return {
                    'side': OrderSide.BUY,
                    'level': resistance,
                    'duration': lookback,
                    'height_pct': (resistance - support) / support * 100
                }
            
            # Breakout baissier ET tendance compatible
            elif current_price < support * 0.998:  # 0.2% en dessous
                # NOUVEAU: Ne faire de breakout SELL que si tendance n'est pas fortement haussi√®re
                if trend_alignment in ["STRONG_BULLISH", "WEAK_BULLISH"]:
                    logger.debug(f"[Breakout] {self.symbol}: SELL breakout supprim√© - tendance {trend_alignment}")
                    return None
                    
                return {
                    'side': OrderSide.SELL,
                    'level': support,
                    'duration': lookback,
                    'height_pct': (resistance - support) / support * 100
                }
            
            return None
        except:
            return None
    
    def _detect_false_breakout_patterns(self, df: pd.DataFrame, breakout_info: Dict) -> float:
        """D√©tection simplifi√©e de faux breakouts."""
        try:
            # Score de base
            score = 0.7
            
            # V√©rifier la force du breakout
            current_price = df['close'].iloc[-1]
            level = breakout_info['level']
            
            if breakout_info['side'] == OrderSide.BUY:
                penetration = (current_price - level) / level * 100
            else:
                penetration = (level - current_price) / level * 100
            
            if penetration > 1.0:  # Breakout > 1%
                score += 0.2
            elif penetration > 0.5:  # Breakout > 0.5%
                score += 0.1
            
            return min(0.95, score)
        except:
            return 0.7
    
    def _validate_retest_opportunity(self, df: pd.DataFrame, breakout_info: Dict) -> float:
        """Validation simplifi√©e du retest."""
        return 0.8  # Score fixe pour simplifier
    
    def _calculate_breakout_strength(self, breakout_info: Dict) -> str:
        """Calcul force du breakout."""
        height_pct = breakout_info.get('height_pct', 0)
        if height_pct > 3:
            return "strong"
        elif height_pct > 1.5:
            return "moderate"
        else:
            return "weak"
    
    def _validate_trend_alignment_for_signal(self, df: pd.DataFrame) -> Optional[str]:
        """
        Valide la tendance actuelle pour d√©terminer si un signal est appropri√©.
        Utilise la m√™me logique que le signal_aggregator pour coh√©rence.
        """
        try:
            if df is None or len(df) < 50:
                return None
            
            prices = df['close'].values
            
            # Calculer EMA 21 vs EMA 50 (harmonis√© avec signal_aggregator)
            import talib
            ema_21 = talib.EMA(prices, timeperiod=21)
            ema_50 = talib.EMA(prices, timeperiod=50)
            
            if np.isnan(ema_21[-1]) or np.isnan(ema_50[-1]):
                return None
            
            current_price = prices[-1]
            trend_21 = ema_21[-1]
            trend_50 = ema_50[-1]
            
            # Classification sophistiqu√©e de la tendance (m√™me logique que signal_aggregator)
            if trend_21 > trend_50 * 1.015:  # +1.5% = forte haussi√®re
                return "STRONG_BULLISH"
            elif trend_21 > trend_50 * 1.005:  # +0.5% = faible haussi√®re
                return "WEAK_BULLISH"
            elif trend_21 < trend_50 * 0.985:  # -1.5% = forte baissi√®re
                return "STRONG_BEARISH"
            elif trend_21 < trend_50 * 0.995:  # -0.5% = faible baissi√®re
                return "WEAK_BEARISH"
            else:
                return "NEUTRAL"
                
        except Exception as e:
            logger.warning(f"Erreur validation tendance: {e}")
            return None
        
        # Calculer la confiance bas√©e sur la dur√©e du range
        range_duration = breakout['range_duration']
        
        # Plus le range est long, plus la confiance est grande
        confidence = min(0.75 + (range_duration / 20), 0.98)  # Augment√© de 0.5 √† 0.75
        
        # R√©cup√©rer les informations du breakout
        side = breakout['side']
        price = breakout['price']
        
        # Cr√©er le signal
        metadata = {
            "type": breakout['type'],
            "support": float(breakout['support']),
            "resistance": float(breakout['resistance']),
            "range_duration": int(breakout['range_duration']),
            "stop_price": float(breakout['stop_price'])
        }
        
        signal = self.create_signal(
            side=side,
            price=float(price),
            confidence=confidence,
            metadata=metadata
        )
        
        logger.info(f"üöÄ [Breakout] Signal {side.value} sur {self.symbol}: "
                   f"cassure d'un range de {range_duration} chandeliers")
        
        # Mettre √† jour le timestamp si un signal est g√©n√©r√©
        if signal:
            self.last_signal_time = datetime.now()
        
        return signal