"""
Module de v√©rification des r√®gles de gestion des risques.
√âvalue les risques et applique les r√®gles d√©finies.
"""
import logging
import yaml
import threading
import time
import json
import os
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union, Tuple, Set

# Importer les modules partag√©s
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.redis_client import RedisClient
from shared.src.config import SYMBOLS

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('risk_manager.log')
    ]
)
logger = logging.getLogger(__name__)

class RuleChecker:
    """
    Gestionnaire des r√®gles de gestion des risques.
    Charge les r√®gles depuis un fichier YAML et les applique pour √©valuer les risques.
    """
    
    def __init__(self, rules_file: str = None, portfolio_api_url: str = "http://portfolio:8000",
                 trader_api_url: str = "http://trader:5002"):
        """
        Initialise le gestionnaire de r√®gles.
        
        Args:
            rules_file: Chemin vers le fichier de r√®gles YAML (optionnel)
            portfolio_api_url: URL de l'API du service Portfolio
            trader_api_url: URL de l'API du service Trader
        """
        self.rules_file = rules_file or os.path.join(os.path.dirname(__file__), "rules.yaml")
        self.portfolio_api_url = portfolio_api_url
        self.trader_api_url = trader_api_url
        
        # Charger les r√®gles
        self.rules = self._load_rules()
        
        # Client Redis pour les notifications
        self.redis_client = RedisClient()
        
        # √âtat du syst√®me et r√®gles d√©clench√©es
        self.system_state: Dict[str, Any] = {}
        self.triggered_rules: Set[str] = set()
        
        # Thread de v√©rification
        self.check_thread = None
        self.stop_event = threading.Event()
        
        # Intervalle de v√©rification (en secondes)
        self.check_interval = 60
        
        # Compteur de tentatives de connexion
        self.connection_failures = 0
        self.max_connection_failures = 10
        
        logger.info(f"‚úÖ RuleChecker initialis√© avec {len(self.rules)} r√®gles")
    
    def _load_rules(self) -> List[Dict[str, Any]]:
        """
        Charge les r√®gles depuis le fichier YAML.
        
        Returns:
            Liste des r√®gles
        """
        if not os.path.exists(self.rules_file):
            logger.warning(f"‚ö†Ô∏è Fichier de r√®gles non trouv√©: {self.rules_file}, utilisation des r√®gles par d√©faut")
            return self._get_default_rules()
        
        try:
            with open(self.rules_file, 'r') as f:
                rules_data = yaml.safe_load(f)
            
            if not isinstance(rules_data, dict) or "rules" not in rules_data:
                logger.error("‚ùå Format de fichier de r√®gles invalide")
                return self._get_default_rules()
            
            rules = rules_data.get("rules", [])
            
            # Valider chaque r√®gle
            valid_rules = []
            for rule in rules:
                if self._validate_rule(rule):
                    valid_rules.append(rule)
                else:
                    logger.warning(f"‚ö†Ô∏è R√®gle invalide ignor√©e: {rule.get('name', 'unnamed')}")
            
            logger.info(f"‚úÖ {len(valid_rules)} r√®gles charg√©es depuis {self.rules_file}")
            return valid_rules
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement des r√®gles: {str(e)}")
            return self._get_default_rules()
    
    def _get_default_rules(self) -> List[Dict[str, Any]]:
        """
        Retourne un ensemble de r√®gles par d√©faut.
        
        Returns:
            Liste des r√®gles par d√©faut
        """
        default_rules = [
            {
                "name": "max_concurrent_trades",
                "description": "Limite le nombre maximum de trades actifs simultan√©s",
                "type": "exposure",
                "scope": "global",
                "condition": "active_trades > {max_trades}",
                "parameters": {"max_trades": 10},
                "action": "pause_new_trades",
                "severity": "warning",
                "enabled": True
            },
            {
                "name": "max_daily_loss",
                "description": "Arr√™te le trading si la perte quotidienne d√©passe un seuil",
                "type": "drawdown",
                "scope": "global",
                "condition": "daily_pnl_percent < {max_loss_percent}",
                "parameters": {"max_loss_percent": -5.0},
                "action": "disable_trading",
                "severity": "critical",
                "enabled": True
            },
            {
                "name": "max_symbol_exposure",
                "description": "Limite l'exposition maximale par symbole",
                "type": "exposure",
                "scope": "symbol",
                "condition": "symbol_exposure_percent > {max_percent}",
                "parameters": {"max_percent": 25.0},
                "action": "pause_symbol",
                "severity": "warning",
                "enabled": True
            },
            {
                "name": "btc_volatility_alert",
                "description": "Alerte en cas de forte volatilit√© sur BTC",
                "type": "volatility",
                "scope": "symbol",
                "symbol": "BTCUSDC",
                "condition": "symbol_volatility_1h > {volatility_threshold}",
                "parameters": {"volatility_threshold": 4.0},
                "action": "alert_only",
                "severity": "info",
                "enabled": True
            },
            {
                "name": "max_daily_trades",
                "description": "Limite le nombre de nouveaux trades par jour",
                "type": "frequency",
                "scope": "global",
                "condition": "daily_trades > {max_trades}",
                "parameters": {"max_trades": 30},
                "action": "pause_new_trades",
                "severity": "warning",
                "enabled": True
            }
        ]
        
        logger.info(f"‚úÖ {len(default_rules)} r√®gles par d√©faut charg√©es")
        return default_rules
    
    def _validate_rule(self, rule: Dict[str, Any]) -> bool:
        """
        Valide une r√®gle.
        
        Args:
            rule: R√®gle √† valider
            
        Returns:
            True si la r√®gle est valide, False sinon
        """
        # V√©rifier les champs obligatoires
        required_fields = ["name", "type", "scope", "condition", "action", "enabled"]
        for field in required_fields:
            if field not in rule:
                logger.warning(f"‚ö†Ô∏è Champ obligatoire manquant dans la r√®gle: {field}")
                return False
        
        # V√©rifier que le champ 'symbol' est pr√©sent si le scope est 'symbol' ou 'strategy'
        if rule["scope"] in ["symbol", "strategy"] and "symbol" not in rule:
            logger.warning(f"‚ö†Ô∏è Champ 'symbol' requis pour le scope '{rule['scope']}'")
            return False
        
        # V√©rifier que le champ 'strategy' est pr√©sent si le scope est 'strategy'
        if rule["scope"] == "strategy" and "strategy" not in rule:
            logger.warning(f"‚ö†Ô∏è Champ 'strategy' requis pour le scope 'strategy'")
            return False
        
        # V√©rifier que le champ 'parameters' est pr√©sent si la condition contient des placeholders
        if "{" in rule["condition"] and "}" in rule["condition"] and "parameters" not in rule:
            logger.warning(f"‚ö†Ô∏è Champ 'parameters' requis pour les conditions avec placeholders")
            return False
        
        return True
    
    def _reload_rules(self) -> None:
        """
        Recharge les r√®gles depuis le fichier YAML.
        """
        new_rules = self._load_rules()
        
        # Comparer avec les r√®gles actuelles
        if new_rules != self.rules:
            old_count = len(self.rules)
            self.rules = new_rules
            logger.info(f"üîÑ R√®gles recharg√©es: {old_count} -> {len(self.rules)} r√®gles")
    
    def _initialize_default_state(self) -> Dict[str, Any]:
        """
        Initialise un √©tat par d√©faut avec des valeurs s√©curitaires.
        
        Returns:
            √âtat par d√©faut
        """
        state = {
            "timestamp": datetime.now().isoformat(),
            "active_trades": 0,
            "daily_pnl": 0.0,
            "daily_pnl_percent": 0.0,
            "daily_trades": 0,
            "total_value": 1000.0,  # Valeur initiale par d√©faut (1000 USDC)
            "symbols": {},
            "strategy_consecutive_losses": 0  # Valeur par d√©faut
        }
        
        # Ajouter des valeurs par d√©faut pour chaque symbole
        for symbol in SYMBOLS:
            state["symbols"][symbol] = {
                "active_trades": 0,
                "exposure": 0.0,
                "exposure_percent": 0.0,
                "volatility_1h": 1.0,  # Valeur par d√©faut pour la volatilit√©
                "volatility_24h": 2.0,
                "price_change_1h": 0.0,
                "price_change_24h": 0.0
            }
            
            # D√©finir des alias pour simplifier l'√©valuation des r√®gles
            state[f"{symbol}_exposure"] = 0.0
            state[f"{symbol}_exposure_percent"] = 0.0
            state[f"{symbol}_volatility_1h"] = 1.0
            state[f"{symbol}_volatility_24h"] = 2.0
            state[f"{symbol}_active_trades"] = 0
            state[f"{symbol}_price_change_1h"] = 0.0
            state[f"{symbol}_price_change_24h"] = 0.0
        
        return state
    
    def _get_system_state(self) -> Dict[str, Any]:
        """
        R√©cup√®re l'√©tat actuel du syst√®me.
        
        Returns:
            √âtat du syst√®me
        """
        # Initialiser avec des valeurs par d√©faut
        state = self._initialize_default_state()
        
        try:
            # R√©cup√©rer les donn√©es du portfolio
            portfolio_response = requests.get(f"{self.portfolio_api_url}/summary", timeout=5)
            if portfolio_response.status_code == 200:
                portfolio_data = portfolio_response.json()
                state["total_value"] = portfolio_data.get("total_value", state["total_value"])
                state["active_trades"] = portfolio_data.get("active_trades", state["active_trades"])
                state["performance_24h"] = portfolio_data.get("performance_24h", 0.0)
                
                # Calculer le PnL quotidien
                state["daily_pnl_percent"] = state["performance_24h"]
                if state["daily_pnl_percent"] is None:
                    state["daily_pnl_percent"] = 0.0
                if state["total_value"] > 0:
                    state["daily_pnl"] = state["total_value"] * state["daily_pnl_percent"] / 100
                
                # R√©cup√©rer les balances
                balances = portfolio_data.get("balances", [])
                state["balances"] = {b["asset"]: b for b in balances}
                
                # R√©initialiser le compteur d'√©checs de connexion
                self.connection_failures = 0
            
            # R√©cup√©rer les donn√©es des trades actifs
            trades_response = requests.get(f"{self.trader_api_url}/orders", timeout=5)
            if trades_response.status_code == 200:
                active_orders = trades_response.json()
                
                # Organiser par symbole
                symbol_trades = {}
                for order in active_orders:
                    symbol = order.get("symbol", "unknown")
                    if symbol not in symbol_trades:
                        symbol_trades[symbol] = []
                    symbol_trades[symbol].append(order)
                
                # Calculer l'exposition par symbole
                for symbol, trades in symbol_trades.items():
                    if symbol in state["symbols"]:
                        exposure = sum(float(t.get("quantity", 0)) * float(t.get("entry_price", 0)) for t in trades)
                        state["symbols"][symbol]["active_trades"] = len(trades)
                        state["symbols"][symbol]["exposure"] = exposure
                        
                        # Calculer le pourcentage d'exposition
                        if state["total_value"] > 0:
                            state["symbols"][symbol]["exposure_percent"] = (exposure / state["total_value"]) * 100
                
                # R√©initialiser le compteur d'√©checs de connexion
                self.connection_failures = 0
            
            # R√©cup√©rer les statistiques de trading quotidiennes
            stats_response = requests.get(f"{self.portfolio_api_url}/performance/daily?limit=1", timeout=5)
            if stats_response.status_code == 200:
                stats_data = stats_response.json()
                if "data" in stats_data and len(stats_data["data"]) > 0:
                    daily_stats = stats_data["data"][0]
                    state["daily_trades"] = daily_stats.get("total_trades", state["daily_trades"])
                    
                    # Si le PnL n'a pas √©t√© calcul√© plus haut, l'extraire des stats
                    if state["daily_pnl"] == 0:
                        state["daily_pnl"] = daily_stats.get("daily_profit_loss", state["daily_pnl"])
                
                # R√©initialiser le compteur d'√©checs de connexion
                self.connection_failures = 0
            
            # Pour chaque symbole configur√©, s'assurer que les variables sont d√©finies
            for symbol in SYMBOLS:
                if symbol not in state["symbols"]:
                    state["symbols"][symbol] = {
                        "active_trades": 0,
                        "exposure": 0.0,
                        "exposure_percent": 0.0,
                        "volatility_1h": 1.0,
                        "volatility_24h": 2.0,
                        "price_change_1h": 0.0,
                        "price_change_24h": 0.0
                    }
                else:
                    # S'assurer que toutes les cl√©s sont pr√©sentes
                    default_keys = ["active_trades", "exposure", "exposure_percent", 
                                   "volatility_1h", "volatility_24h", "price_change_1h", "price_change_24h"]
                    for key in default_keys:
                        if key not in state["symbols"][symbol]:
                            state["symbols"][symbol][key] = 0.0 if "percent" in key or "price" in key or "exposure" in key else 0
                
                # Mettre √† jour la volatilit√© (√† calculer ou r√©cup√©rer)
                if "volatility_1h" not in state["symbols"][symbol]:
                    state["symbols"][symbol]["volatility_1h"] = self._calculate_volatility(symbol, "1h")
                
                if "volatility_24h" not in state["symbols"][symbol]:
                    state["symbols"][symbol]["volatility_24h"] = self._calculate_volatility(symbol, "24h")
                
                # D√©finir des alias pour simplifier l'√©valuation des r√®gles
                state[f"{symbol}_exposure"] = state["symbols"][symbol]["exposure"]
                state[f"{symbol}_exposure_percent"] = state["symbols"][symbol]["exposure_percent"]
                state[f"{symbol}_volatility_1h"] = state["symbols"][symbol]["volatility_1h"]
                state[f"{symbol}_volatility_24h"] = state["symbols"][symbol]["volatility_24h"]
                state[f"{symbol}_active_trades"] = state["symbols"][symbol]["active_trades"]
                state[f"{symbol}_price_change_1h"] = state["symbols"][symbol].get("price_change_1h", 0.0)
                state[f"{symbol}_price_change_24h"] = state["symbols"][symbol].get("price_change_24h", 0.0)
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'√©tat du syst√®me: {str(e)}")
            self.connection_failures += 1
            
            # Si trop d'√©checs cons√©cutifs, mettre une alerte dans les logs
            if self.connection_failures >= self.max_connection_failures:
                logger.warning(f"‚ö†Ô∏è {self.connection_failures} √©checs de connexion cons√©cutifs. Utilisation de valeurs par d√©faut.")
        
        return state
    
    def _calculate_volatility(self, symbol: str, period: str) -> float:
        """
        Calcule la volatilit√© d'un symbole sur une p√©riode donn√©e.
        
        Args:
            symbol: Symbole
            period: P√©riode ('1h', '24h', etc.)
            
        Returns:
            Volatilit√© (en pourcentage)
        """
        # TODO: Impl√©menter le calcul de volatilit√© en utilisant les donn√©es historiques
        # Pour l'instant, utiliser des valeurs par d√©faut pour les tests
        if period == "1h":
            return 1.5  # 1.5% de volatilit√© par heure
        elif period == "24h":
            return 4.0  # 4% de volatilit√© par jour
        else:
            return 0.0
    
    def _evaluate_condition(self, condition: str, parameters: Dict[str, Any], state: Dict[str, Any]) -> bool:
        """
        √âvalue une condition de r√®gle de mani√®re s√©curis√©e.
        
        Args:
            condition: Condition √† √©valuer
            parameters: Param√®tres de la condition
            state: √âtat du syst√®me
            
        Returns:
            True si la condition est remplie, False sinon
        """
        try:
            # Remplacer les placeholders par les valeurs de param√®tres
            formatted_condition = condition
            for param_name, param_value in parameters.items():
                placeholder = "{" + param_name + "}"
                formatted_condition = formatted_condition.replace(placeholder, str(param_value))
        
            # Cr√©er un environnement d'√©valuation restreint avec l'√©tat du syst√®me
            safe_dict = {k: v for k, v in state.items()}
        
            # Ajouter des fonctions math√©matiques s√©curis√©es
            safe_dict.update({
                'abs': abs,
                'max': max,
                'min': min,
                'round': round,
                'sum': sum
            })
        
            # Remplacer les op√©rateurs logiques textuels par leurs √©quivalents Python
            formatted_condition = formatted_condition.replace(" and ", " and ")
            formatted_condition = formatted_condition.replace(" or ", " or ")
            formatted_condition = formatted_condition.replace(" not ", " not ")
        
            # √âvaluer la condition de mani√®re restreinte
            return eval(formatted_condition, {"__builtins__": {}}, safe_dict)
        
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'√©valuation de la condition '{condition}': {str(e)}")
            return False
    
    def _execute_action(self, action: str, rule: Dict[str, Any], state: Dict[str, Any]) -> bool:
        """
        Ex√©cute l'action d'une r√®gle.
        
        Args:
            action: Action √† ex√©cuter
            rule: R√®gle concern√©e
            state: √âtat du syst√®me
            
        Returns:
            True si l'action a √©t√© ex√©cut√©e avec succ√®s, False sinon
        """
        try:
            rule_name = rule["name"]
            
            # Log de l'action
            logger.warning(f"‚ö†Ô∏è R√®gle d√©clench√©e: {rule_name} -> {action}")
            
            # Notifier via Redis
            notification = {
                "rule_name": rule_name,
                "rule_type": rule["type"],
                "action": action,
                "severity": rule.get("severity", "warning"),
                "description": rule.get("description", ""),
                "timestamp": datetime.now().isoformat(),
                "state": {k: state[k] for k in ["active_trades", "daily_pnl", "daily_pnl_percent"] 
                         if k in state}
            }
            
            # Ajouter des infos sp√©cifiques selon le scope
            if rule["scope"] == "symbol" and "symbol" in rule:
                symbol = rule["symbol"]
                notification["symbol"] = symbol
                if symbol in state["symbols"]:
                    notification["symbol_state"] = state["symbols"][symbol]
            
            # Publier la notification
            try:
                self.redis_client.publish("roottrading:alerts", notification)
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la publication de la notification: {str(e)}")
            
            # Ajouter aux r√®gles d√©clench√©es
            self.triggered_rules.add(rule_name)
            
            # Ex√©cuter l'action sp√©cifique
            if action == "alert_only":
                # Rien √† faire de plus, juste l'alerte
                return True
            
            # Pour les autres actions, essayez de les ex√©cuter mais ne bloquez pas le fonctionnement
            # en cas d'√©chec (pour augmenter la r√©silience)
            try:
                if action == "pause_new_trades":
                    # Appeler l'API pour mettre en pause les nouveaux trades
                    if rule["scope"] == "global":
                        # Pause globale
                        response = requests.post(f"{self.trader_api_url}/config/pause", timeout=5)
                        return response.status_code == 200
                    
                    elif rule["scope"] == "symbol" and "symbol" in rule:
                        # Pause sp√©cifique √† un symbole
                        symbol = rule["symbol"]
                        response = requests.post(
                            f"{self.trader_api_url}/config/pause",
                            json={"symbol": symbol},
                            timeout=5
                        )
                        return response.status_code == 200
                    
                    elif rule["scope"] == "strategy" and "strategy" in rule:
                        # Pause sp√©cifique √† une strat√©gie
                        strategy = rule["strategy"]
                        response = requests.post(
                            f"{self.trader_api_url}/config/pause",
                            json={"strategy": strategy},
                            timeout=5
                        )
                        return response.status_code == 200
                
                elif action == "disable_trading":
                    # Appeler l'API pour d√©sactiver le trading
                    response = requests.post(f"{self.trader_api_url}/config/disable", timeout=5)
                    return response.status_code == 200
                
                elif action == "pause_symbol" and rule["scope"] == "symbol" and "symbol" in rule:
                    # Pause sp√©cifique √† un symbole
                    symbol = rule["symbol"]
                    response = requests.post(
                        f"{self.trader_api_url}/config/pause",
                        json={"symbol": symbol},
                        timeout=5
                    )
                    return response.status_code == 200
                
                elif action == "close_symbol_positions" and rule["scope"] == "symbol" and "symbol" in rule:
                    # Fermer toutes les positions d'un symbole
                    symbol = rule["symbol"]
                    response = requests.post(
                        f"{self.trader_api_url}/close_all",
                        json={"symbol": symbol},
                        timeout=5
                    )
                    return response.status_code == 200
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'ex√©cution de l'action '{action}': {str(e)}")
                return False
                
            # Action non reconnue ou non impl√©ment√©e
            logger.warning(f"‚ö†Ô∏è Action '{action}' non impl√©ment√©e")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution de l'action '{action}': {str(e)}")
            return False
    
    def check_rules(self) -> List[Dict[str, Any]]:
        """
        V√©rifie toutes les r√®gles actives et ex√©cute les actions n√©cessaires.
        
        Returns:
            Liste des r√®gles d√©clench√©es
        """
        # Recharger les r√®gles (pour prendre en compte les modifications)
        self._reload_rules()
        
        # R√©cup√©rer l'√©tat actuel du syst√®me
        state = self._get_system_state()
        self.system_state = state
        
        # R√©initialiser les r√®gles d√©clench√©es pour cette v√©rification
        triggered_rules_now = []
        
        # V√©rifier chaque r√®gle
        for rule in self.rules:
            # Ignorer les r√®gles d√©sactiv√©es
            if not rule.get("enabled", True):
                continue
            
            # V√©rifier si la condition est remplie
            try:
                condition = rule["condition"]
                parameters = rule.get("parameters", {})
                
                if self._evaluate_condition(condition, parameters, state):
                    # Condition remplie, ex√©cuter l'action
                    action = rule["action"]
                    success = self._execute_action(action, rule, state)
                    
                    # Stocker les informations sur la r√®gle d√©clench√©e
                    triggered = {
                        "name": rule["name"],
                        "type": rule["type"],
                        "scope": rule["scope"],
                        "action": action,
                        "success": success,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    if rule["scope"] == "symbol" and "symbol" in rule:
                        triggered["symbol"] = rule["symbol"]
                    
                    if rule["scope"] == "strategy" and "strategy" in rule:
                        triggered["strategy"] = rule["strategy"]
                    
                    triggered_rules_now.append(triggered)
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification de la r√®gle {rule['name']}: {str(e)}")
        
        return triggered_rules_now
    
    def _check_loop(self) -> None:
        """
        Boucle de v√©rification p√©riodique des r√®gles.
        """
        logger.info("üîç D√©marrage de la v√©rification des r√®gles...")
        
        while not self.stop_event.is_set():
            try:
                # V√©rifier les r√®gles
                triggered = self.check_rules()
                
                if triggered:
                    logger.warning(f"‚ö†Ô∏è {len(triggered)} r√®gles d√©clench√©es")
                else:
                    logger.info("‚úÖ Aucune r√®gle d√©clench√©e")
                
                # Attendre jusqu'√† la prochaine v√©rification
                for _ in range(self.check_interval):
                    if self.stop_event.is_set():
                        break
                    time.sleep(1)
            
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de v√©rification: {str(e)}")
                time.sleep(10)  # Pause en cas d'erreur
        
        logger.info("‚úÖ V√©rification des r√®gles arr√™t√©e")
    
    def start(self) -> None:
        """
        D√©marre la v√©rification des r√®gles en arri√®re-plan.
        """
        if self.check_thread and self.check_thread.is_alive():
            logger.warning("‚ö†Ô∏è V√©rification des r√®gles d√©j√† en cours")
            return
        
        self.stop_event.clear()
        self.check_thread = threading.Thread(target=self._check_loop, daemon=True)
        self.check_thread.start()
        
        logger.info("‚úÖ V√©rification des r√®gles d√©marr√©e")
    
    def stop(self) -> None:
        """
        Arr√™te la v√©rification des r√®gles.
        """
        if not self.check_thread or not self.check_thread.is_alive():
            return
        
        logger.info("üõë Arr√™t de la v√©rification des r√®gles...")
        self.stop_event.set()
        
        if self.check_thread:
            self.check_thread.join(timeout=self.check_interval + 5)
            if self.check_thread.is_alive():
                logger.warning("‚ö†Ô∏è Le thread de v√©rification ne s'est pas arr√™t√© proprement")
        
        # Fermer le client Redis
        self.redis_client.close()
        
        logger.info("‚úÖ V√©rification des r√®gles arr√™t√©e")
    
    def get_system_state(self) -> Dict[str, Any]:
        """
        R√©cup√®re l'√©tat actuel du syst√®me.
        
        Returns:
            √âtat du syst√®me
        """
        return self.system_state
    
    def get_triggered_rules(self) -> List[str]:
        """
        R√©cup√®re la liste des r√®gles d√©clench√©es.
        
        Returns:
            Liste des r√®gles d√©clench√©es
        """
        return list(self.triggered_rules)
    
    def get_rule_details(self, rule_name: str) -> Optional[Dict[str, Any]]:
        """
        R√©cup√®re les d√©tails d'une r√®gle.
        
        Args:
            rule_name: Nom de la r√®gle
            
        Returns:
            D√©tails de la r√®gle ou None si non trouv√©e
        """
        for rule in self.rules:
            if rule["name"] == rule_name:
                return rule
        return None
    
    def get_status_summary(self) -> Dict[str, Any]:
        """
        R√©cup√®re un r√©sum√© de l'√©tat du RuleChecker.
        
        Returns:
            R√©sum√© de l'√©tat
        """
        return {
            "active_rules": len([r for r in self.rules if r.get("enabled", True)]),
            "total_rules": len(self.rules),
            "triggered_rules": len(self.triggered_rules),
            "connection_failures": self.connection_failures,
            "system_state": {
                "active_trades": self.system_state.get("active_trades", 0),
                "total_value": self.system_state.get("total_value", 0),
                "daily_pnl_percent": self.system_state.get("daily_pnl_percent", 0),
                "symbols": {
                    symbol: {
                        "active_trades": self.system_state.get("symbols", {}).get(symbol, {}).get("active_trades", 0),
                        "exposure_percent": self.system_state.get("symbols", {}).get(symbol, {}).get("exposure_percent", 0)
                    } for symbol in SYMBOLS
                }
            },
            "last_check": datetime.now().isoformat()
        }

# Point d'entr√©e pour les tests
if __name__ == "__main__":
    # Initialiser et d√©marrer le v√©rificateur de r√®gles
    checker = RuleChecker()
    checker.start()
    
    try:
        # Rester en vie jusqu'√† Ctrl+C
        while True:
            time.sleep(1)
    
    except KeyboardInterrupt:
        # Arr√™ter proprement
        checker.stop()
        logger.info("Programme termin√©")