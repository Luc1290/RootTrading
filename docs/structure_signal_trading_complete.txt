STRUCTURE COMPLÈTE DES SIGNAUX DE TRADING - FLUX ANALYZER → AGGREGATOR → DB
===========================================================================

1. SIGNAL GÉNÉRÉ PAR L'ANALYZER
================================

Chaque stratégie retourne un signal avec cette structure :
```python
{
    "side": "BUY" ou "SELL" ou None,
    "confidence": 0.75,              # 0-1 (décimal) - SCORE PRINCIPAL
    "strength": "strong",            # texte dérivé de confidence
    "reason": "MACD croise au-dessus...",
    "metadata": {
        "strategy": "MACD_Crossover_Strategy",
        "symbol": "BTCUSDC",
        "current_price": 69500.50,
        # ... données spécifiques à la stratégie
    }
}
```

L'analyzer ajoute ensuite :
- symbol
- timeframe
- strategy (nom)
- timestamp

Et envoie via Redis au signal_aggregator.

2. SIGNAL REÇU PAR LE SIGNAL_AGGREGATOR
========================================

Le signal_aggregator reçoit le signal et :

A) VALIDE avec ~30 validators qui donnent chacun :
   - is_valid: boolean
   - score: 0-1 (décimal)
   - weighted_score: score × weight (1.2 à 1.8 selon catégorie)
   - reason: texte

B) CALCULE UN NOUVEAU SCORE FINAL :
   - avg_weighted_score = moyenne des scores pondérés
   - final_score = avg_weighted_score × bonus/malus
   - Bonus si validation forte (+10%)
   - Bonus si signal haute confiance (+5%)
   - Pénalité si trop d'échecs (-10%)
   - Cappé à 1.0 maximum

C) DÉCISION DE VALIDATION :
   - validators_passed >= 3 (minimum)
   - avg_weighted_score >= 0.75 (75%)
   - Pas plus de 8 validators en échec

3. SIGNAL VALIDÉ ET ENRICHI
============================

Si validé, le signal_aggregator construit :
```python
{
    # Champs obligatoires pour la DB
    'strategy': 'MACD_Crossover_Strategy',
    'symbol': 'BTCUSDC',
    'side': 'BUY',
    'timestamp': '2025-07-31T10:00:00',
    'price': 69500.50,  # Extrait du contexte
    
    # Scores recalculés
    'confidence': 0.68,  # original × final_score (ex: 0.75 × 0.90)
    'strength': 'strong',  # remappé selon confidence finale
    
    # Métadonnées enrichies
    'metadata': {
        # Originales de la stratégie
        'timeframe': '5m',
        'reason': 'MACD croise...',
        
        # Ajoutées par l'aggregator
        'validation_timestamp': '2025-07-31T10:00:05',
        'validation_score': 0.90,  # final_score
        'raw_validation_score': 0.82,
        'weighted_validation_score': 0.87,
        'validators_passed': 25,
        'total_validators': 30,
        'validation_strength': 'strong',
        'pass_rate': 0.83,
        'aggregator_confidence': 0.68,  # confidence finale
        'final_score': 0.675,  # final_score × original confidence
        'category_scores': {
            'trend': 0.85,
            'volume': 0.78,
            'structure': 0.91,
            # ...
        },
        'validation_details': [...]
    }
}
```

4. STOCKAGE EN BASE DE DONNÉES
===============================

Table `trading_signals` :
- id: auto-increment
- strategy: VARCHAR(50)
- symbol: VARCHAR(20)
- side: 'BUY' ou 'SELL'
- timestamp: TIMESTAMP
- confidence: NUMERIC(5,2) → stocke 'aggregator_confidence' (0.68)
- price: NUMERIC(20,8)
- metadata: JSONB → toutes les métadonnées
- processed: BOOLEAN (false par défaut)

5. RÉSUMÉ DES SCORES
====================

SCORES ORIGINAUX (de la stratégie) :
- confidence: 0-1 (ex: 0.75)
- strength: texte dérivé

SCORES DE VALIDATION (signal_aggregator) :
- Chaque validator: score 0-1
- weighted_score: score × weight (1.2-1.8)
- avg_weighted_score: moyenne pondérée (ex: 0.87)
- final_score: avg_weighted × bonus/malus (ex: 0.90)

SCORES FINAUX (en DB) :
- confidence: original × final_score (ex: 0.75 × 0.90 = 0.68)
- metadata.aggregator_confidence: idem
- metadata.final_score: final_score × original (ex: 0.90 × 0.75 = 0.675)
- metadata.validation_score: final_score seul (ex: 0.90)

POURQUOI CETTE COMPLEXITÉ ?
==========================

1. La stratégie donne sa confiance initiale (0.75)
2. Les validators vérifient le contexte et ajustent (×0.90)
3. La confiance finale reflète les deux (0.68)
4. Permet de filtrer les faux signaux
5. Le coordinator utilise la confiance finale pour décider

ÉCHELLES UTILISÉES
==================
- Tous les scores de confiance : 0-1 (décimal)
- Seul 'strength' est en texte
- Pas de scores 0-100 dans le flux des signaux