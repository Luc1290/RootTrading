 üìä LISTE EXHAUSTIVE - TOUS LES CALCULS INDICATORS & DETECTORS

  üéØ INDICATORS - Calculs Techniques

  üìà MOMENTUM

  /momentum/rsi.py
  - calculate_rsi() - RSI standard 14 p√©riodes + cache Redis
  - calculate_rsi_series() - RSI sur s√©rie compl√®te
  - calculate_stoch_rsi() - Stochastic RSI avec %K et %D
  - calculate_rsi_cached() - Optimisation Redis 10x plus rapide

  /momentum/cci.py
  - calculate_cci() - Commodity Channel Index
  - cci_signal() - Signaux CCI (surachat/survente)
  - calculate_cci_divergence() - D√©tection divergences CCI

  /momentum/momentum.py
  - calculate_momentum() - Momentum standard (n p√©riodes)
  - calculate_roc() - Rate of Change
  - calculate_trix() - TRIX triple lissage exponentiel
  - calculate_price_oscillator() - Oscillateur de prix

  üìä TREND

  /trend/moving_averages.py
  - calculate_sma() - Simple Moving Average
  - calculate_ema() - EMA avec cache Redis incr√©mental
  - calculate_ema_cached() - Performance boost 10x
  - calculate_wma() - Weighted Moving Average
  - calculate_dema() - Double Exponential MA
  - calculate_tema() - Triple Exponential MA
  - calculate_hull_ma() - Hull Moving Average
  - calculate_kama() - Kaufman Adaptive MA
  - calculate_ema_incremental() - Mise √† jour incr√©mentale

  /trend/macd.py
  - calculate_macd() - MACD line, signal, histogram
  - calculate_macd_series() - MACD s√©rie compl√®te
  - calculate_ppo() - Percentage Price Oscillator
  - macd_signal_cross() - D√©tection croisements MACD

  /trend/adx.py
  - calculate_adx_full() - ADX + DI+ + DI- + DX + ADXR
  - calculate_di_plus() - Directional Indicator +
  - calculate_di_minus() - Directional Indicator -
  - calculate_dx() - Directional Index
  - calculate_adxr() - ADX Rating
  - adx_trend_strength() - Classification force tendance

  üåä VOLATILITY

  /volatility/bollinger.py
  - calculate_bollinger_bands() - Bandes de Bollinger (upper/middle/lower)
  - calculate_bollinger_bands_series() - BB s√©rie compl√®te
  - calculate_bollinger_squeeze() - D√©tection squeeze BB
  - bollinger_signal() - Signaux BB (touch/breakout)

  /volatility/atr.py
  - calculate_atr() - Average True Range
  - calculate_atr_series() - ATR s√©rie compl√®te
  - calculate_natr() - Normalized ATR
  - calculate_true_range() - True Range individuel
  - calculate_dynamic_stops() - Stops dynamiques bas√©s ATR
  - volatility_regime() - Classification r√©gime volatilit√©

  üéØ OSCILLATORS

  /oscillators/stochastic.py
  - calculate_stochastic() - %K et %D stochastique
  - calculate_stochastic_series() - Stochastic s√©rie
  - stochastic_signal() - Signaux stochastic
  - calculate_stochastic_divergence() - Divergences stochastic

  /oscillators/williams.py
  - calculate_williams_r() - Williams %R
  - calculate_williams_r_series() - Williams %R s√©rie
  - williams_r_signal() - Signaux Williams %R
  - calculate_trend_strength_williams() - Force tendance via Williams

  üìä VOLUME

  /volume/obv.py
  - calculate_obv() - On Balance Volume
  - calculate_obv_series() - OBV s√©rie compl√®te
  - calculate_obv_ma() - OBV avec moyennes mobiles
  - detect_obv_divergence() - Divergences OBV vs prix

  /volume/vwap.py
  - calculate_vwap_quote() - VWAP avec volumes USDC (crypto-optimis√©)
  - calculate_vwap_series() - VWAP s√©rie
  - calculate_volume_profile() - Profil de volume POC/Value Areas
  - vwap_signal() - Signaux VWAP (support/r√©sistance)

  /volume/advanced_metrics.py
  - analyze_volume_quality() - Qualit√© du volume quote
  - calculate_quote_volume_ratio() - Ratio volume quote/base
  - detect_volume_anomaly() - D√©tection anomalies volume Z-score
  - calculate_average_trade_size() - Taille moyenne transactions
  - analyze_trade_intensity() - Intensit√© des √©changes

  ---
  üîç DETECTORS - Analyse March√©

  üé® REGIME DETECTION

  /detectors/regime_detector.py
  - detect_regime() - D√©tection r√©gime principal avec cache
  - _analyze_volatility() - Analyse ATR + Bollinger Width
  - _analyze_trend() - Analyse EMA avec cache Redis
  - _analyze_momentum() - RSI + MACD avec cache
  - _analyze_volume() - Profil et tendance volume
  - _analyze_market_structure() - Force S/R + range analysis
  - _determine_regime_type() - Classification: trending/ranging/volatile/breakout
  - _calculate_regime_strength() - Force: weak/moderate/strong/extreme
  - _calculate_confidence() - Score confiance 0-100
  - _estimate_regime_duration() - Dur√©e estim√©e r√©gime

  üéØ SUPPORT/RESISTANCE

  /detectors/support_resistance_detector.py
  - detect_levels() - D√©tection compl√®te niveaux S/R
  - _detect_pivot_levels() - Points pivots (swing highs/lows)
  - _detect_volume_levels() - POC + Value Areas (70% volume)
  - _detect_psychological_levels() - Niveaux psychologiques (nombres ronds)
  - _detect_trendlines() - Lignes tendance dynamiques
  - _consolidate_levels() - Fusion niveaux proches
  - _calculate_final_strength() - Force finale: weak/moderate/strong/major
  - _count_touches() - D√©compte tests niveaux
  - _calculate_break_probability() - Probabilit√© cassure
  - get_nearest_levels() - Niveaux proches prix actuel
  - get_key_levels_summary() - R√©sum√© supports/r√©sistances

  ‚ö° SPIKE DETECTION

  /detectors/spike_detector.py
  - detect_spikes() - D√©tection compl√®te anomalies
  - _detect_price_spikes() - Spikes prix via Z-score
  - _detect_volume_spikes() - Spikes volume anormaux
  - _detect_combined_spikes() - Spikes prix+volume simultan√©s
  - _detect_manipulation_patterns() - Patterns pump/dump
  - _detect_liquidity_sweeps() - Balayages liquidit√©/stops
  - _detect_pump_pattern() - Mont√©e rapide + chute
  - _detect_dump_pattern() - Chute rapide avec volume
  - _consolidate_spikes() - Fusion spikes temporels
  - _analyze_post_spike_impact() - Comportement post-spike
  - get_spike_summary() - R√©sum√© par type/intensit√©

  üìè RANGE ANALYSIS

  /detectors/range_analyzer.py
  - analyze_range() - Analyse compl√®te range trading
  - detect_breakout() - D√©tection/confirmation breakouts
  - _identify_range_boundaries() - Limites via percentiles + clustering
  - _assess_range_quality() - Qualit√©: excellent/good/average/poor
  - _count_boundary_tests() - Tests limites range
  - _calculate_range_efficiency() - % temps dans range
  - _detect_pump_pattern() - Probabilit√© breakout
  - _analyze_bullish_breakout() - Analyse breakout haussier
  - _analyze_bearish_breakout() - Analyse breakout baissier
  - get_trading_levels() - Zones buy/sell + targets breakout

  üïê MULTI-TIMEFRAME

  /detectors/multitimeframe_analyzer.py
  - analyze_multiple_timeframes() - Agr√©gation signals multi-TF
  - _analyze_single_timeframe() - Analyse TF individuel
  - _analyze_trend_alignment() - Alignement tendances TF
  - _calculate_overall_signal_strength() - Force globale signal
  - _determine_primary_trend() - Tendance primaire pond√©r√©e
  - _find_confluent_support_levels() - Supports confirm√©s multi-TF
  - _find_confluent_resistance_levels() - R√©sistances confirm√©es multi-TF
  - _calculate_regime_consensus() - Consensus r√©gime
  - _identify_entry_zones() - Zones entr√©e optimales
  - _identify_exit_zones() - Zones sortie optimales
  - _detect_divergences() - Divergences inter-TF
  - get_trading_recommendation() - Recommandation BUY/SELL/HOLD

  üìä VOLUME CONTEXT

  /detectors/volume_context_analyzer.py
  - analyze_volume_context() - Analyse contexte intelligent
  - _calculate_market_indicators() - RSI/CCI/ADX avec cache
  - _detect_market_context() - Contexte: oversold/breakout/pump etc.
  - _detect_volume_buildup() - Accumulation progressive volume
  - _detect_volume_spike() - Pic volume soudain
  - _analyze_volume_trend() - Tendance: increasing/decreasing/stable
  - _identify_volume_pattern() - Pattern: buildup/spike/sustained/declining
  - _calculate_tolerance_factor() - Facteur tol√©rance adaptatif
  - _calculate_pattern_strength() - Force pattern 0-100
  - _calculate_volume_quality_score() - Score qualit√© global
  - get_adaptive_threshold() - Seuil volume adaptatif
  - is_volume_acceptable() - Validation volume selon contexte