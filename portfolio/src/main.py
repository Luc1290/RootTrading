"""
Point d'entr√©e principal pour le microservice Portfolio.
G√®re la synchronisation des balances et expose une API REST.
"""
import argparse
import asyncio
import logging
import signal
import sys
import time
import os
import uvicorn
from contextlib import asynccontextmanager

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

# Maintenant que le chemin est configur√©, importer les modules n√©cessaires
from shared.src.config import LOG_LEVEL
from utils.logging_config import setup_logging
from models import DBManager
from sync import start_sync_tasks
from redis_subscriber import start_redis_subscriptions
from startup import initial_sync_binance
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware

# Configuration du logging
logger = logging.getLogger("portfolio")

class PortfolioService:
    """
    Service principal pour le microservice Portfolio.
    G√®re la synchronisation des balances et expose une API REST.
    """
    
    def __init__(self, host="0.0.0.0", port=8000):
        """
        Initialise le service Portfolio.
        
        Args:
            host: Adresse IP pour l'API REST
            port: Port pour l'API REST
        """
        self.host = host
        self.port = port
        self.app = None
        self.running = False
        self.start_time = time.time()
        
        logger.info(f"‚úÖ PortfolioService initialis√© sur {host}:{port}")
    
    async def start(self):
        """
        D√©marre le service Portfolio.
        """
        if self.running:
            logger.warning("Le service est d√©j√† en cours d'ex√©cution")
            return
        
        self.running = True
        logger.info("üöÄ D√©marrage du service Portfolio RootTrading...")
        
        try:
            # V√©rifier la connexion √† la base de donn√©es
            await self._check_database_connection()
            
            # Initialiser la synchronisation Binance
            await initial_sync_binance()
            
            # D√©marrer les t√¢ches de synchronisation
            start_sync_tasks()
            
            # D√©marrer les abonnements Redis
            start_redis_subscriptions()
            
            # Cr√©er l'application FastAPI
            self.app = self._create_fastapi_app()
            
            logger.info("‚úÖ Service Portfolio d√©marr√©")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur critique lors du d√©marrage: {str(e)}")
            self.running = False
            raise
    
    async def _check_database_connection(self):
        """
        V√©rifie la connexion √† la base de donn√©es.
        """
        try:
            db = DBManager()
            result = db.execute_query("SELECT 1 as test", fetch_one=True)
            db.close()
            if result and result.get('test') == 1:
                logger.info("‚úÖ Connexion √† la base de donn√©es v√©rifi√©e")
            else:
                raise Exception("R√©ponse de test invalide")
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {str(e)}")
            raise
    
    def _create_fastapi_app(self):
        """
        Cr√©e et configure l'application FastAPI.
        """
        app = FastAPI(
            title="RootTrading Portfolio API",
            description="API pour la gestion du portefeuille et des poches de capital",
            version="1.0.0"
        )
        
        # Configurer CORS
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # Ajouter la compression gzip
        app.add_middleware(GZipMiddleware, minimum_size=1000)
        
        # Importer et enregistrer les routes
        from api import register_routes
        register_routes(app)
        
        return app
    
    def stop(self):
        """
        Arr√™te proprement le service Portfolio.
        """
        if not self.running:
            return
        
        logger.info("Arr√™t du service Portfolio...")
        self.running = False
        
        logger.info("Service Portfolio termin√©")
    
    def run_server(self):
        """
        Lance le serveur uvicorn.
        """
        if not self.app:
            raise RuntimeError("L'application FastAPI n'est pas initialis√©e")
        
        # Configuration du logging pour r√©duire la verbosit√©
        logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
        
        uvicorn.run(
            self.app,
            host=self.host,
            port=self.port,
            log_level="info",
            access_log=False  # D√©sactiver les logs d'acc√®s pour les health checks
        )


def parse_arguments():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(description='Portfolio RootTrading')
    parser.add_argument(
        '--host', 
        type=str, 
        default="0.0.0.0", 
        help='Adresse IP pour l\'API REST'
    )
    parser.add_argument(
        '--port', 
        type=int, 
        default=8000, 
        help='Port pour l\'API REST'
    )
    parser.add_argument(
        '--log-level',
        type=str,
        default=LOG_LEVEL,
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        help='Niveau de journalisation'
    )
    return parser.parse_args()


def setup_signal_handlers(portfolio_service):
    """
    Configure les gestionnaires de signaux pour arr√™ter proprement le service.
    
    Args:
        portfolio_service: Instance du service Portfolio
    """
    def signal_handler(sig, frame):
        logger.info(f"Signal {sig} re√ßu, arr√™t en cours...")
        portfolio_service.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """Fonction principale du service Portfolio."""
    # Parser les arguments
    args = parse_arguments()
    
    # Configurer le logging
    setup_logging(args.log_level)
    
    # Cr√©er le service
    portfolio_service = PortfolioService(host=args.host, port=args.port)
    
    # Configurer les gestionnaires de signaux
    setup_signal_handlers(portfolio_service)
    
    try:
        # D√©marrer le service
        await portfolio_service.start()
        
        # Lancer le serveur
        portfolio_service.run_server()
    
    except KeyboardInterrupt:
        logger.info("Programme interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans le service Portfolio: {str(e)}")
    finally:
        # Arr√™ter le service
        portfolio_service.stop()


if __name__ == "__main__":
    asyncio.run(main())