"""
Module de synchronisation pour le service Portfolio.
G√®re les t√¢ches de synchronisation continue avec Binance et la base de donn√©es.
"""

import asyncio
import threading
import logging
from models import PortfolioModel, DBManager, SharedCache
from binance_account_manager import BinanceAccountManager
from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY

logger = logging.getLogger(__name__)


def start_sync_tasks():
    """
    D√©marre les t√¢ches de synchronisation en arri√®re-plan.
    """
    logger.info("‚ñ∂Ô∏è D√©marrage des t√¢ches de synchronisation continue")
    threading.Thread(target=binance_sync_task, daemon=True).start()
    threading.Thread(target=database_sync_task, daemon=True).start()


def binance_sync_task():
    """
    T√¢che de synchronisation Binance en continu.
    Ex√©cute dans un thread s√©par√©.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(sync_binance_forever())


async def sync_binance_forever():
    """
    T√¢che asynchrone de synchronisation continue des balances Binance.
    Met √† jour les balances toutes les 60 secondes.
    """
    while True:
        try:
            account_manager = BinanceAccountManager(BINANCE_API_KEY, BINANCE_SECRET_KEY)
            balances = account_manager.calculate_asset_values()

            db = DBManager()
            portfolio = PortfolioModel(db)
            success = portfolio.update_balances(balances)

            if success:
                SharedCache.clear("latest_balances")
                SharedCache.clear("portfolio_summary")
                logger.info(
                    f"‚úÖ {len(balances)} balances sauvegard√©es et cache invalid√©."
                )
            else:
                logger.error("‚ùå √âchec de la sauvegarde des balances Binance.")

            portfolio.close()
            db.close()
            logger.debug(f"üîÑ Balances Binance synchronis√©es ({len(balances)} actifs)")
        except Exception as e:
            logger.error(f"‚ùå Erreur sync Binance: {e}")
        await asyncio.sleep(60)


def database_sync_task():
    """
    T√¢che de synchronisation de la base de donn√©es.
    Ex√©cute dans un thread s√©par√©.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(sync_db_forever())


async def sync_db_forever():
    """
    T√¢che asynchrone de synchronisation continue de la base de donn√©es.
    Met √† jour les statistiques du portfolio toutes les 60 secondes.
    """
    sync_count = 0
    while True:
        try:
            db = DBManager()
            portfolio = PortfolioModel(db)

            # R√©cup√©rer la valeur totale du portfolio
            summary = portfolio.get_portfolio_summary()
            if summary:
                # Afficher le portfolio complet toutes les 10 sync (10 minutes)
                if sync_count % 10 == 0:
                    print("\n" + "=" * 60)
                    print("üìä PORTFOLIO ROOTTRADING - Mise √† jour")
                    print("=" * 60)
                    print(f"üíé Total Portfolio: {summary.total_value:.2f} USDC")
                    print(f"üìä Trades Actifs: {summary.active_trades}")
                    print("-" * 60)
                    print("üìà Balances par Crypto:")

                    # Trier les balances par valeur d√©croissante
                    balances_sorted = sorted(
                        summary.balances, key=lambda x: x.value_usdc or 0, reverse=True
                    )

                    for balance in balances_sorted:
                        if balance.total > 0:
                            percentage = (
                                (balance.value_usdc / summary.total_value) * 100
                                if summary.total_value > 0
                                else 0
                            )
                            print(
                                f"  {balance.asset:6} | {balance.total:>12.8f} | {balance.value_usdc:>8.2f} USDC ({percentage:>5.1f}%)"
                            )

                    print("=" * 60)
                else:
                    # Affichage simplifi√© pour les autres sync
                    logger.info(
                        f"üîÑ Portfolio: {summary.total_value:.2f} USDC | Trades: {summary.active_trades}"
                    )

                sync_count += 1
            else:
                logger.warning("‚ö†Ô∏è Impossible de r√©cup√©rer le r√©sum√© du portfolio")

            portfolio.close()
            db.close()
            logger.debug("üîÑ Synchronisation des poches DB termin√©e")
        except Exception as e:
            logger.error(f"‚ùå Erreur sync DB: {e}")
        await asyncio.sleep(60)
