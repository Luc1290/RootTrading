"""
Gestionnaire des poches de capital.
G√®re la r√©partition du capital en diff√©rentes poches pour le trading.
"""
import logging
from typing import Dict, List, Any, Optional, Union
from datetime import datetime
import time

# Importer les modules partag√©s
import sys
import os
import json                                     # NEW
from shared.src.redis_client import RedisClient # NEW
from urllib.parse import urljoin
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.config import POCKET_CONFIG
from shared.src.schemas import PocketSummary

from portfolio.src.models import DBManager, SharedCache

# Configuration du logging
logger = logging.getLogger(__name__)

class PocketError(Exception):
    """Exception de base pour les erreurs de poches."""
    pass

class InsufficientFundsError(PocketError):
    """Exception lev√©e lorsqu'une poche n'a pas assez de fonds."""
    pass

class PocketNotFoundError(PocketError):
    """Exception lev√©e lorsqu'une poche n'existe pas."""
    pass

class PocketManager:
    """
    Gestionnaire des poches de capital.
    G√®re la r√©partition du capital entre les poches active, tampon et s√©curit√©.
    """
    
    def __init__(self, db_manager: DBManager = None):
        """
        Initialise le gestionnaire de poches.
        
        Args:
            db_manager: Gestionnaire de base de donn√©es pr√©existant (optionnel)
        """
        self.db = db_manager or DBManager()
        
        # Configuration des poches
        self.pocket_config = POCKET_CONFIG
        
        # Initialiser les poches si n√©cessaire
        self._ensure_pockets_exist()
        
        # D√©marrer le thread de nettoyage des r√©servations orphelines
        self._start_cleanup_thread()
        
        logger.info("‚úÖ PocketManager initialis√©")
    
    def _start_cleanup_thread(self):
        """D√©marre un thread de nettoyage p√©riodique des r√©servations orphelines."""
        import threading
        
        def cleanup_routine():
            while True:
                try:
                    # Nettoyer les r√©servations orphelines toutes les 30 minutes
                    time.sleep(1800)
                    self._cleanup_orphan_reservations()
                except Exception as e:
                    logger.error(f"‚ùå Erreur dans le thread de nettoyage: {str(e)}")
        
        cleanup_thread = threading.Thread(target=cleanup_routine, daemon=True)
        cleanup_thread.start()
        logger.info("üßπ Thread de nettoyage des r√©servations d√©marr√©")
    
    def _cleanup_orphan_reservations(self):
        """Nettoie les r√©servations orphelines dans Redis et la DB."""
        try:
            redis = RedisClient()
            cleaned_count = 0
            
            # Parcourir tous les types de poches et assets
            for pocket_type in ['active', 'buffer', 'safety']:
                for asset in ['USDC', 'BTC', 'ETH', 'BNB', 'SUI']:
                    redis_key = f"pocket:{pocket_type}:{asset}:reservations"
                    all_reservations = redis.hgetall(redis_key)
                    
                    for res_id, res_data in all_reservations.items():
                        try:
                            # Redis peut retourner soit une cha√Æne JSON, soit un dict d√©j√† d√©cod√©
                            if isinstance(res_data, dict):
                                reservation = res_data
                            else:
                                reservation = json.loads(res_data)
                            # Si la r√©servation a plus de 24h, la consid√©rer comme orpheline
                            age_hours = (time.time() - reservation.get('timestamp', 0)) / 3600
                            
                            if age_hours > 24:
                                # V√©rifier si le cycle existe encore
                                cycle_check = """
                                SELECT status FROM trade_cycles WHERE id = %s
                                """
                                result = self.db.execute_query(cycle_check, (reservation['cycle_id'],), fetch_one=True)
                                
                                # Si le cycle n'existe pas ou est termin√©, lib√©rer la r√©servation
                                if not result or result['status'] in ['completed', 'canceled', 'failed']:
                                    # Lib√©rer les fonds
                                    self.release_funds(
                                        pocket_type=reservation['pocket_type'],
                                        amount=reservation['amount'],
                                        cycle_id=reservation['cycle_id'],
                                        asset=reservation['asset']
                                    )
                                    logger.info(f"üßπ R√©servation orpheline nettoy√©e: {res_id} (√¢ge: {age_hours:.1f}h)")
                                    cleaned_count += 1
                        except Exception as e:
                            logger.error(f"Erreur lors du nettoyage de la r√©servation {res_id}: {e}")
            
            if cleaned_count > 0:
                logger.info(f"‚úÖ {cleaned_count} r√©servations orphelines nettoy√©es")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du nettoyage des r√©servations orphelines: {str(e)}")
    
    def _ensure_pockets_exist(self) -> None:
        """
        S'assure que les poches existent dans la base de donn√©es.
        Cr√©e les poches si elles n'existent pas.
        """
        # V√©rifier les poches existantes
        query = "SELECT pocket_type FROM capital_pockets"
        result = self.db.execute_query(query, fetch_all=True)
        
        existing_pockets = set(row['pocket_type'] for row in result) if result else set()
        
        # Poches requises
        required_pockets = {'active', 'buffer', 'safety'}
        
        # D√©terminer les poches manquantes
        missing_pockets = required_pockets - existing_pockets
        
        if missing_pockets:
            logger.info(f"Cr√©ation des poches manquantes: {', '.join(missing_pockets)}")
            
            # Calculer la valeur totale du portefeuille (ou utiliser une valeur par d√©faut)
            total_value = self._get_total_portfolio_value() or 1000.0  # Valeur par d√©faut
            
            # Pr√©parer l'insertion
            values = []
            
            for pocket_type in missing_pockets:
                allocation = self.pocket_config.get(pocket_type, 0.0)
                current_value = total_value * allocation
                
                values.append((
                    pocket_type,
                    allocation * 100,  # Stocker en pourcentage
                    current_value,
                    0.0,  # Aucune valeur utilis√©e initialement
                    current_value,  # Disponible = courant
                    0  # Aucun cycle actif initialement
                ))
            
            # Ex√©cuter l'insertion par lots
            query = """
            INSERT INTO capital_pockets
            (pocket_type, allocation_percent, current_value, used_value, available_value, active_cycles)
            VALUES %s
            """
            self.db.execute_batch(query, values)
            
            logger.info(f"‚úÖ {len(missing_pockets)} poches cr√©√©es")
            
            # Invalider le cache
            SharedCache.clear('pockets')
    
    def _get_total_portfolio_value(self) -> Optional[float]:
        """
        Calcule la valeur totale du portefeuille.
        
        Returns:
            Valeur totale ou None en cas d'erreur
        """
        # Essayer d'utiliser le cache
        cached_value = SharedCache.get('total_portfolio_value', max_age=10)
        if cached_value is not None:
            return cached_value
            
        query = """
        WITH latest_balances AS (
            SELECT 
                asset,
                MAX(timestamp) as latest_timestamp
            FROM 
                portfolio_balances
            GROUP BY 
                asset
        )
        SELECT 
            SUM(pb.value_usdc) as total_value
        FROM 
            portfolio_balances pb
        JOIN 
            latest_balances lb ON pb.asset = lb.asset AND pb.timestamp = lb.latest_timestamp
        WHERE
            pb.value_usdc IS NOT NULL
        """
        
        result = self.db.execute_query(query, fetch_one=True)
        
        total_value = None
        if result and result['total_value'] is not None:
            total_value = float(result['total_value'])
            # Mettre en cache
            SharedCache.set('total_portfolio_value', total_value)
        
        return total_value
    
    def get_pockets(self) -> List[PocketSummary]:
        """
        R√©cup√®re l'√©tat actuel des poches.
        Utilise un cache pour am√©liorer les performances.
        
        Returns:
            Liste des poches de capital
        """
        # V√©rifier le cache
        cached_pockets = SharedCache.get('pockets', max_age=5)
        if cached_pockets:
            return cached_pockets
            
        query = """
        SELECT 
            pocket_type,
            asset,
            allocation_percent,
            current_value,
            used_value,
            available_value,
            active_cycles
        FROM 
            capital_pockets
        ORDER BY 
            asset,
            CASE pocket_type
                WHEN 'active' THEN 1
                WHEN 'buffer' THEN 2
                WHEN 'safety' THEN 3
                ELSE 4
            END
        """
        
        result = self.db.execute_query(query, fetch_all=True)
        
        if not result:
            return []
        
        # Convertir en objets PocketSummary avec recalcul des valeurs r√©elles
        pockets = []
        for row in result:
            pocket_type = row['pocket_type']
            asset = row['asset']
            current_value = float(row['current_value'])
            
            # Recalculer used_value depuis les transactions r√©elles
            real_used_value = self._calculate_real_used_value(pocket_type, asset)
            
            # Recalculer active_cycles depuis les cycles actifs avec r√©servations
            real_active_cycles = self._calculate_real_active_cycles(pocket_type, asset)
            
            # Recalculer available_value
            real_available_value = max(0, current_value - real_used_value)
            
            pocket = PocketSummary(
                pocket_type=pocket_type,
                asset=asset,
                allocation_percent=float(row['allocation_percent']),
                current_value=current_value,
                used_value=real_used_value,
                available_value=real_available_value,
                active_cycles=real_active_cycles
            )
            pockets.append(pocket)
        
        # Mettre en cache
        SharedCache.set('pockets', pockets)
        
        return pockets
    
    def _calculate_real_used_value(self, pocket_type: str, asset: str) -> float:
        """
        Calcule la vraie valeur utilis√©e depuis les transactions de r√©servation actives.
        Ne consid√®re que les cycles r√©ellement actifs en base de donn√©es.
        
        Args:
            pocket_type: Type de poche
            asset: Actif
            
        Returns:
            Montant r√©ellement r√©serv√© pour des cycles actifs
        """
        try:
            # R√©cup√©rer la somme des r√©servations actives SEULEMENT pour les cycles actifs
            query = """
            SELECT COALESCE(SUM(
                CASE WHEN pt.transaction_type = 'reserve' THEN pt.amount
                     WHEN pt.transaction_type = 'release' THEN -pt.amount
                     ELSE 0 END
            ), 0) AS net_reserved
            FROM pocket_transactions pt
            INNER JOIN trade_cycles tc ON pt.cycle_id = tc.id
            WHERE pt.pocket_type = %s AND pt.asset = %s
            AND tc.status NOT IN ('completed', 'canceled', 'failed')
            """
            result = self.db.execute_query(query, (pocket_type, asset), fetch_one=True)
            net_reserved = float(result['net_reserved']) if result else 0.0
            
            # S'assurer que la valeur n'est pas n√©gative
            return max(0, net_reserved)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du calcul de used_value pour {pocket_type}/{asset}: {str(e)}")
            return 0.0
    
    def _calculate_real_active_cycles(self, pocket_type: str, asset: str) -> int:
        """
        Calcule le nombre r√©el de cycles actifs ayant des r√©servations dans cette poche.
        Ne consid√®re que les cycles r√©ellement actifs en base de donn√©es.
        
        Args:
            pocket_type: Type de poche
            asset: Actif
            
        Returns:
            Nombre de cycles actifs avec r√©servations
        """
        try:
            # Compter simplement les cycles actifs dans cette poche
            query = """
            SELECT COUNT(*) AS active_cycles
            FROM trade_cycles
            WHERE status NOT IN ('completed', 'canceled', 'failed')
            AND pocket = %s
            """
            result = self.db.execute_query(query, (pocket_type,), fetch_one=True)
            return int(result['active_cycles']) if result else 0
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du calcul d'active_cycles pour {pocket_type}/{asset}: {str(e)}")
            return 0

    def check_pocket_synchronization(self) -> bool:
        """
        V√©rifie si les poches sont synchronis√©es avec les cycles **r√©ellement confirm√©s**.

        Returns:
            True si la synchronisation est correcte, False sinon
        """
        try:
            # R√©cup√©rer les poches
            pockets_data = self._make_request_with_retry(
                urljoin(self.portfolio_api_url, "/pockets")
            )

            if not pockets_data:
                logger.error("Impossible de r√©cup√©rer les donn√©es des poches")
                return False

            # R√©cup√©rer les cycles actifs
            trader_api_url = os.getenv("TRADER_API_URL", "http://trader:5002")
            active_cycles_data = self._make_request_with_retry(
                urljoin(trader_api_url, "/orders?status=active")
            )

            if not active_cycles_data:
                logger.error("Impossible de r√©cup√©rer les cycles actifs")
                return False

            # ‚úÖ Ne garder que les cycles confirm√©s (si le champ existe)
            confirmed_cycles = [c for c in active_cycles_data if c.get("confirmed") is True]

            active_cycle_count = len(confirmed_cycles)
            # Ne compter les cycles que pour l'asset USDC pour √©viter la duplication
            pocket_cycle_count = sum(p.get("active_cycles", 0) for p in pockets_data if p.get("asset") == "USDC")

            trade_used_value = sum(
                float(c.get("quantity", 0)) * float(c.get("entry_price", 0))
                for c in confirmed_cycles
            )

            pocket_used_value = sum(float(p.get("used_value", 0)) for p in pockets_data)

            cycles_synced = abs(active_cycle_count - pocket_cycle_count) <= 1
            amount_diff_percent = abs(trade_used_value - pocket_used_value) / trade_used_value * 100 if trade_used_value > 0 else 0
            amounts_synced = amount_diff_percent <= 5.0

            if not cycles_synced or not amounts_synced:
                logger.warning(
                    f"‚ö†Ô∏è D√©synchronisation d√©tect√©e: {active_cycle_count} cycles confirm√©s vs {pocket_cycle_count} dans les poches. "
                    f"Montant utilis√©: {trade_used_value:.2f} vs {pocket_used_value:.2f} (diff: {amount_diff_percent:.2f}%)"
                )

                reconcile_result = self._make_request_with_retry(
                    urljoin(self.portfolio_api_url, "/pockets/reconcile"),
                    method="POST"
                )

                if reconcile_result:
                    logger.info("‚úÖ R√©conciliation des poches demand√©e")
                    self.last_cache_update = 0
                    self._refresh_cache()
                    return False
                else:
                    logger.error("‚ùå √âchec de la demande de r√©conciliation")
                    return False

            logger.info("‚úÖ Poches correctement synchronis√©es (cycles confirm√©s seulement)")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification de synchronisation: {str(e)}")
            return False

        # --- Redis cache --------------------------------------------------
    def _publish_pockets_state(self) -> None:
        """
        Sauvegarde l'√©tat complet des poches dans Redis et notifie les abonn√©s.
        """
        pockets = self.get_pockets()                 # List[ PocketSummary ]
        redis   = RedisClient()

        snapshot_key = "roottrading:pockets:snapshot"
        channel      = "roottrading:pockets.update"

        # S√©rialiser les poches (dict) et stocker 30 s
        redis.set(snapshot_key,
                  json.dumps([p.dict() for p in pockets]),
                  expiration=30)

        # Notifier les consommateurs (Coordinator) qu‚Äôun nouvel √©tat est dispo
        redis.publish(channel, json.dumps({"ts": int(time.time())}))
        logger.debug("üì° Snapshot poches publi√© dans Redis")
        
        # Publier sur Kafka pour une meilleure int√©gration
        try:
            from shared.src.kafka_client import KafkaClientPool
            kafka = KafkaClientPool.get_instance()
            
            event = {
                "type": "pocket.updated",
                "timestamp": int(time.time()),
                "pockets": [p.dict() for p in pockets]
            }
            
            kafka.produce("portfolio.pockets", json.dumps(event))
            logger.debug("üì® √âv√©nement pocket.updated publi√© sur Kafka")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de publier sur Kafka: {e}")

    def update_pockets_allocation(self, total_value: float) -> bool:
        """
        Met √† jour la r√©partition des poches en synchronisant avec les soldes r√©els du portfolio.
        Version multi-assets qui synchronise chaque actif individuellement.
        
        Args:
            total_value: Valeur totale du portefeuille en USDC
            
        Returns:
            True si la mise √† jour a r√©ussi, False sinon
        """
        try:
            logger.info(f"üîÑ Synchronisation des poches avec les soldes du portfolio (valeur totale: {total_value:.2f} USDC)")
            
            # Mettre en cache la valeur totale
            SharedCache.set('total_portfolio_value', total_value)
            
            # R√©cup√©rer les derniers soldes depuis portfolio_balances
            query = """
            SELECT asset, free, locked, total
            FROM portfolio_balances
            WHERE timestamp = (SELECT MAX(timestamp) FROM portfolio_balances)
            """
            
            balances = self.db.execute_query(query, fetch_all=True)
            
            if not balances:
                logger.error("‚ùå Aucun solde trouv√© dans portfolio_balances")
                return False
            
            # Synchroniser chaque actif
            for balance in balances:
                asset = balance['asset']
                total_balance = float(balance['total'])  # Utiliser le total (free + locked)
                
                # R√©partir selon les pourcentages configur√©s
                # 80% active, 10% buffer, 10% safety
                allocations = {
                    'active': total_balance * 0.80,
                    'buffer': total_balance * 0.10,
                    'safety': total_balance * 0.10
                }
                
                # Mettre √† jour chaque poche pour cet actif
                for pocket_type, allocated_amount in allocations.items():
                    update_query = """
                    UPDATE capital_pockets
                    SET 
                        current_value = %s,
                        available_value = %s - used_value,
                        updated_at = NOW()
                    WHERE 
                        pocket_type = %s 
                        AND asset = %s
                    """
                    
                    self.db.execute_query(
                        update_query, 
                        (allocated_amount, allocated_amount, pocket_type, asset),
                        commit=True
                    )
                
                logger.info(f"‚úÖ Poches synchronis√©es pour {asset}: {total_balance:.8f} r√©parti (80/10/10)")
            
            # Invalider le cache
            SharedCache.clear('pockets')
            
            # Publier le nouvel √©tat dans Redis
            self._publish_pockets_state()
            
            logger.info("‚úÖ Synchronisation des poches termin√©e avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la synchronisation des poches: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def reserve_funds(self, pocket_type: str, amount: float, cycle_id: str, asset: str = "USDC") -> bool:
        """
        R√©serve des fonds dans une poche pour un cycle de trading.
        Utilise Redis WATCH/MULTI/EXEC pour garantir l'atomicit√©.
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            amount: Montant √† r√©server
            cycle_id: ID du cycle de trading
            asset: Actif de la poche (USDC, BTC, ETH, etc.)
            
        Returns:
            True si la r√©servation a r√©ussi, False sinon
            
        Raises:
            InsufficientFundsError: Si la poche n'a pas assez de fonds
            PocketNotFoundError: Si la poche n'existe pas
        """
        if amount <= 0:
            logger.warning(f"‚ö†Ô∏è Montant invalide: {amount}")
            return False
        
        # G√©n√©rer un ID unique pour cette r√©servation
        import uuid
        reservation_id = f"res_{uuid.uuid4().hex[:16]}"
        
        # Utiliser Redis pour g√©rer la r√©servation de mani√®re atomique
        redis = RedisClient()
        redis_key = f"pocket:{pocket_type}:{asset}:reservations"
        
        # Nombre maximal de tentatives en cas de conflit
        max_retries = 5
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # Verrouiller la ligne pour √©viter les conditions de course
                query = """
                SELECT 
                    pocket_type,
                    asset,
                    available_value,
                    active_cycles
                FROM 
                    capital_pockets
                WHERE 
                    pocket_type = %s AND asset = %s
                FOR UPDATE
                """
                
                # D√©marrer une transaction explicite
                self.db.execute_query("BEGIN")
                
                result = self.db.execute_query(query, (pocket_type, asset), fetch_one=True, commit=False)
                
                if not result:
                    # Annuler la transaction
                    self.db.execute_query("ROLLBACK")
                    raise PocketNotFoundError(f"Poche non trouv√©e: {pocket_type}")
                
                available_value = float(result['available_value'])
                active_cycles = int(result['active_cycles'])
                
                if available_value < amount:
                    # Annuler la transaction
                    self.db.execute_query("ROLLBACK")
                    raise InsufficientFundsError(
                        f"Fonds insuffisants dans la poche {pocket_type}: {available_value} < {amount}"
                    )
                
                # Enregistrer la r√©servation dans Redis avec TTL de 24h
                reservation_data = {
                    "reservation_id": reservation_id,
                    "cycle_id": cycle_id,
                    "amount": amount,
                    "timestamp": int(time.time()),
                    "pocket_type": pocket_type,
                    "asset": asset
                }
                
                # Utiliser une transaction Redis pour garantir l'atomicit√©
                pipe = redis.pipeline()
                pipe.hset(redis_key, reservation_id, json.dumps(reservation_data))
                pipe.expire(redis_key, 86400)  # TTL de 24h
                pipe.execute()
                
                # Mettre √† jour la poche
                update_query = """
                UPDATE capital_pockets
                SET 
                    used_value = used_value + %s,
                    available_value = available_value - %s,
                    active_cycles = active_cycles + 1,
                    updated_at = NOW()
                WHERE 
                    pocket_type = %s AND asset = %s
                """
                
                update_result = self.db.execute_query(update_query, (amount, amount, pocket_type, asset), commit=False)
                
                if update_result is None:
                    # Annuler la transaction et nettoyer Redis
                    self.db.execute_query("ROLLBACK")
                    redis.hdel(redis_key, reservation_id)
                    logger.error(f"‚ùå √âchec de la mise √† jour de la poche {pocket_type}")
                    return False
                
                # Enregistrer l'op√©ration dans la table des transactions de poches (journal)
                # IMPORTANT: Essayer le journal AVANT le commit de la transaction principale
                journal_success = False
                try:
                    journal_query = """
                    INSERT INTO pocket_transactions
                    (pocket_type, asset, transaction_type, amount, cycle_id, reservation_id, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, NOW())
                    ON CONFLICT DO NOTHING
                    """
                    self.db.execute_query(
                        journal_query, 
                        (pocket_type, asset, 'reserve', amount, cycle_id, reservation_id),
                        commit=False
                    )
                    journal_success = True
                    logger.debug(f"Journal avec reservation_id r√©ussi pour {cycle_id}")
                except Exception as e:
                    # Fallback sans reservation_id si la colonne n'existe pas
                    logger.debug(f"Fallback sans reservation_id: {str(e)}")
                    try:
                        journal_query_fallback = """
                        INSERT INTO pocket_transactions
                        (pocket_type, asset, transaction_type, amount, cycle_id, created_at)
                        VALUES (%s, %s, %s, %s, %s, NOW())
                        ON CONFLICT DO NOTHING
                        """
                        self.db.execute_query(
                            journal_query_fallback, 
                            (pocket_type, asset, 'reserve', amount, cycle_id),
                            commit=False
                        )
                        journal_success = True
                        logger.debug(f"Journal fallback r√©ussi pour {cycle_id}")
                    except Exception as e2:
                        logger.warning(f"Impossible d'enregistrer le journal: {str(e2)}")
                        # Continuer quand m√™me la transaction principale
                
                # Valider la transaction (pocket + journal)
                self.db.execute_query("COMMIT")
                
                # Invalider le cache
                SharedCache.clear('pockets')
                
                # Publier l'√©v√©nement de r√©servation dans Redis
                self._publish_pockets_state()
                
                logger.info(f"‚úÖ {amount:.8f} {asset} r√©serv√©s dans la poche {pocket_type} pour le cycle {cycle_id} (ID: {reservation_id})")
                
                return True
                
            except PocketNotFoundError as e:
                logger.warning(f"‚ö†Ô∏è {str(e)}")
                return False
            except InsufficientFundsError as e:
                logger.warning(f"‚ö†Ô∏è {str(e)}")
                return False
            except Exception as e:
                # Annuler la transaction en cas d'erreur
                try:
                    self.db.execute_query("ROLLBACK")
                except:
                    pass
                
                logger.error(f"‚ùå Erreur lors de la r√©servation des fonds: {str(e)}")
                
                # Si c'est une erreur de concurrence, r√©essayer
                if "could not serialize access" in str(e).lower():
                    retry_count += 1
                    if retry_count < max_retries:
                        logger.info(f"üîÑ Tentative {retry_count}/{max_retries} apr√®s conflit de concurrence")
                        time.sleep(0.1 * retry_count)  # Backoff exponentiel
                        continue
                
                return False
        
        # Si on arrive ici, toutes les tentatives ont √©chou√©
        logger.error(f"‚ùå Impossible de r√©server les fonds apr√®s {max_retries} tentatives")
        return False
    
    def get_reserved_amount(self, pocket_type: str, cycle_id: str, asset: str = "USDC") -> float:
        """
        R√©cup√®re le montant restant √† lib√©rer pour un cycle donn√©.
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            cycle_id: ID du cycle de trading
            asset: Actif de la poche (USDC, BTC, ETH, etc.)
            
        Returns:
            Montant restant √† lib√©rer (0 si enti√®rement lib√©r√©)
        """
        try:
            # V√©rifier les montants r√©serv√©s vs lib√©r√©s pour ce cycle
            reserved_query = """
            SELECT COALESCE(SUM(amount), 0) AS reserved
            FROM pocket_transactions
            WHERE transaction_type = 'reserve' AND cycle_id = %s AND pocket_type = %s AND asset = %s
            """
            reserved_result = self.db.execute_query(reserved_query, (cycle_id, pocket_type, asset), fetch_one=True)
            
            released_query = """
            SELECT COALESCE(SUM(amount), 0) AS released
            FROM pocket_transactions
            WHERE transaction_type = 'release' AND cycle_id = %s AND pocket_type = %s AND asset = %s
            """
            released_result = self.db.execute_query(released_query, (cycle_id, pocket_type, asset), fetch_one=True)
            
            reserved_amount = float(reserved_result['reserved']) if reserved_result else 0.0
            released_amount = float(released_result['released']) if released_result else 0.0
            
            remaining = max(0, reserved_amount - released_amount)
            logger.debug(f"üîç Cycle {cycle_id}: r√©serv√©={reserved_amount}, lib√©r√©={released_amount}, restant={remaining}")
            
            return remaining
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification des montants r√©serv√©s: {str(e)}")
            return 0.0

    def get_reserved_amount_with_lock(self, pocket_type: str, cycle_id: str, asset: str = "USDC") -> float:
        """
        R√©cup√®re le montant restant √† lib√©rer pour un cycle donn√© avec verrouillage pour √©viter les race conditions.
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            cycle_id: ID du cycle de trading
            asset: Actif de la poche (USDC, BTC, ETH, etc.)
            
        Returns:
            Montant restant √† lib√©rer (0 si enti√®rement lib√©r√©)
        """
        try:
            # D√©marrer une transaction explicite pour le verrouillage
            self.db.execute_query("BEGIN")
            
            # CORRECTION: Verrouiller d'abord les lignes concern√©es, puis faire l'agr√©gation
            # Verrouiller toutes les transactions pour ce cycle
            lock_query = """
            SELECT id FROM pocket_transactions
            WHERE cycle_id = %s AND pocket_type = %s AND asset = %s
            FOR UPDATE
            """
            self.db.execute_query(lock_query, (cycle_id, pocket_type, asset), commit=False)
            
            # Maintenant calculer les montants (les lignes sont verrouill√©es)
            reserved_query = """
            SELECT COALESCE(SUM(amount), 0) AS reserved
            FROM pocket_transactions
            WHERE transaction_type = 'reserve' AND cycle_id = %s AND pocket_type = %s AND asset = %s
            """
            reserved_result = self.db.execute_query(reserved_query, (cycle_id, pocket_type, asset), fetch_one=True, commit=False)
            
            released_query = """
            SELECT COALESCE(SUM(amount), 0) AS released
            FROM pocket_transactions
            WHERE transaction_type = 'release' AND cycle_id = %s AND pocket_type = %s AND asset = %s
            """
            released_result = self.db.execute_query(released_query, (cycle_id, pocket_type, asset), fetch_one=True, commit=False)
            
            reserved_amount = float(reserved_result['reserved']) if reserved_result else 0.0
            released_amount = float(released_result['released']) if released_result else 0.0
            
            remaining = max(0, reserved_amount - released_amount)
            
            # Commit pour lib√©rer les verrous
            self.db.execute_query("COMMIT")
            
            logger.debug(f"üîí Cycle {cycle_id} (avec verrou): r√©serv√©={reserved_amount}, lib√©r√©={released_amount}, restant={remaining}")
            
            return remaining
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification verrouill√©e des montants r√©serv√©s: {str(e)}")
            self.db.execute_query("ROLLBACK")
            return 0.0

    def deposit_funds(self, pocket_type: str, amount: float, source: str, asset: str = "USDC") -> bool:
        """
        D√©pose des fonds dans une poche (ex: profits).
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            amount: Montant √† d√©poser
            source: Source du d√©p√¥t
            asset: Actif de la poche (USDC, BTC, ETH, etc.)
            
        Returns:
            True si le d√©p√¥t a r√©ussi, False sinon
        """
        if amount <= 0:
            logger.warning(f"‚ö†Ô∏è Montant invalide: {amount}")
            return False
        
        try:
            # D√©marrer une transaction
            self.db.execute_query("BEGIN")
            
            # Enregistrer la transaction de d√©p√¥t
            transaction_query = """
            INSERT INTO pocket_transactions (
                id, pocket_type, asset, transaction_type, amount, 
                reference_id, description, created_at
            ) VALUES (
                gen_random_uuid(), %s, %s, 'deposit', %s, 
                %s, %s, NOW()
            )
            """
            
            description = f"D√©p√¥t de {source}"
            self.db.execute_query(
                transaction_query, 
                (pocket_type, asset, amount, source, description), 
                commit=False
            )
            
            # Mettre √† jour le solde de la poche
            update_query = """
            UPDATE capital_pockets 
            SET current_value = current_value + %s,
                available_value = available_value + %s,
                updated_at = NOW()
            WHERE pocket_type = %s AND asset = %s
            """
            
            self.db.execute_query(update_query, (amount, amount, pocket_type, asset), commit=False)
            
            # Valider la transaction
            self.db.execute_query("COMMIT")
            
            logger.info(f"üí∞ {amount:.2f} {asset} d√©pos√©s dans la poche {pocket_type} (source: {source})")
            
            # Publier l'√©tat des poches
            self._publish_pockets_state()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©p√¥t: {str(e)}")
            self.db.execute_query("ROLLBACK")
            return False

    def release_funds(self, pocket_type: str, amount: float, cycle_id: str, asset: str = "USDC") -> bool:
        """
        Lib√®re des fonds r√©serv√©s dans une poche.
        Utilise Redis pour retrouver la r√©servation originale.
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            amount: Montant √† lib√©rer
            cycle_id: ID du cycle de trading
            asset: Actif de la poche (USDC, BTC, ETH, etc.)
            
        Returns:
            True si la lib√©ration a r√©ussi, False sinon
        """
        if amount <= 0:
            logger.warning(f"‚ö†Ô∏è Montant invalide: {amount}")
            return False
        
        try:
            # D√©marrer une transaction explicite
            self.db.execute_query("BEGIN")
            
            # √âTAPE 1: V√©rifier dans Redis si une r√©servation existe pour ce cycle
            redis = RedisClient()
            redis_key = f"pocket:{pocket_type}:{asset}:reservations"
            
            # Rechercher la r√©servation dans Redis
            reservation_found = None
            all_reservations = redis.hgetall(redis_key)
            
            for res_id, res_data in all_reservations.items():
                try:
                    # Redis peut retourner soit une cha√Æne JSON, soit un dict d√©j√† d√©cod√©
                    if isinstance(res_data, dict):
                        reservation = res_data
                    else:
                        reservation = json.loads(res_data)
                    if reservation.get('cycle_id') == cycle_id:
                        reservation_found = reservation
                        break
                except:
                    continue
            
            # Si pas trouv√© dans Redis, v√©rifier dans la DB (fallback sans reservation_id)
            # V√©rifier d'abord s'il y a des r√©servations pour ce cycle_id (avec ou sans reservation_id)
            journal_check = """
            SELECT SUM(amount) AS reserved
            FROM pocket_transactions
            WHERE transaction_type = 'reserve' AND cycle_id = %s AND pocket_type = %s AND asset = %s
            """
            reserve_result = self.db.execute_query(journal_check, (cycle_id, pocket_type, asset), fetch_one=True, commit=False)
            
            reserved_amount = 0.0
            reservation_id = None
            
            if reservation_found:
                reserved_amount = reservation_found['amount']
                reservation_id = reservation_found['reservation_id']
                logger.debug(f"‚úÖ R√©servation trouv√©e dans Redis: {reservation_id}")
            elif reserve_result and reserve_result['reserved']:
                reserved_amount = float(reserve_result['reserved'])
                reservation_id = f"legacy_{cycle_id}"  # ID fallback pour les anciennes r√©servations
                logger.debug(f"‚úÖ R√©servation trouv√©e dans DB (legacy): {cycle_id}")
            
            if reserved_amount <= 0:
                logger.warning(f"‚õî Impossible de lib√©rer le cycle {cycle_id}, aucune r√©servation d√©tect√©e")
                self.db.execute_query("ROLLBACK")
                return False
            
            # V√©rifier les montants d√©j√† lib√©r√©s pour ce cycle
            release_check = """
            SELECT COALESCE(SUM(amount), 0) AS released
            FROM pocket_transactions
            WHERE transaction_type = 'release' AND cycle_id = %s
            """
            release_result = self.db.execute_query(release_check, (cycle_id,), fetch_one=True, commit=False)
            
            already_released = 0.0
            if release_result and release_result['released']:
                already_released = float(release_result['released'])
            
            remaining_to_release = reserved_amount - already_released
            
            if amount > remaining_to_release:
                logger.warning(f"‚ö†Ô∏è Tentative de lib√©rer {amount}, mais seulement {remaining_to_release} reste √† lib√©rer pour le cycle {cycle_id}")
                if remaining_to_release <= 0:
                    logger.warning(f"‚õî Cycle {cycle_id} d√©j√† enti√®rement lib√©r√©")
                    self.db.execute_query("ROLLBACK")
                    return False
                # Ajuster le montant
                amount = remaining_to_release
            
            # √âTAPE 2: Verrouiller la ligne pour √©viter les conditions de course
            query = """
            SELECT 
                pocket_type,
                asset,
                used_value,
                active_cycles
            FROM 
                capital_pockets
            WHERE 
                pocket_type = %s AND asset = %s
            FOR UPDATE
            """
            
            result = self.db.execute_query(query, (pocket_type, asset), fetch_one=True, commit=False)
            
            if not result:
                # Annuler la transaction
                self.db.execute_query("ROLLBACK")
                raise PocketNotFoundError(f"Poche non trouv√©e: {pocket_type}")
            
            used_value = float(result['used_value'])
            active_cycles = int(result['active_cycles'])
            
            # V√©rifier si le montant √† lib√©rer n'est pas trop grand par rapport √† la poche
            if amount > used_value:
                logger.warning(f"‚ö†Ô∏è Tentative de lib√©rer plus que ce qui est utilis√© dans la poche: {amount} > {used_value}")
                # Limiter le montant √† la valeur utilis√©e
                amount = min(amount, used_value)
            
            # Mettre √† jour la poche
            query = """
            UPDATE capital_pockets
            SET 
                used_value = GREATEST(0, used_value - %s),
                available_value = available_value + %s,
                active_cycles = GREATEST(0, active_cycles - 1),
                updated_at = NOW()
            WHERE 
                pocket_type = %s AND asset = %s
            """
            
            result = self.db.execute_query(query, (amount, amount, pocket_type, asset), commit=False)
            
            if result is None:
                # Annuler la transaction
                self.db.execute_query("ROLLBACK")
                logger.error(f"‚ùå √âchec de la lib√©ration des fonds de la poche {pocket_type}")
                return False
            
            # Enregistrer l'op√©ration dans la table des transactions de poches (journal)
            # Essayer d'abord avec reservation_id, puis fallback sans
            try:
                journal_query = """
                INSERT INTO pocket_transactions
                (pocket_type, asset, transaction_type, amount, cycle_id, reservation_id, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, NOW())
                ON CONFLICT DO NOTHING
                """
                self.db.execute_query(
                    journal_query, 
                    (pocket_type, asset, 'release', amount, cycle_id, reservation_id),
                    commit=False
                )
            except Exception as e:
                # Fallback sans reservation_id si la colonne n'existe pas
                logger.debug(f"Fallback sans reservation_id: {str(e)}")
                journal_query_fallback = """
                INSERT INTO pocket_transactions
                (pocket_type, asset, transaction_type, amount, cycle_id, created_at)
                VALUES (%s, %s, %s, %s, %s, NOW())
                ON CONFLICT DO NOTHING
                """
                try:
                    self.db.execute_query(
                        journal_query_fallback, 
                        (pocket_type, asset, 'release', amount, cycle_id),
                        commit=False
                    )
                except Exception as e2:
                    logger.debug(f"Note: Table pocket_transactions peut ne pas exister: {str(e2)}")
            
            # Valider la transaction
            self.db.execute_query("COMMIT")
            
            # Supprimer la r√©servation de Redis si elle existe
            if reservation_found and reservation_id:
                redis.hdel(redis_key, reservation_id)
                logger.debug(f"üóëÔ∏è R√©servation {reservation_id} supprim√©e de Redis")
            
            # Invalider le cache
            SharedCache.clear('pockets')
            
            # Publier l'√©v√©nement de lib√©ration dans Redis
            self._publish_pockets_state()
            
            logger.info(f"‚úÖ {amount:.8f} {asset} lib√©r√©s dans la poche {pocket_type} pour le cycle {cycle_id}")
            
            return True
            
        except PocketNotFoundError as e:
            logger.warning(f"‚ö†Ô∏è {str(e)}")
            return False
        except Exception as e:
            # Annuler la transaction en cas d'erreur
            try:
                self.db.execute_query("ROLLBACK")
            except:
                pass
                
            logger.error(f"‚ùå Erreur lors de la lib√©ration des fonds: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def get_available_funds(self, pocket_type: str) -> Optional[float]:
        """
        R√©cup√®re les fonds disponibles dans une poche.
        
        Args:
            pocket_type: Type de poche ('active', 'buffer', 'safety')
            
        Returns:
            Montant disponible ou None en cas d'erreur
        """
        # Essayer d'utiliser le cache
        cached_pockets = SharedCache.get('pockets', max_age=5)
        if cached_pockets:
            for pocket in cached_pockets:
                if pocket.pocket_type == pocket_type:
                    return pocket.available_value
        
        query = """
        SELECT available_value
        FROM capital_pockets
        WHERE pocket_type = %s
        """
        
        result = self.db.execute_query(query, (pocket_type,), fetch_one=True)
        
        if not result:
            logger.warning(f"‚ö†Ô∏è Poche non trouv√©e: {pocket_type}")
            return None
        
        return float(result['available_value'])
    
    def recalculate_active_cycles(self) -> bool:
        """
        Recalcule le nombre de cycles actifs pour chaque poche.
        Utile pour la r√©conciliation des donn√©es.
        
        Returns:
            True si la mise √† jour a r√©ussi, False sinon
        """
        try:
            # Mise √† jour des cycles actifs pour les poches ayant des cycles
            # Note: On met le nombre de cycles uniquement sur l'asset USDC pour √©viter la duplication
            query = """
            WITH pocket_cycles AS (
                SELECT 
                    pocket,
                    COUNT(*) as cycle_count
                FROM 
                    trade_cycles
                WHERE 
                    status NOT IN ('completed', 'canceled', 'failed')
                    AND pocket IS NOT NULL
                GROUP BY 
                    pocket
            )
            UPDATE capital_pockets cp
            SET 
                active_cycles = CASE 
                    WHEN cp.asset = 'USDC' THEN COALESCE(pc.cycle_count, 0)
                    ELSE 0
                END,
                updated_at = NOW()
            FROM 
                pocket_cycles pc
            WHERE 
                cp.pocket_type = pc.pocket
            """
            
            result = self.db.execute_query(query, commit=True)
            
            # Pour les poches sans cycles actifs
            zero_query = """
            UPDATE capital_pockets
            SET 
                active_cycles = 0,
                updated_at = NOW()
            WHERE 
                pocket_type NOT IN (
                    SELECT DISTINCT pocket
                    FROM trade_cycles
                    WHERE status NOT IN ('completed', 'canceled', 'failed')
                    AND pocket IS NOT NULL
                )
            """
            
            self.db.execute_query(zero_query, commit=True)
            
            # Invalider le cache
            SharedCache.clear('pockets')
            
            logger.info("‚úÖ Nombre de cycles actifs recalcul√© pour toutes les poches")
            
            return result is not None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du recalcul des cycles actifs: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def sync_with_trades(self) -> bool:
        """
        Synchronise les poches avec les trades actifs **r√©ellement ex√©cut√©s** (ordres FILLED).
        Recalcule les valeurs utilis√©es et disponibles pour chaque actif.

        Returns:
            True si la synchronisation a r√©ussi, False sinon
        """
        try:
            # R√©cup√©rer les valeurs utilis√©es par poche ET par actif
            query = """
            WITH trade_values AS (
                SELECT 
                    tc.pocket,
                    tc.symbol,
                    CASE 
                        WHEN tc.symbol LIKE '%USDC' THEN 'USDC'
                        WHEN tc.symbol LIKE '%BTC' THEN 'BTC'
                        WHEN tc.symbol LIKE '%ETH' THEN 'ETH'
                        WHEN tc.symbol LIKE '%BNB' THEN 'BNB'
                        ELSE 'USDC'
                    END as asset,
                    SUM(te.price * te.quantity) as used_value
                FROM 
                    trade_cycles tc
                JOIN 
                    trade_executions te ON tc.entry_order_id = te.order_id
                WHERE 
                    tc.status NOT IN ('completed', 'canceled', 'failed')
                    AND te.status = 'FILLED'
                    AND tc.pocket IS NOT NULL
                GROUP BY 
                    tc.pocket, tc.symbol
            )
            SELECT 
                cp.pocket_type,
                cp.asset,
                cp.current_value,
                COALESCE(SUM(tv.used_value), 0) as calculated_used_value
            FROM 
                capital_pockets cp
            LEFT JOIN 
                trade_values tv ON cp.pocket_type = tv.pocket AND cp.asset = tv.asset
            GROUP BY
                cp.pocket_type, cp.asset, cp.current_value
            """

            result = self.db.execute_query(query, fetch_all=True)

            if not result:
                logger.warning("‚ö†Ô∏è Aucune poche trouv√©e pour la synchronisation")
                return False

            self.db.execute_query("BEGIN")
            success = True

            for row in result:
                pocket_type = row['pocket_type']
                asset = row['asset']
                current_value = float(row['current_value'])
                used_value = float(row['calculated_used_value'])
                available_value = max(0, current_value - used_value)

                update_query = """
                UPDATE capital_pockets
                SET 
                    used_value = %s,
                    available_value = %s,
                    updated_at = NOW()
                WHERE 
                    pocket_type = %s
                    AND asset = %s
                """

                update_result = self.db.execute_query(
                    update_query, 
                    (used_value, available_value, pocket_type, asset), 
                    commit=False
                )

                if update_result is None:
                    logger.error(f"‚ùå √âchec de la mise √† jour de la poche {pocket_type} pour {asset}")
                    success = False
                    break

            if success:
                self.db.execute_query("COMMIT")
                self.recalculate_active_cycles()
                SharedCache.clear('pockets')
                logger.info("‚úÖ Poches synchronis√©es avec les trades actifs ex√©cut√©s")
            else:
                self.db.execute_query("ROLLBACK")
                logger.warning("‚ö†Ô∏è Synchronisation annul√©e en raison d'erreurs")

            return success

        except Exception as e:
            try:
                self.db.execute_query("ROLLBACK")
            except:
                pass
            logger.error(f"‚ùå Erreur lors de la synchronisation avec les trades: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False

    
    def close(self) -> None:
        """
        Ferme la connexion √† la base de donn√©es.
        """
        if self.db:
            self.db.close()