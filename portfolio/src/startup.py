import asyncio
import logging

from portfolio.src.sync import start_sync_tasks
from portfolio.src.redis_subscriber import start_redis_subscriptions
from portfolio.src.models import DBManager, SharedCache
from portfolio.src.binance_account_manager import BinanceAccountManager, BinanceApiError
from portfolio.src.models import PortfolioModel
from shared.src.config import BINANCE_API_KEY, BINANCE_SECRET_KEY

logger = logging.getLogger(__name__)

async def on_startup():
    """T√¢ches de d√©marrage"""
    logger.info("üöÄ Initialisation du Portfolio...")

    await initial_sync_binance()

    logger.info("‚ñ∂Ô∏è D√©marrage des t√¢ches de synchronisation continue")
    start_sync_tasks()

    logger.info("‚ñ∂Ô∏è Abonnement aux canaux Redis")
    start_redis_subscriptions()

async def initial_sync_binance():
    """Force une synchronisation avec Binance √† l'initialisation"""
    try:
        if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
            logger.warning("Cl√©s API Binance manquantes.")
            return

        logger.info("‚è≥ Synchronisation initiale des balances Binance...")
        account_manager = BinanceAccountManager(BINANCE_API_KEY, BINANCE_SECRET_KEY)
        balances = account_manager.calculate_asset_values()

        if not balances:
            logger.warning("Aucune balance re√ßue depuis Binance.")
            return

        db = DBManager()
        portfolio = PortfolioModel(db)
        success = portfolio.update_balances(balances)

        if success:
            logger.info(f"‚úÖ {len(balances)} balances sauvegard√©es avec succ√®s")
        else:
            logger.error("‚ùå update_balances() a √©chou√©")

        portfolio.close()
        db.close()

        SharedCache.clear('latest_balances')
        SharedCache.clear('portfolio_summary')
        logger.info("‚ôªÔ∏è Cache invalid√© apr√®s synchronisation")
    except BinanceApiError as e:
        logger.error(f"‚ùå Erreur API Binance: {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå Erreur de synchronisation initiale Binance: {e}")
