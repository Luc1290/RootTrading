networks:
  roottrading-net:
    driver: bridge
volumes:
  redis-data: null
  kafka-data: null
  zookeeper-data: null
  db-data: null
services:
  redis:
    image: redis:6-alpine
    container_name: roottrading-redis-1
    command: redis-server --appendonly yes
    ports:
    - 6379:6379
    volumes:
    - redis-data:/data
    restart: 'no'
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
    - roottrading-net
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: roottrading-zookeeper-1
    volumes:
    - zookeeper-data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # CORRECTION: Nettoyage automatique des sessions expirées
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 1
      # Réduction timeout pour éviter les sessions fantômes
      ZOOKEEPER_MAX_SESSION_TIMEOUT: 30000
      ZOOKEEPER_MIN_SESSION_TIMEOUT: 4000
    restart: 'no'
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
    - roottrading-net
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: roottrading-kafka-1
    ports:
    - 9092:9092
    entrypoint: |
      sh -c "
        echo 'Vérification cohérence cluster Kafka/ZooKeeper...'
        
        # Attendre que ZooKeeper soit vraiment prêt
        until echo srvr | nc zookeeper 2181 | grep -q 'Mode: standalone'; do
          echo 'Attente ZooKeeper...'
          sleep 2
        done
        
        # Récupérer le cluster ID de ZooKeeper
        ZK_CLUSTER_ID=$$(echo 'get /cluster/id' | /usr/bin/kafka-console-consumer --bootstrap-server zookeeper:2181 --topic __consumer_offsets --from-beginning --timeout-ms 1000 2>/dev/null | head -1 || echo '')
        
        META_FILE='/var/lib/kafka/data/meta.properties'
        
        # Si fichier meta existe, vérifier cohérence
        if [ -f \"$$META_FILE\" ]; then
          KAFKA_CLUSTER_ID=$$(grep 'cluster.id=' \"$$META_FILE\" | cut -d'=' -f2 2>/dev/null || echo '')
          
          if [ -n \"$$ZK_CLUSTER_ID\" ] && [ -n \"$$KAFKA_CLUSTER_ID\" ] && [ \"$$ZK_CLUSTER_ID\" != \"$$KAFKA_CLUSTER_ID\" ]; then
            echo \"CONFLIT DÉTECTÉ: ZK_ID=$$ZK_CLUSTER_ID vs KAFKA_ID=$$KAFKA_CLUSTER_ID\"
            echo 'Suppression meta.properties pour régénération propre...'
            rm -f \"$$META_FILE\"
            # Nettoyer aussi les logs de transaction qui peuvent être corrompus
            rm -rf /var/lib/kafka/data/__consumer_offsets-* 2>/dev/null || true
            rm -rf /var/lib/kafka/data/__transaction_state-* 2>/dev/null || true
          else
            echo 'Cluster IDs cohérents ou non disponibles - démarrage normal'
          fi
        fi
        
        echo 'Démarrage Kafka...'
        exec /etc/confluent/docker/run
      "
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID:-1}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # CORRECTION: Configuration pour éviter les conflicts Zookeeper
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 18000  # 18s au lieu de 30s par défaut
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 12000  # 12s
      # Gestion propre des shutdowns
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: true
      KAFKA_CONTROLLED_SHUTDOWN_MAX_RETRIES: 3
      KAFKA_CONTROLLED_SHUTDOWN_RETRY_BACKOFF_MS: 5000
      # Nettoyage automatique
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_HOURS: 24
      # Auto-nettoyage au démarrage
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
    - kafka-data:/var/lib/kafka/data
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z kafka 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
    - roottrading-net
  db:
    image: timescale/timescaledb:latest-pg14
    container_name: roottrading-db-1
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
      POSTGRES_DB: ${PGDATABASE:-trading}
      PGDATA: /var/lib/postgresql/data/pgdata
      TIMESCALEDB_TELEMETRY: false
    command: >
      postgres -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
    volumes:
    - db-data:/var/lib/postgresql/data
    - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
    - 5432:5432
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
    - roottrading-net
  dispatcher:
    container_name: roottrading-dispatcher-1
    build:
      context: .
      dockerfile: dispatcher/Dockerfile
    ports:
    - 5004:5004
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    env_file: .env
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5004/health').read()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  market_analyzer:
    container_name: roottrading-market-analyzer-1
    build:
      context: .
      dockerfile: market_analyzer/Dockerfile
    ports:
    - 5020:5020
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    env_file: .env
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 2G
        reservations:
          cpus: '1.5'
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5020/health').read()
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
    - roottrading-net
  gateway:
    container_name: roottrading-gateway-1
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
    - 5010:5010
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    env_file: .env
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5010/health').read()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  analyzer:
    container_name: roottrading-analyzer-1
    build:
      context: .
      dockerfile: analyzer/Dockerfile
    ports:
    - 5012:5012
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    env_file: .env
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5012/health').read()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  signal_aggregator:
    container_name: roottrading-signal-aggregator-1
    build:
      context: .
      dockerfile: signal_aggregator/Dockerfile
    ports:
    - 5013:5013
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    env_file: .env
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5013/health').read()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  trader:
    container_name: roottrading-trader-1
    build:
      context: .
      dockerfile: trader/Dockerfile
    ports:
    - 5002:5002
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    - WAIT_FOR=dispatcher:5004,analyzer:5012
    env_file: .env
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import socket; s = socket.socket(); s.connect(('localhost', 5002)); s.close()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  portfolio:
    container_name: roottrading-portfolio-1
    build:
      context: .
      dockerfile: portfolio/Dockerfile
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    env_file: .env
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import socket; s = socket.socket(); s.connect(('localhost', 8000)); s.close()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
    - 8000:8000
    networks:
    - roottrading-net
  coordinator:
    container_name: roottrading-coordinator-1
    build:
      context: .
      dockerfile: coordinator/Dockerfile
    ports:
    - 5003:5003
    environment:
    - WAIT_FOR_REDIS=true
    - WAIT_FOR_KAFKA=true
    - WAIT_FOR_DB=true
    - WAIT_FOR=trader:8080,portfolio:8000,
    env_file: .env
    restart: 'no'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import socket; s = socket.socket(); s.connect(('localhost', 5003)); s.close()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
  visualization:
    container_name: roottrading-visualization-1
    build:
      context: .
      dockerfile: visualization/Dockerfile
    ports:
    - 5009:5009
    environment:
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - POSTGRES_HOST=db
    - POSTGRES_PORT=5432
    - POSTGRES_DB=trading
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - VISUALIZATION_PORT=5009
    env_file: .env
    restart: 'no'
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:5009/api/health').read()
      interval: 180s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
    - roottrading-net
