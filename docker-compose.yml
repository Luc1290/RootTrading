services:
  # Services d'infrastructure
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_PASSWORD=${PGPASSWORD:-postgres}
      - POSTGRES_DB=${PGDATABASE:-trading}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Services RootTrading
  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-5000}:5000"

  analyzer:
    build:
      context: .
      dockerfile: ./analyzer/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${ANALYZER_PORT:-5001}:5001"

  trader:
    build:
      context: .
      dockerfile: ./trader/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${TRADER_PORT:-5002}:5002"

  portfolio:
    build:
      context: .
      dockerfile: ./portfolio/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${PORTFOLIO_PORT:-8000}:8000"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - portfolio
      - trader
    restart: unless-stopped

  coordinator:
    build:
      context: .
      dockerfile: ./coordinator/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      portfolio:
        condition: service_started
      trader:
        condition: service_started
    env_file: .env
    restart: unless-stopped
    ports:
      - "${COORDINATOR_PORT:-5003}:5003"

  dispatcher:
    build:
      context: .
      dockerfile: ./dispatcher/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${DISPATCHER_PORT:-5004}:5004"

  logger:
    build:
      context: .
      dockerfile: ./logger/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${LOGGER_PORT:-5005}:5005"

  pnl_tracker:
    build:
      context: .
      dockerfile: ./pnl_tracker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${PNL_TRACKER_PORT:-5006}:5006"

  risk_manager:
    build:
      context: .
      dockerfile: ./risk_manager/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      trader:
        condition: service_started
      portfolio:
        condition: service_started
    env_file: .env
    restart: unless-stopped
    ports:
      - "${RISK_MANAGER_PORT:-5007}:5007"

  scheduler:
    build:
      context: .
      dockerfile: ./scheduler/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    ports:
      - "${SCHEDULER_PORT:-5008}:5008"

volumes:
  redis_data:
  kafka_data:
  postgres_data: