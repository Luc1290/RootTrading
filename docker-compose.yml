# Réseaux personnalisés
networks:
  roottrading-net:
    driver: bridge

# Volumes persistants
volumes:
  redis-data:
  kafka-data:
  zookeeper-data:
  db-data:

services:
  # Services d'infrastructure
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - roottrading-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - roottrading-net

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z kafka 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - roottrading-net

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
      POSTGRES_DB: ${PGDATABASE:-trading}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/cleanup_on_startup.sql:/docker-entrypoint-initdb.d/02-cleanup.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - roottrading-net

  # Services d'application de base
  dispatcher:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: dispatcher/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5011/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  gateway:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: gateway/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      dispatcher:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5010/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  # Services de traitement
  analyzer:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: analyzer/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      dispatcher:
        condition: service_started
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5012/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  trader:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: trader/Dockerfile  # Chemin vers le Dockerfile
    ports:
      - "5002:5002"
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
      - WAIT_FOR=dispatcher:5011,analyzer:5012
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      dispatcher:
        condition: service_started
      analyzer:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 5002)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  portfolio:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: portfolio/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      dispatcher:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8080)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "8000:8000"  # API Portfolio
    networks:
      - roottrading-net

  risk_manager:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: risk_manager/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      portfolio:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8080)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  # Services secondaires
  coordinator:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: coordinator/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
      - WAIT_FOR=trader:8080,portfolio:8000,risk_manager:8080
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      trader:
        condition: service_started
      portfolio:
        condition: service_started
      risk_manager:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8080)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  pnl_tracker:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: pnl_tracker/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - roottrading-net

  scheduler:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: scheduler/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_REDIS=true
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8080)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  # Services d'interface et de logging
  logger:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: logger/Dockerfile  # Chemin vers le Dockerfile
    environment:
      - WAIT_FOR_KAFKA=true
      - WAIT_FOR_DB=true
    env_file: .env
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 8080)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net

  frontend:
    build:
      context: .  # Point sur le répertoire racine du projet
      dockerfile: frontend/Dockerfile  # Chemin vers le Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORTFOLIO_API_URL=http://portfolio:8000
    restart: unless-stopped
    depends_on:
      portfolio:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - roottrading-net