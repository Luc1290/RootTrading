"""
Point d'entr√©e principal pour le microservice Scheduler.
G√®re la surveillance du syst√®me et les t√¢ches planifi√©es.
"""
import logging
import signal
import sys
import time
import os
import threading
import argparse
import json
from datetime import datetime, timedelta
from typing import Dict, Any

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from shared.src.config import LOG_LEVEL
from scheduler.src.monitor import ServiceMonitor
from scheduler.src.health_check import HealthChecker

# Configuration du logging
log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('scheduler.log')
    ]
)
logger = logging.getLogger("scheduler")

# Variables pour le contr√¥le du service
service_monitor = None
health_checker = None
running = True

def signal_handler(signum, frame):
    """
    Gestionnaire de signal pour l'arr√™t propre.
    
    Args:
        signum: Num√©ro du signal
        frame: Frame actuelle
    """
    global running
    logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
    running = False

def parse_arguments():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(description='Scheduler et Health Checker')
    parser.add_argument(
        '--check-interval', 
        type=int, 
        default=60,
        help='Intervalle de v√©rification des services (en secondes)'
    )
    parser.add_argument(
        '--monitor-config', 
        type=str, 
        default=None,
        help='Chemin vers le fichier de configuration du moniteur de services'
    )
    parser.add_argument(
        '--health-config', 
        type=str, 
        default=None,
        help='Chemin vers le fichier de configuration du health checker'
    )
    parser.add_argument(
        '--health-interval', 
        type=int, 
        default=300,  # 5 minutes
        help='Intervalle de v√©rification de sant√© (en secondes)'
    )
    parser.add_argument(
        '--report-dir', 
        type=str, 
        default='./reports',
        help='R√©pertoire pour les rapports de sant√©'
    )
    return parser.parse_args()

def generate_health_report(checker: HealthChecker, report_dir: str) -> None:
    """
    G√©n√®re un rapport de sant√© du syst√®me.
    
    Args:
        checker: Instance du health checker
        report_dir: R√©pertoire des rapports
    """
    try:
        # Cr√©er le r√©pertoire des rapports s'il n'existe pas
        os.makedirs(report_dir, exist_ok=True)
        
        # Ex√©cuter toutes les v√©rifications
        results = checker.run_all_checks()
        
        # G√©n√©rer le nom du fichier avec timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"health_report_{timestamp}.json"
        filepath = os.path.join(report_dir, filename)
        
        # Enregistrer les r√©sultats dans un fichier JSON
        with open(filepath, 'w') as f:
            json.dump(results, f, indent=2)
        
        # Journaliser un r√©sum√©
        global_status = results.get("global", {}).get("status", "unknown")
        logger.info(f"Rapport de sant√© g√©n√©r√©: {filepath} (status: {global_status})")
        
        # Si le statut global est critique, journaliser un avertissement
        if global_status == "critical":
            logger.warning("‚ö†Ô∏è ALERTE: Statut de sant√© critique d√©tect√©")
            
            # Enregistrer les d√©tails des erreurs critiques
            for check_name, result in results.items():
                if check_name != "global" and result.get("status") == "critical":
                    logger.error(f"‚ùå V√©rification critique: {check_name} - {result.get('message')}")
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration du rapport de sant√©: {str(e)}")

def main():
    """
    Fonction principale du service Scheduler.
    """
    global service_monitor, health_checker, running
    
    # Parser les arguments
    args = parse_arguments()
    
    # Configurer les gestionnaires de signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Cr√©er le r√©pertoire des rapports s'il n'existe pas
    os.makedirs(args.report_dir, exist_ok=True)
    
    logger.info("üöÄ D√©marrage du service Scheduler RootTrading...")
    
    try:
        # Initialiser le moniteur de services
        service_monitor = ServiceMonitor(config_file=args.monitor_config)
        
        # Initialiser le health checker
        health_checker = HealthChecker(config_file=args.health_config)
        
        # D√©marrer le moniteur de services
        service_monitor.start()
        
        # Initialiser les variables de planification
        last_health_check = 0
        health_interval = args.health_interval
        
        logger.info("‚úÖ Service Scheduler d√©marr√©")
        
        # Boucle principale pour garder le service actif
        while running:
            time.sleep(1)
            
            # V√©rifier p√©riodiquement la sant√© du syst√®me
            current_time = time.time()
            if current_time - last_health_check > health_interval:
                try:
                    # G√©n√©rer un rapport de sant√©
                    generate_health_report(health_checker, args.report_dir)
                    
                    # Mettre √† jour le timestamp de derni√®re v√©rification
                    last_health_check = current_time
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la v√©rification de sant√©: {str(e)}")
            
            # V√©rifier et planifier d'autres t√¢ches
            # Par exemple, synchroniser les bases de donn√©es, nettoyer les logs, etc.
    
    except KeyboardInterrupt:
        logger.info("Programme interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans le service Scheduler: {str(e)}")
    finally:
        # Arr√™ter le moniteur de services
        if service_monitor:
            service_monitor.stop()
        
        # Fermer le health checker
        if health_checker:
            health_checker.close()
        
        logger.info("Service Scheduler termin√©")

if __name__ == "__main__":
    main()