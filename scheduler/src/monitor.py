"""
Module de surveillance des services.
V√©rifie l'√©tat de sant√© des diff√©rents services et d√©clenche des alertes si n√©cessaire.
"""
import logging
import requests
import threading
import time
from typing import Dict, Any, List, Set, Optional
from datetime import datetime, timedelta
import json
import subprocess
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ServiceMonitor:
    """
    Monitore l'√©tat de sant√© des services de la plateforme RootTrading.
    Effectue des v√©rifications p√©riodiques et d√©clenche des alertes si n√©cessaire.
    """
    
    def __init__(self, config_file: str = None):
        """
        Initialise le moniteur de services.
        
        Args:
            config_file: Chemin vers le fichier de configuration (optionnel)
        """
        # Charger la configuration
        self.config = self._load_config(config_file)
        
        # Liste des services √† surveiller
        self.services = self.config.get("services", {})
        
        # √âtat des services
        self.service_states: Dict[str, Dict[str, Any]] = {}
        
        # Thread de surveillance
        self.monitor_thread = None
        self.stop_event = threading.Event()
        
        # Alertes envoy√©es (pour √©viter la duplication)
        self.sent_alerts: Set[str] = set()
        
        # Intervalle de v√©rification (en secondes)
        self.check_interval = self.config.get("check_interval", 60)
        
        # Notification Discord (optionnel)
        self.discord_webhook = self.config.get("discord_webhook")
        
        logger.info(f"‚úÖ ServiceMonitor initialis√© avec {len(self.services)} services")
    
    def _load_config(self, config_file: str) -> Dict[str, Any]:
        """
        Charge la configuration depuis un fichier ou utilise les valeurs par d√©faut.
        
        Args:
            config_file: Chemin vers le fichier de configuration
            
        Returns:
            Configuration charg√©e
        """
        default_config = {
            "services": {
                "gateway": {
                    "url": "http://gateway:5000/health",
                    "timeout": 5,
                    "restart_command": "docker-compose restart gateway",
                    "critical": True
                },
                "analyzer": {
                    "url": "http://analyzer:5001/health",
                    "timeout": 5,
                    "restart_command": "docker-compose restart analyzer",
                    "critical": True
                },
                "trader": {
                    "url": "http://trader:5002/health",
                    "timeout": 5,
                    "restart_command": "docker-compose restart trader",
                    "critical": True
                },
                "portfolio": {
                    "url": "http://portfolio:8000/health",
                    "timeout": 5,
                    "restart_command": "docker-compose restart portfolio",
                    "critical": True
                },
                "frontend": {
                    "url": "http://frontend:3000/health",
                    "timeout": 5,
                    "restart_command": "docker-compose restart frontend",
                    "critical": False
                }
            },
            "check_interval": 60,  # Secondes
            "max_restarts": 3,     # Maximum de red√©marrages par 24h
            "discord_webhook": None
        }
        
        if not config_file:
            return default_config
        
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
                
            # Fusionner avec les valeurs par d√©faut
            for key, value in default_config.items():
                if key not in config:
                    config[key] = value
                elif isinstance(value, dict) and isinstance(config[key], dict):
                    # Pour les dictionnaires imbriqu√©s comme "services"
                    for subkey, subvalue in value.items():
                        if subkey not in config[key]:
                            config[key][subkey] = subvalue
            
            return config
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement de la configuration: {str(e)}")
            return default_config
    
    def check_service(self, service_name: str, service_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        V√©rifie l'√©tat de sant√© d'un service.
        
        Args:
            service_name: Nom du service
            service_config: Configuration du service
            
        Returns:
            √âtat de sant√© du service
        """
        url = service_config.get("url")
        timeout = service_config.get("timeout", 5)
        
        status = {
            "name": service_name,
            "status": "unknown",
            "response_time": 0,
            "last_check": datetime.now().isoformat(),
            "message": ""
        }
        
        if not url:
            status["status"] = "error"
            status["message"] = "URL non d√©finie"
            return status
        
        try:
            start_time = time.time()
            response = requests.get(url, timeout=timeout)
            response_time = time.time() - start_time
            
            status["response_time"] = response_time
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    service_status = data.get("status", "").lower()
                    
                    if service_status == "ok":
                        status["status"] = "healthy"
                        status["message"] = f"Service en ligne, temps de r√©ponse: {response_time:.3f}s"
                    else:
                        status["status"] = "degraded"
                        status["message"] = f"Service r√©pond mais statut: {service_status}"
                        
                except ValueError:
                    status["status"] = "degraded"
                    status["message"] = "R√©ponse non-JSON"
            else:
                status["status"] = "error"
                status["message"] = f"Code HTTP: {response.status_code}"
        
        except requests.exceptions.Timeout:
            status["status"] = "error"
            status["message"] = f"Timeout apr√®s {timeout}s"
        
        except requests.exceptions.ConnectionError:
            status["status"] = "error"
            status["message"] = "Impossible de se connecter"
        
        except Exception as e:
            status["status"] = "error"
            status["message"] = f"Erreur: {str(e)}"
        
        return status
    
    def should_restart_service(self, service_name: str, service_state: Dict[str, Any]) -> bool:
        """
        D√©termine si un service doit √™tre red√©marr√©.
        
        Args:
            service_name: Nom du service
            service_state: √âtat actuel du service
            
        Returns:
            True si le service doit √™tre red√©marr√©, False sinon
        """
        # Si le service est en bonne sant√©, pas besoin de le red√©marrer
        if service_state["status"] == "healthy":
            return False
        
        # V√©rifier le nombre de red√©marrages r√©cents
        restarts = service_state.get("restarts", [])
        recent_restarts = [r for r in restarts if 
                           datetime.fromisoformat(r) > datetime.now() - timedelta(hours=24)]
        
        max_restarts = self.config.get("max_restarts", 3)
        
        # Si trop de red√©marrages r√©cents, √©viter un nouveau red√©marrage
        if len(recent_restarts) >= max_restarts:
            logger.warning(f"‚ö†Ô∏è Trop de red√©marrages r√©cents pour {service_name} ({len(recent_restarts)}/{max_restarts})")
            return False
        
        # Si service critique en erreur, le red√©marrer
        if self.services[service_name].get("critical", False) and service_state["status"] == "error":
            return True
        
        # Si service d√©grad√© pendant trop longtemps, le red√©marrer
        if service_state["status"] == "degraded":
            # Check for consecutive degraded states
            degraded_count = service_state.get("consecutive_degraded", 0)
            if degraded_count >= 3:  # Red√©marrer apr√®s 3 v√©rifications d√©grad√©es cons√©cutives
                return True
        
        return False
    
    def restart_service(self, service_name: str) -> bool:
        """
        Signale qu'un service devrait √™tre red√©marr√©, mais ne tente pas de le faire directement.
    
        Args:
            service_name: Nom du service √† red√©marrer
        
        Returns:
            Toujours False car nous ne red√©marrons pas r√©ellement le service
        """
        logger.info(f"üîÑ Service {service_name} n√©cessite un red√©marrage")
    
        # Enregistrer que nous avons d√©tect√© un probl√®me
        now = datetime.now().isoformat()
        if service_name in self.service_states:
            if "restarts" not in self.service_states[service_name]:
                self.service_states[service_name]["restarts"] = []
        
            self.service_states[service_name]["restarts"].append(now)
            self.service_states[service_name]["last_restart_request"] = now
    
        # Envoyer une alerte pour le besoin de red√©marrage
        self.send_alert(f"Le service {service_name} n√©cessite un red√©marrage (v√©rifier manuellement)", "warning")
    
        return False
    
    def send_alert(self, message: str, level: str = "warning") -> bool:
        """
        Envoie une alerte.
        
        Args:
            message: Message d'alerte
            level: Niveau d'alerte ('info', 'warning', 'critical')
            
        Returns:
            True si l'alerte a √©t√© envoy√©e, False sinon
        """
        # √âviter les alertes dupliqu√©es
        alert_key = f"{level}:{message}"
        if alert_key in self.sent_alerts:
            return False
        
        logger.warning(f"‚ö†Ô∏è ALERTE ({level}): {message}")
        
        # Enregistrer l'alerte pour √©viter les duplications
        self.sent_alerts.add(alert_key)
        
        # Si le webhook Discord est configur√©, envoyer une notification
        if self.discord_webhook:
            try:
                # D√©terminer la couleur selon le niveau
                color = {
                    "info": 0x3498db,       # Bleu
                    "warning": 0xf1c40f,    # Jaune
                    "critical": 0xe74c3c    # Rouge
                }.get(level, 0x95a5a6)      # Gris par d√©faut
                
                # Pr√©parer le payload pour Discord
                payload = {
                    "embeds": [{
                        "title": f"Alerte RootTrading - {level.upper()}",
                        "description": message,
                        "color": color,
                        "timestamp": datetime.now().isoformat()
                    }]
                }
                
                # Envoyer la notification
                response = requests.post(
                    self.discord_webhook, 
                    json=payload, 
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 204:
                    logger.info("‚úÖ Notification Discord envoy√©e")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec de l'envoi de la notification Discord: {response.status_code}")
                    return False
            
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'envoi de la notification Discord: {str(e)}")
                return False
        
        return True
    
    def monitor_services(self) -> None:
        """
        Boucle principale de surveillance des services.
        """
        logger.info("üîç D√©marrage de la surveillance des services...")
        
        while not self.stop_event.is_set():
            for service_name, service_config in self.services.items():
                try:
                    # V√©rifier l'√©tat du service
                    status = self.check_service(service_name, service_config)
                    
                    # Mettre √† jour l'√©tat
                    if service_name not in self.service_states:
                        self.service_states[service_name] = status
                    else:
                        # Mettre √† jour le compteur de d√©gradations cons√©cutives
                        if status["status"] == "degraded":
                            consec_degraded = self.service_states[service_name].get("consecutive_degraded", 0)
                            self.service_states[service_name]["consecutive_degraded"] = consec_degraded + 1
                        else:
                            self.service_states[service_name]["consecutive_degraded"] = 0
                        
                        # Mettre √† jour le reste de l'√©tat
                        self.service_states[service_name].update(status)
                    
                    # V√©rifier si le service doit √™tre red√©marr√©
                    if self.should_restart_service(service_name, self.service_states[service_name]):
                        self.restart_service(service_name)
                    
                    # Envoyer des alertes si n√©cessaire
                    if status["status"] == "error":
                        self.send_alert(
                            f"Service {service_name} en erreur: {status['message']}",
                            "critical" if service_config.get("critical", False) else "warning"
                        )
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la v√©rification du service {service_name}: {str(e)}")
            
            # Attendre jusqu'√† la prochaine v√©rification
            for _ in range(self.check_interval):
                if self.stop_event.is_set():
                    break
                time.sleep(1)
    
    def start(self) -> None:
        """
        D√©marre la surveillance des services.
        """
        if self.monitor_thread and self.monitor_thread.is_alive():
            logger.warning("Surveillance d√©j√† en cours")
            return
        
        self.stop_event.clear()
        self.monitor_thread = threading.Thread(target=self.monitor_services, daemon=True)
        self.monitor_thread.start()
        
        logger.info("‚úÖ Surveillance des services d√©marr√©e")
    
    def stop(self) -> None:
        """
        Arr√™te la surveillance des services.
        """
        if not self.monitor_thread or not self.monitor_thread.is_alive():
            return
        
        logger.info("Arr√™t de la surveillance des services...")
        self.stop_event.set()
        
        if self.monitor_thread:
            self.monitor_thread.join(timeout=self.check_interval + 5)
            if self.monitor_thread.is_alive():
                logger.warning("‚ö†Ô∏è Le thread de surveillance ne s'est pas arr√™t√© proprement")
        
        logger.info("‚úÖ Surveillance des services arr√™t√©e")
    
    def get_service_status(self) -> Dict[str, Any]:
        """
        R√©cup√®re l'√©tat actuel de tous les services.
        
        Returns:
            √âtat de tous les services
        """
        return {
            "services": self.service_states,
            "last_update": datetime.now().isoformat(),
            "uptime": None,  # TODO: Impl√©menter le calcul d'uptime
            "total_restarts": sum(len(s.get("restarts", [])) for s in self.service_states.values())
        }

# Point d'entr√©e pour les tests
if __name__ == "__main__":
    # Initialiser et d√©marrer le moniteur
    monitor = ServiceMonitor()
    monitor.start()
    
    try:
        # Rester en vie jusqu'√† Ctrl+C
        while True:
            time.sleep(1)
    
    except KeyboardInterrupt:
        # Arr√™ter proprement
        monitor.stop()
        logger.info("Programme termin√©")